{"version":3,"file":"597.1ee0d6198d1a9318.js","mappings":"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","names":["axis","_typename","fInvBinWidth","$dummy","fNBinsNoOver","fLow","min","max","GetNumBins","this","GetBinCoord","bin","FindBin","x","add","Math","floor","fBinBorders","length","indx","round","indx2","abs","k","GetBinCenter","GetBinLowEdge","obj","fHistImpl","fIO","RObjectPainter","constructor","dom","histo","super","csstype","draw_content","nbinsx","nbinsy","accept_drops","mode3d","getHisto","isDisplayItem","getObject","fAxes","force","getHImpl","getBinContent","assignRAxisMethods","nx","fIndicies","dx","stepx","ny","dy","stepy","nz","dz","stepz","getBin","y","z","getBin0","t","fBinContent","getBinError","sqrt","_2","_0","_1","fStatistics","fSumWeightsSquared","decodeOptions","options","Hist","copyOptionsFrom","src","Mode3D","copyOptionsToOthers","forEachPainter","painter","clear3DScene","fp","getFramePainter","create3DScene","cleanup","getDimension","scanContent","drawFrameAxes","main","isMainPainter","cleanupAxes","xmin","xmax","ymin","ymax","zmin","zmax","setAxesRanges","getAxis","drawAxes","second_x","second_y","setAxes2Ranges","drawAxes2","Promise","resolve","createHistDrawAttributes","createv7AttFill","createv7AttLine","updateDisplayItem","fContMin","fContMinPos","fContMax","updateObject","origin","matchObjectType","horigin","hobj","fTitle","histogram_updated","name","getAxisBinTip","step","pmain","handle","x1","kind","axisAsText","x2","extractAxesProperties","ndim","nbinsz","addInteractivity","ismain","second_axis","processItemReply","reply","req","console","error","reqid","current_item_reqid","item","resolveFunc","drawingBins","reason","is_axes_zoomed","indexOf","v7NormalMode","prepareDraw","only_indexes","incomplete","v7SubmitRequest","bind","setTimeout","toggleStat","getSelectIndex","size","taxis","nbins","s","autoZoom","clickButton","funcname","zoom_xmin","zoom_xmax","zoom_ymin","zoom_ymax","zoom_zmin","zoom_zmax","unzoom","zoomChangedInteractive","toggleAxisLog","fillToolbar","not_shown","pp","getPadPainter","addPadButton","showPadButtons","get3DToolTip","tip","fName","title","ix","iy","value","lines","getBinTooltips","iz","createContour","palette","args","nlevels","gStyle","minbin","maxbin","zminpos","minposbin","scatter_plot","gminbin","gmaxbin","gminposbin","full_z_range","setFullRange","logz","scale_zmin","colzmin","scale_zmax","colzmax","changeValuesRange","menu","arg","prefix","isAxisZoomed","input","then","res","JSON","parse","Number","isFinite","zoom","fillContextMenu","addchk","fillHistContextMenu","getMainPainter","isTooltipAllowed","setTooltipAllowed","enable_highlight","highlightBin3D","render3D","FrontBox","BackBox","Zero","redrawPad","Lego","fillPaletteMenu","control","reset","addAttributesMenu","updatePaletteDraw","findPainterFor","undefined","i","drawPalette","addPaletteMenu","Palette","settings","parseInt","redraw","toggleMode3D","Surf","Error","Color","interactiveRedraw","rounding","extra","middle","right_extra","j","binz","binarea","xaxis","yaxis","hdim","i1","i2","j1","j2","k1","k2","stepi","stepj","stepk","sumz","xbar1","xbar2","ybar1","ybar2","grx","Array","gry","original","origx","origy","pixel_density","funcs","getGrFuncs","logx","use3d","size_x3d","logy","size_y3d","getHistPalette"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/RHistPainter.mjs"],"sourcesContent":["import { gStyle, settings } from '../core.mjs';\nimport { RObjectPainter } from '../base/RObjectPainter.mjs';\n\n\n/** @summary assign methods for the RAxis objects\n  * @private */\nfunction assignRAxisMethods(axis) {\n   if ((axis._typename == \"ROOT::Experimental::RAxisEquidistant\") || (axis._typename == \"ROOT::Experimental::RAxisLabels\")) {\n      if (axis.fInvBinWidth === 0) {\n         axis.$dummy = true;\n         axis.fInvBinWidth = 1;\n         axis.fNBinsNoOver = 0;\n         axis.fLow = 0;\n      }\n\n      axis.min = axis.fLow;\n      axis.max = axis.fLow + axis.fNBinsNoOver/axis.fInvBinWidth;\n      axis.GetNumBins = function() { return this.fNBinsNoOver; }\n      axis.GetBinCoord = function(bin) { return this.fLow + bin/this.fInvBinWidth; }\n      axis.FindBin = function(x,add) { return Math.floor((x - this.fLow)*this.fInvBinWidth + add); }\n   } else if (axis._typename == \"ROOT::Experimental::RAxisIrregular\") {\n      axis.min = axis.fBinBorders[0];\n      axis.max = axis.fBinBorders[axis.fBinBorders.length - 1];\n      axis.GetNumBins = function() { return this.fBinBorders.length; }\n      axis.GetBinCoord = function(bin) {\n         let indx = Math.round(bin);\n         if (indx <= 0) return this.fBinBorders[0];\n         if (indx >= this.fBinBorders.length) return this.fBinBorders[this.fBinBorders.length - 1];\n         if (indx==bin) return this.fBinBorders[indx];\n         let indx2 = (bin < indx) ? indx - 1 : indx + 1;\n         return this.fBinBorders[indx] * Math.abs(bin-indx2) + this.fBinBorders[indx2] * Math.abs(bin-indx);\n      }\n      axis.FindBin = function(x,add) {\n         for (let k = 1; k < this.fBinBorders.length; ++k)\n            if (x < this.fBinBorders[k]) return Math.floor(k-1+add);\n         return this.fBinBorders.length - 1;\n      }\n   }\n\n   // to support some code from ROOT6 drawing\n\n   axis.GetBinCenter = function(bin) { return this.GetBinCoord(bin-0.5); }\n   axis.GetBinLowEdge = function(bin) { return this.GetBinCoord(bin-1); }\n}\n\n/** @summary Returns real histogram impl\n  * @private */\nfunction getHImpl(obj) {\n   return (obj && obj.fHistImpl) ? obj.fHistImpl.fIO : null;\n}\n\n\n/** @summary Base painter class for RHist objects\n *\n * @private\n */\n\nclass RHistPainter extends RObjectPainter {\n\n   /** @summary Constructor\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} histo - RHist object */\n   constructor(dom, histo) {\n      super(dom, histo);\n      this.csstype = \"hist\";\n      this.draw_content = true;\n      this.nbinsx = 0;\n      this.nbinsy = 0;\n      this.accept_drops = true; // indicate that one can drop other objects like doing Draw(\"same\")\n      this.mode3d = false;\n\n      // initialize histogram methods\n      this.getHisto(true);\n   }\n\n   /** @summary Returns true if RHistDisplayItem is used */\n   isDisplayItem() {\n      let obj = this.getObject();\n      return obj && obj.fAxes ? true : false;\n   }\n\n   /** @summary get histogram */\n   getHisto(force) {\n      let obj = this.getObject(), histo = getHImpl(obj);\n\n      if (histo && (!histo.getBinContent || force)) {\n         if (histo.fAxes._2) {\n            assignRAxisMethods(histo.fAxes._0);\n            assignRAxisMethods(histo.fAxes._1);\n            assignRAxisMethods(histo.fAxes._2);\n            histo.getBin = function(x, y, z) { return (x-1) + this.fAxes._0.GetNumBins()*(y-1) + this.fAxes._0.GetNumBins()*this.fAxes._1.GetNumBins()*(z-1); }\n            // FIXME: all normal ROOT methods uses indx+1 logic, but RHist has no underflow/overflow bins now\n            histo.getBinContent = function(x, y, z) { return this.fStatistics.fBinContent[this.getBin(x, y, z)]; }\n            histo.getBinError = function(x, y, z) {\n               let bin = this.getBin(x, y, z);\n               if (this.fStatistics.fSumWeightsSquared)\n                  return Math.sqrt(this.fStatistics.fSumWeightsSquared[bin]);\n               return Math.sqrt(Math.abs(this.fStatistics.fBinContent[bin]));\n            }\n         } else if (histo.fAxes._1) {\n            assignRAxisMethods(histo.fAxes._0);\n            assignRAxisMethods(histo.fAxes._1);\n            histo.getBin = function(x, y) { return (x-1) + this.fAxes._0.GetNumBins()*(y-1); }\n            // FIXME: all normal ROOT methods uses indx+1 logic, but RHist has no underflow/overflow bins now\n            histo.getBinContent = function(x, y) { return this.fStatistics.fBinContent[this.getBin(x, y)]; }\n            histo.getBinError = function(x, y) {\n               let bin = this.getBin(x, y);\n               if (this.fStatistics.fSumWeightsSquared)\n                  return Math.sqrt(this.fStatistics.fSumWeightsSquared[bin]);\n               return Math.sqrt(Math.abs(this.fStatistics.fBinContent[bin]));\n            }\n         } else {\n            assignRAxisMethods(histo.fAxes._0);\n            histo.getBin = function(x) { return x-1; }\n            // FIXME: all normal ROOT methods uses indx+1 logic, but RHist has no underflow/overflow bins now\n            histo.getBinContent = function(x) { return this.fStatistics.fBinContent[x-1]; }\n            histo.getBinError = function(x) {\n               if (this.fStatistics.fSumWeightsSquared)\n                  return Math.sqrt(this.fStatistics.fSumWeightsSquared[x-1]);\n               return Math.sqrt(Math.abs(this.fStatistics.fBinContent[x-1]));\n            }\n         }\n      } else if (!histo && obj && obj.fAxes) {\n         // case of RHistDisplayItem\n\n         histo = obj;\n\n         if (!histo.getBinContent || force) {\n            if (histo.fAxes.length == 3) {\n               assignRAxisMethods(histo.fAxes[0]);\n               assignRAxisMethods(histo.fAxes[1]);\n               assignRAxisMethods(histo.fAxes[2]);\n\n               histo.nx = histo.fIndicies[1] - histo.fIndicies[0];\n               histo.dx = histo.fIndicies[0] + 1;\n               histo.stepx = histo.fIndicies[2];\n\n               histo.ny = histo.fIndicies[4] - histo.fIndicies[3];\n               histo.dy = histo.fIndicies[3] + 1;\n               histo.stepy = histo.fIndicies[5];\n\n               histo.nz = histo.fIndicies[7] - histo.fIndicies[6];\n               histo.dz = histo.fIndicies[6] + 1;\n               histo.stepz = histo.fIndicies[8];\n\n               // this is index in original histogram\n               histo.getBin = function(x, y, z) { return (x-1) + this.fAxes[0].GetNumBins()*(y-1) + this.fAxes[0].GetNumBins()*this.fAxes[1].GetNumBins()*(z-1); }\n\n               // this is index in current available data\n               if ((histo.stepx > 1) || (histo.stepy > 1) || (histo.stepz > 1))\n                  histo.getBin0 = function(x, y, z) { return Math.floor((x-this.dx)/this.stepx) + this.nx/this.stepx*Math.floor((y-this.dy)/this.stepy) + this.nx/this.stepx*this.ny/this.stepy*Math.floor((z-this.dz)/this.stepz); }\n               else\n                  histo.getBin0 = function(x, y, z) { return (x-this.dx) + this.nx*(y-this.dy) + this.nx*this.ny*(z-dz); }\n\n               histo.getBinContent = function(x, y, z) { return this.fBinContent[this.getBin0(x, y, z)]; }\n               histo.getBinError = function(x, y, z) { return Math.sqrt(Math.abs(this.getBinContent(x, y, z))); }\n\n\n            } else if (histo.fAxes.length == 2) {\n               assignRAxisMethods(histo.fAxes[0]);\n               assignRAxisMethods(histo.fAxes[1]);\n\n               histo.nx = histo.fIndicies[1] - histo.fIndicies[0];\n               histo.dx = histo.fIndicies[0] + 1;\n               histo.stepx = histo.fIndicies[2];\n\n               histo.ny = histo.fIndicies[4] - histo.fIndicies[3];\n               histo.dy = histo.fIndicies[3] + 1;\n               histo.stepy = histo.fIndicies[5];\n\n               // this is index in original histogram\n               histo.getBin = function(x, y) { return (x-1) + this.fAxes[0].GetNumBins()*(y-1); }\n\n               // this is index in current available data\n               if ((histo.stepx > 1) || (histo.stepy > 1))\n                  histo.getBin0 = function(x, y) { return Math.floor((x-this.dx)/this.stepx) + this.nx/this.stepx*Math.floor((y-this.dy)/this.stepy); }\n               else\n                  histo.getBin0 = function(x, y) { return (x-this.dx) + this.nx*(y-this.dy); }\n\n               histo.getBinContent = function(x, y) { return this.fBinContent[this.getBin0(x, y)]; }\n               histo.getBinError = function(x, y) { return Math.sqrt(Math.abs(this.getBinContent(x, y))); }\n            } else {\n               assignRAxisMethods(histo.fAxes[0]);\n               histo.nx = histo.fIndicies[1] - histo.fIndicies[0];\n               histo.dx = histo.fIndicies[0] + 1;\n               histo.stepx = histo.fIndicies[2];\n\n               histo.getBin = function(x) { return x-1; }\n               if (histo.stepx > 1)\n                  histo.getBin0 = function(x) { return Math.floor((x-this.dx)/this.stepx); }\n               else\n                  histo.getBin0 = function(x) { return x-this.dx; }\n               histo.getBinContent = function(x) { return this.fBinContent[this.getBin0(x)]; }\n               histo.getBinError = function(x) { return Math.sqrt(Math.abs(this.getBinContent(x))); }\n            }\n         }\n      }\n      return histo;\n   }\n\n   /** @summary Decode options */\n   decodeOptions(/*opt*/) {\n      if (!this.options) this.options = { Hist : 1 };\n   }\n\n   /** @summary Copy draw options from other painter */\n   copyOptionsFrom(src) {\n      if (src === this) return;\n      let o = this.options, o0 = src.options;\n      o.Mode3D = o0.Mode3D;\n   }\n\n   /** @summary copy draw options to all other histograms in the pad*/\n   copyOptionsToOthers() {\n      this.forEachPainter(painter => {\n         if ((painter !== this) && (typeof painter.copyOptionsFrom == 'function'))\n            painter.copyOptionsFrom(this);\n      }, \"objects\");\n   }\n\n   /** @summary Clear 3d drawings - if any */\n   clear3DScene() {\n      let fp = this.getFramePainter();\n      if (typeof fp?.create3DScene === 'function')\n         fp.create3DScene(-1);\n      this.mode3d = false;\n   }\n\n   /** @summary Cleanup hist painter */\n   cleanup() {\n      this.clear3DScene();\n\n      delete this.options;\n\n      super.cleanup();\n   }\n\n   /** @summary Returns histogram dimension */\n   getDimension() { return 1; }\n\n   /** @summary Scan histogram content\n     * @abstract */\n   scanContent(/*when_axis_changed*/) {\n      // function will be called once new histogram or\n      // new histogram content is assigned\n      // one should find min,max,nbins, maxcontent values\n      // if when_axis_changed === true specified, content will be scanned after axis zoom changed\n   }\n\n   /** @summary Draw axes */\n   drawFrameAxes() {\n      // return true when axes was drawn\n      let main = this.getFramePainter();\n      if (!main)\n         return Promise.resolve(false);\n\n      if (!this.draw_content)\n         return Promise.resolve(true);\n\n      if (!this.isMainPainter()) {\n         if (!this.options.second_x && !this.options.second_y)\n            return Promise.resolve(true);\n\n         main.setAxes2Ranges(this.options.second_x, this.getAxis(\"x\"), this.xmin, this.xmax, this.options.second_y, this.getAxis(\"y\"), this.ymin, this.ymax);\n         return main.drawAxes2(this.options.second_x, this.options.second_y);\n      }\n\n      main.cleanupAxes();\n      main.xmin = main.xmax = 0;\n      main.ymin = main.ymax = 0;\n      main.zmin = main.zmax = 0;\n      main.setAxesRanges(this.getAxis(\"x\"), this.xmin, this.xmax, this.getAxis(\"y\"), this.ymin, this.ymax, this.getAxis(\"z\"), this.zmin, this.zmax);\n      return main.drawAxes();\n   }\n\n   /** @summary create attributes */\n   createHistDrawAttributes() {\n      this.createv7AttFill();\n      this.createv7AttLine();\n   }\n\n   /** @summary update display item */\n   updateDisplayItem(obj, src) {\n      if (!obj || !src) return false;\n\n      obj.fAxes = src.fAxes;\n      obj.fIndicies = src.fIndicies;\n      obj.fBinContent = src.fBinContent;\n      obj.fContMin = src.fContMin;\n      obj.fContMinPos = src.fContMinPos;\n      obj.fContMax = src.fContMax;\n\n      // update histogram attributes\n      this.getHisto(true);\n\n      return true;\n   }\n\n   /** @summary update histogram object */\n   updateObject(obj /*, opt*/) {\n\n      let origin = this.getObject();\n\n      if (obj !== origin) {\n\n         if (!this.matchObjectType(obj)) return false;\n\n         if (this.isDisplayItem()) {\n\n            this.updateDisplayItem(origin, obj);\n\n         } else {\n\n            let horigin = getHImpl(origin),\n                hobj = getHImpl(obj);\n\n            if (!horigin || !hobj) return false;\n\n            // make it easy - copy statistics without axes\n            horigin.fStatistics = hobj.fStatistics;\n\n            origin.fTitle = obj.fTitle;\n         }\n      }\n\n      this.scanContent();\n\n      this.histogram_updated = true; // indicate that object updated\n\n      return true;\n   }\n\n   /** @summary Get axis object */\n   getAxis(name) {\n      let histo = this.getHisto(), obj = this.getObject(), axis = null;\n\n      if (obj && obj.fAxes) {\n         switch(name) {\n            case \"x\": axis = obj.fAxes[0]; break;\n            case \"y\": axis = obj.fAxes[1]; break;\n            case \"z\": axis = obj.fAxes[2]; break;\n            default: axis = obj.fAxes[0]; break;\n         }\n      } else if (histo && histo.fAxes) {\n         // console.log('histo fAxes', histo.fAxes, histo.fAxes._0)\n         switch(name) {\n            case \"x\": axis = histo.fAxes._0; break;\n            case \"y\": axis = histo.fAxes._1; break;\n            case \"z\": axis = histo.fAxes._2; break;\n            default: axis = histo.fAxes._0; break;\n         }\n      }\n\n      if (axis && !axis.GetBinCoord)\n         assignRAxisMethods(axis);\n\n      return axis;\n   }\n\n   /** @summary Get tip text for axis bin */\n   getAxisBinTip(name, bin, step) {\n      let pmain = this.getFramePainter(),\n          handle = pmain[name+\"_handle\"],\n          axis = this.getAxis(name),\n          x1 = axis.GetBinCoord(bin);\n\n      if (handle.kind === 'labels')\n         return pmain.axisAsText(name, x1);\n\n      let x2 = axis.GetBinCoord(bin+(step || 1));\n\n      if (handle.kind === 'time')\n         return pmain.axisAsText(name, (x1+x2)/2);\n\n      return \"[\" + pmain.axisAsText(name, x1) + \", \" + pmain.axisAsText(name, x2) + \")\";\n   }\n\n   /** @summary Extract axes ranges and bins numbers\n     * @desc Also here ensured that all axes objects got their necessary methods */\n   extractAxesProperties(ndim) {\n\n      let histo = this.getHisto();\n      if (!histo) return;\n\n      this.nbinsx = this.nbinsy = this.nbinsz = 0;\n\n      let axis = this.getAxis(\"x\");\n      this.nbinsx = axis.GetNumBins();\n      this.xmin = axis.min;\n      this.xmax = axis.max;\n\n      if (ndim < 2) return;\n      axis = this.getAxis(\"y\");\n      this.nbinsy = axis.GetNumBins();\n      this.ymin = axis.min;\n      this.ymax = axis.max;\n\n      if (ndim < 3) return;\n      axis = this.getAxis(\"z\");\n      this.nbinsz = axis.GetNumBins();\n      this.zmin = axis.min;\n      this.zmax = axis.max;\n   }\n\n   /** @summary Add interactive features, only main painter does it */\n   addInteractivity() {\n      // only first painter in list allowed to add interactive functionality to the frame\n\n      let ismain =  this.isMainPainter(),\n          second_axis = this.options.second_x || this.options.second_y,\n          fp = ismain || second_axis ? this.getFramePainter() : null;\n      return fp ? fp.addInteractivity(!ismain && second_axis) : true;\n   }\n\n   /** @summary Process item reply */\n   processItemReply(reply, req) {\n      if (!this.isDisplayItem())\n         return console.error('Get item when display normal histogram');\n\n      if (req.reqid === this.current_item_reqid) {\n\n         if (reply !== null) {\n            this.updateDisplayItem(this.getObject(), reply.item);\n         }\n\n         req.resolveFunc(true);\n      }\n   }\n\n   /** @summary Special method to request bins from server if existing data insufficient\n     * @returns {Promise} when ready */\n   drawingBins(reason) {\n\n      let is_axes_zoomed = false;\n      if (reason && (typeof reason == \"string\") && (reason.indexOf(\"zoom\") == 0)) {\n         if (reason.indexOf(\"0\") > 0) is_axes_zoomed = true;\n         if ((this.getDimension() > 1) && (reason.indexOf(\"1\") > 0)) is_axes_zoomed = true;\n         if ((this.getDimension() > 2) && (reason.indexOf(\"2\") > 0)) is_axes_zoomed = true;\n      }\n\n      if (this.isDisplayItem() && is_axes_zoomed && this.v7NormalMode()) {\n\n         let handle = this.prepareDraw({ only_indexes: true });\n\n         // submit request if histogram data not enough for display\n         if (handle.incomplete)\n            return new Promise(resolveFunc => {\n               // use empty kind to always submit request\n               let req = this.v7SubmitRequest(\"\", { _typename: \"ROOT::Experimental::RHistDrawableBase::RRequest\" },\n                                                  this.processItemReply.bind(this));\n               if (req) {\n                  this.current_item_reqid = req.reqid; // ignore all previous requests, only this one will be processed\n                  req.resolveFunc = resolveFunc;\n                  setTimeout(this.processItemReply.bind(this, null, req), 1000); // after 1 s draw something that we can\n               } else {\n                  resolveFunc(true);\n               }\n            });\n      }\n\n      return Promise.resolve(true);\n   }\n\n   /** @summary Toggle stat box drawing\n     * @desc Not yet implemented */\n   toggleStat(/*arg*/) {\n   }\n\n   /** @summary get selected index for axis */\n   getSelectIndex(axis, size, add) {\n      // be aware - here indexes starts from 0\n      let indx = 0,\n          taxis = this.getAxis(axis),\n          nbins = this['nbins'+axis] || 0;\n\n      if (this.options.second_x && axis == \"x\") axis = \"x2\";\n      if (this.options.second_y && axis == \"y\") axis = \"y2\";\n\n      let main = this.getFramePainter(),\n          min = main ? main['zoom_' + axis + 'min'] : 0,\n          max = main ? main['zoom_' + axis + 'max'] : 0;\n\n      if ((min !== max) && taxis) {\n         if (size == \"left\")\n            indx = taxis.FindBin(min, add || 0);\n         else\n            indx = taxis.FindBin(max, (add || 0) + 0.5);\n         if (indx<0) indx = 0; else if (indx>nbins) indx = nbins;\n      } else {\n         indx = (size == \"left\") ? 0 : nbins;\n      }\n\n      return indx;\n   }\n\n   /** @summary Auto zoom into histogram non-empty range\n     * @abstract */\n   autoZoom() {}\n\n   /** @summary Process click on histogram-defined buttons */\n   clickButton(funcname) {\n      // TODO: move to frame painter\n      switch(funcname) {\n         case \"ToggleZoom\":\n            if ((this.zoom_xmin !== this.zoom_xmax) || (this.zoom_ymin !== this.zoom_ymax) || (this.zoom_zmin !== this.zoom_zmax)) {\n               this.unzoom();\n               this.getFramePainter().zoomChangedInteractive('reset');\n               return true;\n            }\n            if (this.draw_content) {\n               this.autoZoom();\n               return true;\n            }\n            break;\n         case \"ToggleLogX\": this.getFramePainter().toggleAxisLog(\"x\"); break;\n         case \"ToggleLogY\": this.getFramePainter().toggleAxisLog(\"y\"); break;\n         case \"ToggleLogZ\": this.getFramePainter().toggleAxisLog(\"z\"); break;\n         case \"ToggleStatBox\": this.toggleStat(); return true;\n      }\n      return false;\n   }\n\n   /** @summary Fill pad toolbar with hist-related functions */\n   fillToolbar(not_shown) {\n      let pp = this.getPadPainter();\n      if (!pp) return;\n\n      pp.addPadButton(\"auto_zoom\", 'Toggle between unzoom and autozoom-in', 'ToggleZoom', \"Ctrl *\");\n      pp.addPadButton(\"arrow_right\", \"Toggle log x\", \"ToggleLogX\", \"PageDown\");\n      pp.addPadButton(\"arrow_up\", \"Toggle log y\", \"ToggleLogY\", \"PageUp\");\n      if (this.getDimension() > 1)\n         pp.addPadButton(\"arrow_diag\", \"Toggle log z\", \"ToggleLogZ\");\n      if (this.draw_content)\n         pp.addPadButton(\"statbox\", 'Toggle stat box', \"ToggleStatBox\");\n      if (!not_shown) pp.showPadButtons();\n   }\n\n   /** @summary get tool tips used in 3d mode */\n   get3DToolTip(indx) {\n      let histo = this.getHisto(),\n          tip = { bin: indx, name: histo.fName || \"histo\", title: histo.fTitle };\n      switch (this.getDimension()) {\n         case 1:\n            tip.ix = indx + 1; tip.iy = 1;\n            tip.value = histo.getBinContent(tip.ix);\n            tip.error = histo.getBinError(tip.ix);\n            tip.lines = this.getBinTooltips(indx-1);\n            break;\n         case 2:\n            tip.ix = (indx % this.nbinsx) + 1;\n            tip.iy = (indx - (tip.ix - 1)) / this.nbinsx + 1;\n            tip.value = histo.getBinContent(tip.ix, tip.iy);\n            tip.error = histo.getBinError(tip.ix, tip.iy);\n            tip.lines = this.getBinTooltips(tip.ix-1, tip.iy-1);\n            break;\n         case 3:\n            tip.ix = indx % this.nbinsx + 1;\n            tip.iy = ((indx - (tip.ix - 1)) / this.nbinsx) % this.nbinsy + 1;\n            tip.iz = (indx - (tip.ix - 1) - (tip.iy - 1) * this.nbinsx) / this.nbinsx / this.nbinsy + 1;\n            tip.value = histo.getBinContent(tip.ix, tip.iy, tip.iz);\n            tip.error = histo.getBinError(tip.ix, tip.iy, tip.iz);\n            tip.lines = this.getBinTooltips(tip.ix-1, tip.iy-1, tip.iz-1);\n            break;\n      }\n\n      return tip;\n   }\n\n   /** @summary Create contour levels for currently selected Z range */\n   createContour(main, palette, args) {\n      if (!main || !palette) return;\n\n      if (!args) args = {};\n\n      let nlevels = gStyle.fNumberContours,\n          zmin = this.minbin, zmax = this.maxbin, zminpos = this.minposbin;\n\n      if (args.scatter_plot) {\n         if (nlevels > 50) nlevels = 50;\n         zmin = this.minposbin;\n      }\n\n      if (zmin === zmax) { zmin = this.gminbin; zmax = this.gmaxbin; zminpos = this.gminposbin; }\n\n      if (this.getDimension() < 3) {\n         if (main.zoom_zmin !== main.zoom_zmax) {\n            zmin = main.zoom_zmin;\n            zmax = main.zoom_zmax;\n         } else if (args.full_z_range) {\n            zmin = main.zmin;\n            zmax = main.zmax;\n         }\n      }\n\n      palette.setFullRange(main.zmin, main.zmax);\n      palette.createContour(main.logz, nlevels, zmin, zmax, zminpos);\n\n      if (this.getDimension() < 3) {\n         main.scale_zmin = palette.colzmin;\n         main.scale_zmax = palette.colzmax;\n      }\n   }\n\n   /** @summary Start dialog to modify range of axis where histogram values are displayed */\n   changeValuesRange(menu, arg) {\n      let pmain = this.getFramePainter();\n      if (!pmain) return;\n      let prefix = pmain.isAxisZoomed(arg) ? \"zoom_\" + arg : arg,\n          curr = \"[\" + pmain[prefix+'min'] + \",\" + pmain[prefix+'max'] + \"]\";\n      menu.input(\"Enter values range for axis \" + arg + \" like [0,100] or empty string to unzoom\", curr).then(res => {\n         res = res ? JSON.parse(res) : [];\n         if (!res || (typeof res != \"object\") || (res.length != 2) || !Number.isFinite(res[0]) || !Number.isFinite(res[1]))\n            pmain.unzoom(arg);\n         else\n            pmain.zoom(arg, res[0], res[1]);\n      });\n   }\n\n   /** @summary Fill histogram context menu */\n   fillContextMenu(menu) {\n\n      menu.add(\"header:v7histo::anyname\");\n\n      if (this.draw_content) {\n         menu.addchk(this.toggleStat('only-check'), \"Show statbox\", () => this.toggleStat());\n\n         if (this.getDimension() == 2)\n             menu.add(\"Values range\", () => this.changeValuesRange(menu, \"z\"));\n\n         if (typeof this.fillHistContextMenu == 'function')\n            this.fillHistContextMenu(menu);\n      }\n\n      let fp = this.getFramePainter();\n\n      if (this.options.Mode3D) {\n         // menu for 3D drawings\n\n         if (menu.size() > 0)\n            menu.add(\"separator\");\n\n         let main = this.getMainPainter() || this;\n\n         menu.addchk(main.isTooltipAllowed(), 'Show tooltips', () => main.setTooltipAllowed(\"toggle\"));\n\n         menu.addchk(fp.enable_highlight, 'Highlight bins', () => {\n            fp.enable_highlight = !fp.enable_highlight;\n            if (!fp.enable_highlight && main.highlightBin3D && main.mode3d) main.highlightBin3D(null);\n         });\n\n         if (typeof fp?.render3D == 'function') {\n            menu.addchk(main.options.FrontBox, 'Front box', () => {\n               main.options.FrontBox = !main.options.FrontBox;\n               fp.render3D();\n            });\n            menu.addchk(main.options.BackBox, 'Back box', () => {\n               main.options.BackBox = !main.options.BackBox;\n               fp.render3D();\n            });\n         }\n\n         if (this.draw_content) {\n            menu.addchk(!this.options.Zero, 'Suppress zeros', () => {\n               this.options.Zero = !this.options.Zero;\n               this.redrawPad();\n            });\n\n            if ((this.options.Lego == 12) || (this.options.Lego == 14)) {\n               if (this.fillPaletteMenu)\n                  this.fillPaletteMenu(menu);\n            }\n         }\n\n         if (typeof main.control?.reset === 'function')\n            menu.add('Reset camera', () => main.control.reset());\n      }\n\n      menu.addAttributesMenu(this);\n\n      if (this.histogram_updated && fp.zoomChangedInteractive())\n         menu.add('Let update zoom', () => fp.zoomChangedInteractive('reset'));\n\n      return true;\n   }\n\n   /** @summary Update palette drawing */\n   updatePaletteDraw() {\n      if (this.isMainPainter())\n         this.getPadPainter().findPainterFor(undefined, undefined, \"ROOT::Experimental::RPaletteDrawable\")?.drawPalette();\n   }\n\n   /** @summary Fill menu entries for palette */\n   fillPaletteMenu(menu) {\n      menu.addPaletteMenu(this.options.Palette || settings.Palette, arg => {\n         // TODO: rewrite for RPalette functionality\n         this.options.Palette = parseInt(arg);\n         this.redraw(); // redraw histogram\n      });\n   }\n\n   /** @summary Toggle 3D drawing mode */\n   toggleMode3D() {\n      this.options.Mode3D = !this.options.Mode3D;\n\n      if (this.options.Mode3D) {\n         if (!this.options.Surf && !this.options.Lego && !this.options.Error) {\n            if ((this.nbinsx>=50) || (this.nbinsy>=50))\n               this.options.Lego = this.options.Color ? 14 : 13;\n            else\n               this.options.Lego = this.options.Color ? 12 : 1;\n\n            this.options.Zero = false; // do not show zeros by default\n         }\n      }\n\n      this.copyOptionsToOthers();\n      this.interactiveRedraw(\"pad\", \"drawopt\");\n   }\n\n   /** @summary Calculate histogram inidicies and axes values for each visible bin */\n   prepareDraw(args) {\n\n      if (!args) args = { rounding: true, extra: 0, middle: 0 };\n\n      if (args.extra === undefined) args.extra = 0;\n      if (args.right_extra === undefined) args.right_extra = args.extra;\n      if (args.middle === undefined) args.middle = 0;\n\n      let histo = this.getHisto(), xaxis = this.getAxis(\"x\"), yaxis = this.getAxis(\"y\"),\n          pmain = this.getFramePainter(),\n          hdim = this.getDimension(),\n          i, j, x, y, binz, binarea,\n          res = {\n             i1: this.getSelectIndex(\"x\", \"left\", 0 - args.extra),\n             i2: this.getSelectIndex(\"x\", \"right\", 1 + args.right_extra),\n             j1: (hdim < 2) ? 0 : this.getSelectIndex(\"y\", \"left\", 0 - args.extra),\n             j2: (hdim < 2) ? 1 : this.getSelectIndex(\"y\", \"right\", 1 + args.right_extra),\n             k1: (hdim < 3) ? 0 : this.getSelectIndex(\"z\", \"left\", 0 - args.extra),\n             k2: (hdim < 3) ? 1 : this.getSelectIndex(\"z\", \"right\", 1 + args.right_extra),\n             stepi: 1, stepj: 1, stepk: 1,\n             min: 0, max: 0, sumz: 0, xbar1: 0, xbar2: 1, ybar1: 0, ybar2: 1\n          };\n\n      if (this.isDisplayItem() && histo.fIndicies) {\n         if (res.i1 < histo.fIndicies[0]) { res.i1 = histo.fIndicies[0]; res.incomplete = true; }\n         if (res.i2 > histo.fIndicies[1]) { res.i2 = histo.fIndicies[1]; res.incomplete = true; }\n         res.stepi = histo.fIndicies[2];\n         if (res.stepi > 1) res.incomplete = true;\n         if ((hdim > 1) && (histo.fIndicies.length > 5)) {\n            if (res.j1 < histo.fIndicies[3]) { res.j1 = histo.fIndicies[3]; res.incomplete = true; }\n            if (res.j2 > histo.fIndicies[4]) { res.j2 = histo.fIndicies[4]; res.incomplete = true; }\n            res.stepj = histo.fIndicies[5];\n            if (res.stepj > 1) res.incomplete = true;\n         }\n         if ((hdim > 2) && (histo.fIndicies.length > 8)) {\n            if (res.k1 < histo.fIndicies[6]) { res.k1 = histo.fIndicies[6]; res.incomplete = true; }\n            if (res.k2 > histo.fIndicies[7]) { res.k2 = histo.fIndicies[7]; res.incomplete = true; }\n            res.stepk = histo.fIndicies[8];\n            if (res.stepk > 1) res.incomplete = true;\n         }\n      }\n\n      if (args.only_indexes) return res;\n\n      // no need for Float32Array, plain Array is 10% faster\n      // reserve more places to avoid complex boundary checks\n\n      res.grx = new Array(res.i2+res.stepi+1);\n      res.gry = new Array(res.j2+res.stepj+1);\n\n      if (args.original) {\n         res.original = true;\n         res.origx = new Array(res.i2+1);\n         res.origy = new Array(res.j2+1);\n      }\n\n      if (args.pixel_density) args.rounding = true;\n\n      let funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y);\n\n       // calculate graphical coordinates in advance\n      for (i = res.i1; i <= res.i2; ++i) {\n         x = xaxis.GetBinCoord(i + args.middle);\n         if (funcs.logx && (x <= 0)) { res.i1 = i+1; continue; }\n         if (res.origx) res.origx[i] = x;\n         res.grx[i] = funcs.grx(x);\n         if (args.rounding) res.grx[i] = Math.round(res.grx[i]);\n\n         if (args.use3d) {\n            if (res.grx[i] < -pmain.size_x3d) { res.i1 = i; res.grx[i] = -pmain.size_x3d; }\n            if (res.grx[i] > pmain.size_x3d) { res.i2 = i; res.grx[i] = pmain.size_x3d; }\n         }\n      }\n\n      if (args.use3d) {\n         if ((res.i1 < res.i2-2) && (res.grx[res.i1] == res.grx[res.i1+1])) res.i1++;\n         if ((res.i1 < res.i2-2) && (res.grx[res.i2-1] == res.grx[res.i2])) res.i2--;\n      }\n\n      // copy last valid value to higher indicies\n      while (i < res.i2 + res.stepi + 1)\n         res.grx[i++] = res.grx[res.i2];\n\n      if (hdim === 1) {\n         res.gry[0] = funcs.gry(0);\n         res.gry[1] = funcs.gry(1);\n      } else\n      for (j = res.j1; j <= res.j2; ++j) {\n         y = yaxis.GetBinCoord(j + args.middle);\n         if (funcs.logy && (y <= 0)) { res.j1 = j+1; continue; }\n         if (res.origy) res.origy[j] = y;\n         res.gry[j] = funcs.gry(y);\n         if (args.rounding) res.gry[j] = Math.round(res.gry[j]);\n\n         if (args.use3d) {\n            if (res.gry[j] < -pmain.size_y3d) { res.j1 = j; res.gry[j] = -pmain.size_y3d; }\n            if (res.gry[j] > pmain.size_y3d) { res.j2 = j; res.gry[j] = pmain.size_y3d; }\n         }\n      }\n\n      if (args.use3d && (hdim > 1)) {\n         if ((res.j1 < res.j2-2) && (res.gry[res.j1] == res.gry[res.j1+1])) res.j1++;\n         if ((res.j1 < res.j2-2) && (res.gry[res.j2-1] == res.gry[res.j2])) res.j2--;\n      }\n\n      // copy last valid value to higher indicies\n      while ((hdim > 1) && (j < res.j2 + res.stepj + 1))\n         res.gry[j++] = res.gry[res.j2];\n\n      //  find min/max values in selected range\n      this.maxbin = this.minbin = this.minposbin = null;\n\n      for (i = res.i1; i < res.i2; i += res.stepi) {\n         for (j = res.j1; j < res.j2; j += res.stepj) {\n            binz = histo.getBinContent(i + 1, j + 1);\n            if (!Number.isFinite(binz)) continue;\n            res.sumz += binz;\n            if (args.pixel_density) {\n               binarea = (res.grx[i+res.stepi]-res.grx[i])*(res.gry[j]-res.gry[j+res.stepj]);\n               if (binarea <= 0) continue;\n               res.max = Math.max(res.max, binz);\n               if ((binz>0) && ((binz<res.min) || (res.min===0))) res.min = binz;\n               binz = binz/binarea;\n            }\n            if (this.maxbin===null) {\n               this.maxbin = this.minbin = binz;\n            } else {\n               this.maxbin = Math.max(this.maxbin, binz);\n               this.minbin = Math.min(this.minbin, binz);\n            }\n            if (binz > 0)\n               if ((this.minposbin===null) || (binz<this.minposbin)) this.minposbin = binz;\n         }\n      }\n\n      res.palette = pmain.getHistPalette();\n\n      if (res.palette)\n         this.createContour(pmain, res.palette, args);\n\n      return res;\n   }\n\n} // class RHistPainter\n\n\nexport { RHistPainter }\n"]}