{"version":3,"file":"680.564edf8a512a4646.js","mappings":"iNAQA,WAAsBA,EAASC,GAC5B,IAAIC,EAAKF,EAAQG,kBAEjB,KAAKD,iBAAIE,UAAWH,EACjB,OAAO,KAEV,GAAIC,EAAGG,SACJ,OAAOH,EAEV,IAAII,EAAON,EAAQO,iBACnB,OAAID,EAE0B,mBAAnBA,EAAKE,WACNF,EAAKE,WAAWP,GAEnB,MAJGQ,qBAAgBT,GAU7B,aAEG,IAAIU,EAAOC,KAAKC,YACZV,EAAKW,EAAaF,KAAMD,GAE5B,KAAKR,GAAqB,iBAAPA,GAAqBA,EAAGY,KAAQZ,EAAGa,KAAQb,EAAGc,KAC9D,OAAOd,EAEV,IAAIe,EAAO,EAAsBC,EAAY,EAAGC,EAAKT,EAAKS,GAE1D,QAASC,EAAI,EAAGA,EAAID,EAAGE,OAAQD,GAAK,EAC5BD,EAAGC,GAAKlB,EAAGoB,YAAgBH,EAAGC,GAAKlB,EAAGqB,YACtCJ,EAAGC,EAAE,GAAKlB,EAAGsB,YAAgBL,EAAGC,EAAE,GAAKlB,EAAGuB,YAC1CN,EAAGC,EAAE,GAAKlB,EAAGwB,YAAgBP,EAAGC,EAAE,GAAKlB,EAAGyB,cAC7CT,EAGAU,wBAAwB,GAAOV,EATV,MAUvBD,EAAOY,KAAKC,MAAMZ,EAVK,KAWnBD,GAAQ,IAAGA,EAAO,IAGzB,IAAIc,EAAOF,KAAKC,MAAMZ,EAAUD,GAC5Be,EAAO,IAAIC,KAAcF,EAAM7B,EAAGgC,MAAOhC,EAAGiC,SAAS,KACrDC,EAAQ,IAAIC,WAAWN,GACvBO,EAAS,EAAGC,EAAO,EAEvB,QAASnB,EAAI,EAAGA,EAAID,EAAGE,OAAQD,GAAK,EAE5BD,EAAGC,GAAKlB,EAAGoB,YAAgBH,EAAGC,GAAKlB,EAAGqB,YACtCJ,EAAGC,EAAE,GAAKlB,EAAGsB,YAAgBL,EAAGC,EAAE,GAAKlB,EAAGuB,YAC1CN,EAAGC,EAAE,GAAKlB,EAAGwB,YAAgBP,EAAGC,EAAE,GAAKlB,EAAGyB,YAE3CV,EAAO,IACRqB,GAAUA,EAAO,GAAKrB,EACT,IAATqB,KAGPF,EAAMG,KAAUnB,EAEhBY,EAAKQ,SAAStC,EAAGY,IAAIK,EAAGC,IAAKlB,EAAGa,IAAII,EAAGC,EAAE,IAAKlB,EAAGc,IAAIG,EAAGC,EAAE,MAG7D,OAAOY,EAAKS,aAAa,CAAEC,MAAO/B,KAAKgC,SAASjC,EAAKkC,cAAeC,MAAOnC,EAAKoC,eAAgBC,KAAKC,IAElGA,EAAKC,UAAmC,IAAtBvC,EAAKkC,aAAsB,SAAW,MACxDI,EAAKE,SAAWxC,EAAKyC,OAAS,SAC9BH,EAAKtC,KAAOA,EACZsC,EAAKhD,QAAUE,EACf8C,EAAKI,OAAS,GAAIpB,EAAKqB,MACvBL,EAAKZ,MAAQA,EAEblC,EAAGG,SAASiD,IAAIN,GAEhBA,EAAKO,QAAU,SAASC,GACrB,IAAKC,OAAOC,UAAUF,EAAUpB,OAC7BuB,eAAQC,MAAO,kDAAiDC,SACzD,KAEV,IAAIC,EAAOjC,KAAKC,MAAM0B,EAAUpB,MAAQzB,KAAKoD,SAC7C,GAAKD,EAAK,GAAOA,GAAQnD,KAAKyB,MAAMf,OAAS,OAAO,KAEpDyC,EAAOnD,KAAKyB,MAAM0B,GAElB,IAAIE,EAAIrD,KAAKX,QACTc,EAAMkD,EAAElD,IAAIH,KAAKD,KAAKS,GAAG2C,IACzB/C,EAAMiD,EAAEjD,IAAIJ,KAAKD,KAAKS,GAAG2C,EAAK,IAC9B9C,EAAMgD,EAAEhD,IAAIL,KAAKD,KAAKS,GAAG2C,EAAK,IAElC,MAAQ,CACLG,GAAInD,EAAMH,KAAKyC,OACfc,GAAIpD,EAAMH,KAAKyC,OACfe,GAAIpD,EAAMJ,KAAKyC,OACfgB,GAAIrD,EAAMJ,KAAKyC,OACfiB,GAAIrD,EAAML,KAAKyC,OACfkB,GAAItD,EAAML,KAAKyC,OACfV,MAAO/B,KAAKsC,UACZsB,MAAO,CAAE5D,KAAKuC,SACL,QAAUY,EAAK,EACf,MAAQE,EAAEQ,WAAW,IAAK7D,KAAKD,KAAKS,GAAG2C,IACvC,MAAQE,EAAEQ,WAAW,IAAK7D,KAAKD,KAAKS,GAAG2C,EAAK,IAC5C,MAAQE,EAAEQ,WAAW,IAAK7D,KAAKD,KAAKS,GAAG2C,EAAK,OAK3D5D,EAAGuE,SAAS,KAEL9D,OAOb,aACG,IAAI+D,EAAO/D,KAAKC,YACZV,EAAKW,EAAaF,KAAM+D,GAE5B,KAAKxE,GAAqB,iBAAPA,GAAqBA,EAAGY,KAAQZ,EAAGa,KAAQb,EAAGc,KAC9D,OAAOd,EAEV,IAAIyE,EAAQ,EAAED,EAAKE,GAAIZ,EAAIU,EAAKvD,GAAIa,EAAO,GAE3C,QAAS6C,EAAI,EAAGA,EAAIF,EAAOE,GAAK,EAC7B7C,EAAK8C,KAAK5E,EAAGY,IAAIkD,EAAEa,EAAE,IAAK3E,EAAGa,IAAIiD,EAAEa,EAAE,IAAK3E,EAAGc,IAAIgD,EAAEa,EAAE,IAC3C3E,EAAGY,IAAIkD,EAAEa,IAAK3E,EAAGa,IAAIiD,EAAEa,EAAE,IAAK3E,EAAGc,IAAIgD,EAAEa,EAAE,KAEtD,IAAIN,GAAQQ,QAAmB/C,GAAMgD,QAAqBrE,KAAM+D,IAEhExE,SAAGG,SAASiD,IAAIiB,IAET","names":["painter","obj","fp","getFramePainter","mode3d","toplevel","geop","getMainPainter","drawExtras","drawDummy3DGeom","poly","this","getObject","before3DDraw","grx","gry","grz","step","numselect","fP","i","length","scale_xmin","scale_xmax","scale_ymin","scale_ymax","scale_zmin","scale_zmax","settings","Math","floor","size","pnts","PointsCreator","webgl","size_x3d","index","Int32Array","select","icnt","addPoint","createPoints","color","getColor","fMarkerColor","style","fMarkerStyle","then","mesh","tip_color","tip_name","fName","scale0","scale","add","tooltip","intersect","Number","isInteger","console","error","REVISION","indx","nvertex","p","x1","x2","y1","y2","z1","z2","lines","axisAsText","render3D","line","limit","fN","n","push","createLineSegments","create3DLineMaterial"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/draw3d.mjs"],"sourcesContent":["import { REVISION } from '../three.mjs';\nimport { settings } from '../core.mjs';\nimport { createLineSegments, PointsCreator, create3DLineMaterial } from '../base/base3d.mjs';\nimport { drawDummy3DGeom } from '../geom/TGeoPainter.mjs';\n\n\n/** @summary Prepare frame painter for 3D drawing\n  * @private */\nfunction before3DDraw(painter, obj) {\n   let fp = painter.getFramePainter();\n\n   if (!fp?.mode3d || !obj)\n      return null;\n\n   if (fp.toplevel)\n      return fp;\n\n   let geop = painter.getMainPainter();\n   if(!geop)\n      return drawDummy3DGeom(painter);\n   if (typeof geop.drawExtras == 'function')\n      return geop.drawExtras(obj);\n\n   return null;\n}\n\n\n/** @summary direct draw function for TPolyMarker3D object\n  * @private */\nfunction drawPolyMarker3D() {\n\n   let poly = this.getObject(),\n       fp = before3DDraw(this, poly);\n\n   if (!fp || (typeof fp !== 'object') || !fp.grx || !fp.gry || !fp.grz)\n      return fp;\n\n   let step = 1, sizelimit = 50000, numselect = 0, fP = poly.fP;\n\n   for (let i = 0; i < fP.length; i += 3) {\n      if ((fP[i] < fp.scale_xmin) || (fP[i] > fp.scale_xmax) ||\n          (fP[i+1] < fp.scale_ymin) || (fP[i+1] > fp.scale_ymax) ||\n          (fP[i+2] < fp.scale_zmin) || (fP[i+2] > fp.scale_zmax)) continue;\n      ++numselect;\n   }\n\n   if ((settings.OptimizeDraw > 0) && (numselect > sizelimit)) {\n      step = Math.floor(numselect/sizelimit);\n      if (step <= 2) step = 2;\n   }\n\n   let size = Math.floor(numselect/step),\n       pnts = new PointsCreator(size, fp.webgl, fp.size_x3d/100),\n       index = new Int32Array(size),\n       select = 0, icnt = 0;\n\n   for (let i = 0; i < fP.length; i += 3) {\n\n      if ((fP[i] < fp.scale_xmin) || (fP[i] > fp.scale_xmax) ||\n          (fP[i+1] < fp.scale_ymin) || (fP[i+1] > fp.scale_ymax) ||\n          (fP[i+2] < fp.scale_zmin) || (fP[i+2] > fp.scale_zmax)) continue;\n\n      if (step > 1) {\n         select = (select+1) % step;\n         if (select!==0) continue;\n      }\n\n      index[icnt++] = i;\n\n      pnts.addPoint(fp.grx(fP[i]), fp.gry(fP[i+1]), fp.grz(fP[i+2]));\n   }\n\n   return pnts.createPoints({ color: this.getColor(poly.fMarkerColor), style: poly.fMarkerStyle }).then(mesh => {\n\n      mesh.tip_color = (poly.fMarkerColor === 3) ? 0xFF0000 : 0x00FF00;\n      mesh.tip_name = poly.fName || \"Poly3D\";\n      mesh.poly = poly;\n      mesh.painter = fp;\n      mesh.scale0 = 0.7*pnts.scale;\n      mesh.index = index;\n\n      fp.toplevel.add(mesh);\n\n      mesh.tooltip = function(intersect) {\n         if (!Number.isInteger(intersect.index)) {\n            console.error(`intersect.index not provided, three.js version ${REVISION}`);\n            return null;\n         }\n         let indx = Math.floor(intersect.index / this.nvertex);\n         if ((indx<0) || (indx >= this.index.length)) return null;\n\n         indx = this.index[indx];\n\n         let p = this.painter,\n             grx = p.grx(this.poly.fP[indx]),\n             gry = p.gry(this.poly.fP[indx+1]),\n             grz = p.grz(this.poly.fP[indx+2]);\n\n         return  {\n            x1: grx - this.scale0,\n            x2: grx + this.scale0,\n            y1: gry - this.scale0,\n            y2: gry + this.scale0,\n            z1: grz - this.scale0,\n            z2: grz + this.scale0,\n            color: this.tip_color,\n            lines: [ this.tip_name,\n                     \"pnt: \" + indx/3,\n                     \"x: \" + p.axisAsText(\"x\", this.poly.fP[indx]),\n                     \"y: \" + p.axisAsText(\"y\", this.poly.fP[indx+1]),\n                     \"z: \" + p.axisAsText(\"z\", this.poly.fP[indx+2])\n                   ]\n         };\n      };\n\n      fp.render3D(100); // set timeout to be able draw other points\n\n      return this;\n   });\n}\n\n/** @summary Direct draw function for TPolyLine3D object\n  * @desc Takes into account dashed properties\n  * @private */\nfunction drawPolyLine3D() {\n   let line = this.getObject(),\n       fp = before3DDraw(this, line);\n\n   if (!fp || (typeof fp !== 'object') || !fp.grx || !fp.gry || !fp.grz)\n      return fp;\n\n   let limit = 3*line.fN, p = line.fP, pnts = [];\n\n   for (let n = 3; n < limit; n += 3)\n      pnts.push(fp.grx(p[n-3]), fp.gry(p[n-2]), fp.grz(p[n-1]),\n                fp.grx(p[n]), fp.gry(p[n+1]), fp.grz(p[n+2]));\n\n   let lines = createLineSegments(pnts, create3DLineMaterial(this, line));\n\n   fp.toplevel.add(lines);\n\n   return true;\n}\n\nexport { drawPolyMarker3D, drawPolyLine3D };\n\n"]}