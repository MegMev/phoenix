{"version":3,"file":"665.6fdc036608f6e102.js","mappings":"wMAQA,gBAA4BA,KAGzBC,OAAOC,EAAOC,EAAIC,GACf,IAAIC,EAAKC,KAAKC,MAAQC,KAAKC,IAAIP,GAAQQ,EAAKJ,KAAKC,MAAQC,KAAKG,IAAIT,GAAQU,EAAM,GAChF,YAAYC,IAAPV,QAA6BU,IAAPT,EACxBQ,EAAQ,IAAGJ,KAAKM,MAAMX,EAAGE,MAAOG,KAAKM,MAAMV,EAAGM,MAE9CL,GAAMA,EAAIK,GAAMA,GAEnBE,GAAQ,IAAGJ,KAAKM,MAAMT,MAAOG,KAAKM,MAAMJ,KACpCP,QAAcU,IAAPT,IAAmBQ,GAAO,KAC9BA,EAIVG,aACG,IAAIb,EAAQM,KAAKQ,MAAMV,KAAKW,GAAKX,KAAKY,GAAIZ,KAAKa,GAAKb,KAAKc,IACrDC,EAAOf,KAAKC,MAAQC,KAAKC,IAAIH,KAAKgB,QAClCjB,EAAKgB,EAAKb,KAAKC,IAAIP,GAAQQ,EAAKW,EAAKb,KAAKG,IAAIT,GAC9CqB,EAAO,GAEX,OAAIjB,KAAKkB,MACND,GAAQjB,KAAKL,OAAOC,EAAQM,KAAKiB,GAAKnB,KAAKgB,OAAQhB,KAAKc,GAAId,KAAKY,IACzDZ,KAAKL,OAAOC,EAAQM,KAAKiB,GAAKnB,KAAKgB,OAAQhB,KAAKkB,IAAM,KAE7DlB,KAAKoB,IAAM,IAAM,IAClBH,GAAQjB,KAAKL,OAAOC,EAAQM,KAAKiB,GAAKnB,KAAKgB,QAAShB,KAAKc,GAAGd,KAAKa,GAAGd,GAAI,GAAIC,KAAKY,GAAGZ,KAAKW,GAAGP,GAAI,GACxFJ,KAAKL,OAAOC,EAAQM,KAAKiB,GAAKnB,KAAKgB,OAAQhB,KAAKoB,IAAM,KAE7DpB,KAAKoB,IAAM,IAAM,IAClBH,GAAQjB,KAAKL,OAAOC,EAAQI,KAAKgB,QAAShB,KAAKc,GAAGd,KAAKa,GAAGd,GAAI,GAAIC,KAAKY,GAAGZ,KAAKW,GAAGP,GAAI,GAC9EJ,KAAKL,OAAOC,EAAQI,KAAKgB,OAAQhB,KAAKoB,IAAM,KAEnDpB,KAAKqB,MACNJ,GAAQjB,KAAKL,OAAOC,EAAQI,KAAKgB,OAAQhB,KAAKa,GAAIb,KAAKW,IAC/CX,KAAKL,OAAOC,EAAQI,KAAKgB,OAAQhB,KAAKqB,IAAM,KAE/C,IAAGnB,KAAKM,MAAMR,KAAKc,IAAMd,KAAKkB,IAAM,GAAKnB,EAAK,OAAOG,KAAKM,MAAMR,KAAKY,IAAMZ,KAAKkB,IAAM,GAAKd,EAAK,OAC7FF,KAAKM,MAAMR,KAAKa,IAAMb,KAAKqB,IAAM,GAAKtB,EAAK,OAAOG,KAAKM,MAAMR,KAAKW,IAAMX,KAAKqB,IAAM,GAAKjB,EAAK,MAChGa,EAIXK,UAAUC,EAAEC,GACT,IAAIC,EAAWvB,KAAKwB,KAAMC,OAAKb,GAAGd,KAAKa,GAAK,GAAKc,OAAKf,GAAGZ,KAAKW,GAAK,IAC/DiB,EAAM1B,KAAKwB,KAAMH,IAAEvB,KAAKc,GAAK,GAAKU,IAAExB,KAAKY,GAAK,IAAGa,EACjDI,EAAM3B,KAAKwB,KAAMH,IAAEvB,KAAKa,GAAK,GAAKW,IAAExB,KAAKW,GAAK,IAAGc,EAElDzB,KAAK8B,KADJF,EAAM,GACK,EACVG,EAAU,IACA,EAEA,EAIlBC,SAASjC,EAAGK,GACQ,GAAbJ,KAAK8B,OAAa9B,KAAKc,IAAMf,EAAIC,KAAKY,IAAMR,IAC/B,GAAbJ,KAAK8B,OAAc9B,KAAKa,IAAMd,EAAIC,KAAKW,IAAMP,GACjDJ,KAAKiC,OAAOC,OAAO,QAAQC,KAAK,IAAKnC,KAAKS,cAI7C2B,QAAQC,GACL,GAAIA,EAAa,OACjB,IAAIC,EAAQtC,KAAKuC,YAAaC,EAAO,GACrCF,EAAMG,IAAMzC,KAAK0C,UAAU,IAAK1C,KAAKc,GAAId,KAAK2C,OAC9CL,EAAMM,IAAM5C,KAAK0C,UAAU,IAAK1C,KAAKa,GAAIb,KAAK2C,OAC9CL,EAAMO,IAAM7C,KAAK0C,UAAU,IAAK1C,KAAKY,GAAIZ,KAAK2C,OAC9CL,EAAMQ,IAAM9C,KAAK0C,UAAU,IAAK1C,KAAKW,GAAIX,KAAK2C,OAC7B,GAAb3C,KAAK8B,OAAWU,GAAS,SAAQF,EAAMG,eAAeH,EAAMO,WAC/C,GAAb7C,KAAK8B,OAAYU,GAAS,SAAQF,EAAMM,eAAeN,EAAMQ,UACjE9C,KAAK+C,eAAeP,EAAO,cAI9BQ,SACG,IAAIV,EAAQtC,KAAKuC,YAAaU,GAAWC,SAAI,IACzCC,EAAKb,EAAMc,QAASC,EAAOrD,KAAKsD,gBAAgBC,aAEpDvD,KAAKC,MAAQC,KAAKsD,IAAI,EAAGtD,KAAKM,MAAMN,KAAKsD,IAAIH,EAAKI,MAAOJ,EAAKK,QAAUpB,EAAMqB,WAAW,KACzF3D,KAAK2C,MAAQL,EAAMsB,QAAQX,GAC3BjD,KAAKgB,OAASsB,EAAMuB,OAAO,EAAE,IAAM3D,KAAKiB,GACxCnB,KAAKkB,IAAMlB,KAAKoB,IAAMpB,KAAKqB,IAAM,EAEZ,GAAjB8B,EAAGW,QAAQ,OACZ9D,KAAKkB,IAA2B,GAApBiC,EAAGW,QAAQ,MAAc,GAAK,GAC7CC,EAAOD,QAAQ,QAAQ,EACpB9D,KAAKoB,IAAM,EACT2C,EAAOD,QAAQ,SAAS,EAC1B9D,KAAKoB,IAAM,GACT2C,EAAOD,QAAQ,QAAQ,EACzB9D,KAAKoB,IAAM,EACL+B,EAAGW,QAAQ,SAAS,IAC1B9D,KAAKoB,IAAM,IAEd,IAAI4C,EAAKb,EAAGc,YAAY,KAAMC,EAAKf,EAAGc,YAAY,MAAOE,EAAMhB,EAAGiB,OAC7DJ,GAAM,GAAOA,GAAMG,EAAI,IACzBnE,KAAKqB,IAAQ6C,GAAM,GAAOA,GAAMC,EAAI,EAAM,GAAK,GAElDnE,KAAKqE,cAAc,CAAElC,KAAMG,IAE3BtC,KAAKsE,UAELtE,KAAKc,GAAKd,KAAKuE,UAAU,IAAKjC,EAAMG,IAAKzC,KAAK2C,OAAO,GACrD3C,KAAKY,GAAKZ,KAAKuE,UAAU,IAAKjC,EAAMO,IAAK7C,KAAK2C,OAAO,GACrD3C,KAAKa,GAAKb,KAAKuE,UAAU,IAAKjC,EAAMM,IAAK5C,KAAK2C,OAAO,GACrD3C,KAAKW,GAAKX,KAAKuE,UAAU,IAAKjC,EAAMQ,IAAK9C,KAAK2C,OAAO,GAErD,IAAI6B,EAAOxE,KAAKiC,OAAOwC,OAAO,YACdtC,KAAK,IAAKnC,KAAKS,cACfiE,KAAK1E,KAAK2E,QAAQC,MAElC,OAAK5E,KAAKkB,IAAM,IAAQlB,KAAKqB,IAAM,IAChCrB,KAAK6E,cAAc,CAAE1C,KAAMG,IAC3BkC,EAAKE,KAAK1E,KAAK8E,QAAQF,OAEvBJ,EAAKO,MAAM,OAAO,SAGjBC,qBACFC,OAAejF,MAEVA,iBAIEkF,EAAKC,EAAKC,GACnB,IAAIC,EAAU,IAAIC,EAAcJ,EAAKC,EAAIC,GACzC,OAAOG,mBAAcF,GAAS,GAAOG,KAAK,IAAMH,EAAQrC","names":["ObjectPainter","rotate","angle","x0","y0","dx","this","wsize","Math","cos","dy","sin","res","undefined","round","createPath","atan2","y2","y1","x2","x1","dlen","angle2","path","beg","PI","mid","end","moveStart","x","y","fullsize","sqrt","n","sz1","sz2","side","e","moveDrag","draw_g","select","attr","moveEnd","not_changed","arrow","getObject","exec","fX1","svgToAxis","isndc","fX2","fY1","fY2","submitCanvExec","redraw","kLineNDC","BIT","oo","fOption","rect","getPadPainter","getPadRect","max","width","height","fArrowSize","TestBit","fAngle","indexOf","i","p1","lastIndexOf","p2","len","length","createAttLine","createG","axisToSvg","elem","append","call","lineatt","func","createAttFill","fillatt","style","isBatchMode","addMoveHandler","dom","obj","opt","painter","TArrowPainter","ensureTCanvas","then"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TArrowPainter.mjs"],"sourcesContent":["import { BIT, isBatchMode } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\n\n\n/** @summary Drawing TArrow\n  * @private */\nclass TArrowPainter extends ObjectPainter {\n\n   /** @summary Create line segment with rotation */\n   rotate(angle, x0, y0) {\n      let dx = this.wsize * Math.cos(angle), dy = this.wsize * Math.sin(angle), res = \"\";\n      if ((x0 !== undefined) && (y0 !== undefined)) {\n         res =  `M${Math.round(x0-dx)},${Math.round(y0-dy)}`;\n      } else {\n         dx = -dx; dy = -dy;\n      }\n      res += `l${Math.round(dx)},${Math.round(dy)}`;\n      if (x0 && (y0 === undefined)) res += \"z\";\n      return res;\n   }\n\n   /** @summary Create SVG path for the arrow */\n   createPath() {\n      let angle = Math.atan2(this.y2 - this.y1, this.x2 - this.x1),\n          dlen = this.wsize * Math.cos(this.angle2),\n          dx = dlen*Math.cos(angle), dy = dlen*Math.sin(angle),\n          path = \"\";\n\n      if (this.beg)\n         path += this.rotate(angle - Math.PI - this.angle2, this.x1, this.y1) +\n                 this.rotate(angle - Math.PI + this.angle2, this.beg > 10);\n\n      if (this.mid % 10 == 2)\n         path += this.rotate(angle - Math.PI - this.angle2, (this.x1+this.x2-dx)/2, (this.y1+this.y2-dy)/2) +\n                 this.rotate(angle - Math.PI + this.angle2, this.mid > 10);\n\n      if (this.mid % 10 == 1)\n         path += this.rotate(angle - this.angle2, (this.x1+this.x2+dx)/2, (this.y1+this.y2+dy)/2) +\n                 this.rotate(angle + this.angle2, this.mid > 10);\n\n      if (this.end)\n         path += this.rotate(angle - this.angle2, this.x2, this.y2) +\n                 this.rotate(angle + this.angle2, this.end > 10);\n\n      return `M${Math.round(this.x1 + (this.beg > 10 ? dx : 0))},${Math.round(this.y1 + (this.beg > 10 ? dy : 0))}` +\n             `L${Math.round(this.x2 - (this.end > 10 ? dx : 0))},${Math.round(this.y2 - (this.end > 10 ? dy : 0))}` +\n              path;\n   }\n\n   /** @summary Start interactive moving */\n   moveStart(x,y) {\n      let fullsize = Math.sqrt((this.x1-this.x2)**2 + (this.y1-this.y2)**2),\n          sz1 = Math.sqrt((x-this.x1)**2 + (y-this.y1)**2)/fullsize,\n          sz2 = Math.sqrt((x-this.x2)**2 + (y-this.y2)**2)/fullsize;\n      if (sz1 > 0.9)\n         this.side = 1;\n      else if (sz2 > 0.9)\n         this.side = -1;\n      else\n         this.side = 0;\n   }\n\n   /** @summary Continue interactive moving */\n   moveDrag(dx,dy) {\n      if (this.side != 1) { this.x1 += dx; this.y1 += dy; }\n      if (this.side != -1) { this.x2 += dx; this.y2 += dy; }\n      this.draw_g.select('path').attr(\"d\", this.createPath());\n   }\n\n   /** @summary Finish interactive moving */\n   moveEnd(not_changed) {\n      if (not_changed) return;\n      let arrow = this.getObject(), exec = \"\";\n      arrow.fX1 = this.svgToAxis(\"x\", this.x1, this.isndc);\n      arrow.fX2 = this.svgToAxis(\"x\", this.x2, this.isndc);\n      arrow.fY1 = this.svgToAxis(\"y\", this.y1, this.isndc);\n      arrow.fY2 = this.svgToAxis(\"y\", this.y2, this.isndc);\n      if (this.side != 1) exec += `SetX1(${arrow.fX1});;SetY1(${arrow.fY1});;`;\n      if (this.side != -1) exec += `SetX2(${arrow.fX2});;SetY2(${arrow.fY2});;`;\n      this.submitCanvExec(exec + \"Notify();;\");\n   }\n\n   /** @summary Redraw arrow */\n   redraw() {\n      let arrow = this.getObject(), kLineNDC = BIT(14),\n          oo = arrow.fOption, rect = this.getPadPainter().getPadRect();\n\n      this.wsize = Math.max(3, Math.round(Math.max(rect.width, rect.height) * arrow.fArrowSize*0.8));\n      this.isndc = arrow.TestBit(kLineNDC);\n      this.angle2 = arrow.fAngle/2/180 * Math.PI;\n      this.beg = this.mid = this.end = 0;\n\n      if (oo.indexOf(\"<\")==0)\n         this.beg = (oo.indexOf(\"<|\") == 0) ? 12 : 2;\n      if (oo.indexOf(\"->-\")>=0)\n         this.mid = 1;\n      else if (oo.indexOf(\"-|>-\")>=0)\n         this.mid = 11;\n      else if (oo.indexOf(\"-<-\")>=0)\n         this.mid = 2;\n      else if (oo.indexOf(\"-<|-\")>=0)\n         this.mid = 12;\n\n      let p1 = oo.lastIndexOf(\">\"), p2 = oo.lastIndexOf(\"|>\"), len = oo.length;\n      if ((p1 >= 0) && (p1 == len-1))\n         this.end = ((p2 >= 0) && (p2 == len-2)) ? 11 : 1;\n\n      this.createAttLine({ attr: arrow });\n\n      this.createG();\n\n      this.x1 = this.axisToSvg(\"x\", arrow.fX1, this.isndc, true);\n      this.y1 = this.axisToSvg(\"y\", arrow.fY1, this.isndc, true);\n      this.x2 = this.axisToSvg(\"x\", arrow.fX2, this.isndc, true);\n      this.y2 = this.axisToSvg(\"y\", arrow.fY2, this.isndc, true);\n\n      let elem = this.draw_g.append(\"svg:path\")\n                     .attr(\"d\", this.createPath())\n                     .call(this.lineatt.func);\n\n      if ((this.beg > 10) || (this.end > 10)) {\n         this.createAttFill({ attr: arrow });\n         elem.call(this.fillatt.func);\n      } else {\n         elem.style('fill','none');\n      }\n\n     if (!isBatchMode())\n        addMoveHandler(this);\n\n      return this;\n   }\n\n   /** @summary Draw TArrow object */\n   static draw(dom, obj, opt) {\n      let painter = new TArrowPainter(dom, obj,opt);\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TArrowPainter\n\nexport { TArrowPainter };\n"]}