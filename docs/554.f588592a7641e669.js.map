{"version":3,"file":"554.f588592a7641e669.js","mappings":"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","names":["ObjectPainter","decodeOptions","opt","gr","d","DrawOptions","this","options","res","Color","check","Line","Error","matchObjectType","Circles","Markers","fMarkerSize","fMarkerStyle","storeDrawOpt","createHistogram","getObject","asymm","xmin","fX","xmax","ymin","fY","ymax","zmin","fZ","zmax","p","fNpoints","x","y","z","Math","min","fEXlow","fEX","max","fEXhigh","fEYlow","fEY","fEYhigh","fEZlow","fEZ","fEZhigh","dx","dy","dz","uxmin","uxmax","uymin","uymax","uzmin","uzmax","graph","fMinimum","fMaximum","histo","fName","fTitle","fXaxis","fXmin","fXmax","fYaxis","fZaxis","kNoStats","BIT","fBits","graph2DTooltip","intersect","Number","isInteger","index","console","error","REVISION","indx","floor","nvertex","length","sqr","v","painter","grx","gry","grz","check_next","point","grx1","gry1","grz1","x1","scale0","x2","y1","y2","z1","z2","color","tip_color","lines","tip_name","axisAsText","redraw","main","getMainPainter","fp","getFramePainter","step","mode3d","Promise","resolve","countSelected","cnt","i","scale_xmin","scale_xmax","scale_ymin","scale_ymax","settings","webgl","numselected","scale_zmin","scale_zmax","sizelimit","markeratt","TAttMarkerHandler","palette","levels","scale","size_x3d","getFullSize","promises","usesvg","getContourLevels","getHistPalette","lvl","lvl_zmin","lvl_zmax","size","pnts","select","Int32Array","icnt","err","line","ierr","iline","PointsCreator","Float32Array","addPoint","lcolor","getColor","fLineColor","material","LineBasicMaterial","linewidth","fLineWidth","linemesh","createLineSegments","toplevel","add","getObjectHint","fMarkerColor","tooltip","errmesh","fcolor","calcColor","pr","createPoints","style","then","mesh","push","all","render3D","dom","TGraph2DPainter","promise","fHistogram","TH2Painter","ownhisto","addToPadPrimitives"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/TGraph2DPainter.mjs"],"sourcesContent":["import { BIT, settings, createHistogram } from '../core.mjs';\nimport { REVISION, Color, LineBasicMaterial } from '../three.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TAttMarkerHandler } from '../base/TAttMarkerHandler.mjs';\nimport { TH2Painter } from './TH2Painter.mjs';\nimport { createLineSegments, PointsCreator } from '../base/base3d.mjs';\n\n/**\n * @summary Painter for TGraph2D classes\n * @private\n */\n\nclass TGraph2DPainter extends ObjectPainter {\n\n   /** @summary Decode options string  */\n   decodeOptions(opt, gr) {\n      let d = new DrawOptions(opt);\n\n      if (!this.options)\n         this.options = {};\n\n      let res = this.options;\n\n      res.Color = d.check(\"COL\");\n      res.Line = d.check(\"LINE\");\n      res.Error = d.check(\"ERR\") && (this.matchObjectType(\"TGraph2DErrors\") || this.matchObjectType(\"TGraph2DAsymmErrors\"));\n      res.Circles = d.check(\"P0\");\n      res.Markers = d.check(\"P\");\n\n      if (!res.Markers && !res.Error && !res.Circles && !res.Line) {\n         if ((gr.fMarkerSize == 1) && (gr.fMarkerStyle == 1))\n            res.Circles = true;\n         else\n            res.Markers = true;\n      }\n      if (!res.Markers) res.Color = false;\n\n      this.storeDrawOpt(opt);\n   }\n\n   /** @summary Create histogram for axes drawing */\n   createHistogram() {\n      let gr = this.getObject(),\n          asymm = this.matchObjectType(\"TGraph2DAsymmErrors\"),\n          xmin = gr.fX[0], xmax = xmin,\n          ymin = gr.fY[0], ymax = ymin,\n          zmin = gr.fZ[0], zmax = zmin;\n\n      for (let p = 0; p < gr.fNpoints;++p) {\n\n         let x = gr.fX[p], y = gr.fY[p], z = gr.fZ[p];\n\n         if (this.options.Error) {\n            xmin = Math.min(xmin, x - (asymm ? gr.fEXlow[p] : gr.fEX[p]));\n            xmax = Math.max(xmax, x + (asymm ? gr.fEXhigh[p] : gr.fEX[p]));\n            ymin = Math.min(ymin, y - (asymm ? gr.fEYlow[p] : gr.fEY[p]));\n            ymax = Math.max(ymax, y + (asymm ? gr.fEYhigh[p] : gr.fEY[p]));\n            zmin = Math.min(zmin, z - (asymm ? gr.fEZlow[p] : gr.fEZ[p]));\n            zmax = Math.max(zmax, z + (asymm ? gr.fEZhigh[p] : gr.fEZ[p]));\n         } else {\n            xmin = Math.min(xmin, x);\n            xmax = Math.max(xmax, x);\n            ymin = Math.min(ymin, y);\n            ymax = Math.max(ymax, y);\n            zmin = Math.min(zmin, z);\n            zmax = Math.max(zmax, z);\n         }\n      }\n\n      if (xmin >= xmax) xmax = xmin+1;\n      if (ymin >= ymax) ymax = ymin+1;\n      if (zmin >= zmax) zmax = zmin+1;\n      let dx = (xmax-xmin)*0.02, dy = (ymax-ymin)*0.02, dz = (zmax-zmin)*0.02,\n          uxmin = xmin - dx, uxmax = xmax + dx,\n          uymin = ymin - dy, uymax = ymax + dy,\n          uzmin = zmin - dz, uzmax = zmax + dz;\n\n      if ((uxmin<0) && (xmin>=0)) uxmin = xmin*0.98;\n      if ((uxmax>0) && (xmax<=0)) uxmax = 0;\n\n      if ((uymin<0) && (ymin>=0)) uymin = ymin*0.98;\n      if ((uymax>0) && (ymax<=0)) uymax = 0;\n\n      if ((uzmin<0) && (zmin>=0)) uzmin = zmin*0.98;\n      if ((uzmax>0) && (zmax<=0)) uzmax = 0;\n\n      let graph = this.getObject();\n\n      if (graph.fMinimum != -1111) uzmin = graph.fMinimum;\n      if (graph.fMaximum != -1111) uzmax = graph.fMaximum;\n\n      let histo = createHistogram(\"TH2I\", 10, 10);\n      histo.fName = graph.fName + \"_h\";\n      histo.fTitle = graph.fTitle;\n      histo.fXaxis.fXmin = uxmin;\n      histo.fXaxis.fXmax = uxmax;\n      histo.fYaxis.fXmin = uymin;\n      histo.fYaxis.fXmax = uymax;\n      histo.fZaxis.fXmin = uzmin;\n      histo.fZaxis.fXmax = uzmax;\n      histo.fMinimum = uzmin;\n      histo.fMaximum = uzmax;\n      let kNoStats = BIT(9);\n      histo.fBits = histo.fBits | kNoStats;\n      return histo;\n   }\n\n   /** @summary Function handles tooltips in the mesh */\n   graph2DTooltip(intersect) {\n      if (!Number.isInteger(intersect.index)) {\n         console.error(`intersect.index not provided, three.js version ${REVISION}`);\n         return null;\n      }\n\n      let indx = Math.floor(intersect.index / this.nvertex);\n      if ((indx<0) || (indx >= this.index.length)) return null;\n      let sqr = v => v*v;\n\n      indx = this.index[indx];\n\n      let p = this.painter, gr = this.graph,\n          grx = p.grx(gr.fX[indx]),\n          gry = p.gry(gr.fY[indx]),\n          grz = p.grz(gr.fZ[indx]);\n\n      if (this.check_next && indx+1<gr.fX.length) {\n         let d = intersect.point,\n             grx1 = p.grx(gr.fX[indx+1]),\n             gry1 = p.gry(gr.fY[indx+1]),\n             grz1 = p.grz(gr.fZ[indx+1]);\n         if (sqr(d.x-grx1)+sqr(d.y-gry1)+sqr(d.z-grz1) < sqr(d.x-grx)+sqr(d.y-gry)+sqr(d.z-grz)) {\n            grx = grx1; gry = gry1; grz = grz1; indx++;\n         }\n      }\n\n      return {\n         x1: grx - this.scale0,\n         x2: grx + this.scale0,\n         y1: gry - this.scale0,\n         y2: gry + this.scale0,\n         z1: grz - this.scale0,\n         z2: grz + this.scale0,\n         color: this.tip_color,\n         lines: [ this.tip_name,\n                  \"pnt: \" + indx,\n                  \"x: \" + p.axisAsText(\"x\", gr.fX[indx]),\n                  \"y: \" + p.axisAsText(\"y\", gr.fY[indx]),\n                  \"z: \" + p.axisAsText(\"z\", gr.fZ[indx])\n                ]\n      };\n   }\n\n   /** @summary Actual drawing of TGraph2D object\n     * @returns {Promise} for drawing ready */\n   redraw() {\n\n      let main = this.getMainPainter(),\n          fp = this.getFramePainter(),\n          graph = this.getObject(),\n          step = 1;\n\n      if (!graph || !main || !fp || !fp.mode3d)\n         return Promise.resolve(this);\n\n      let countSelected = (zmin, zmax) => {\n         let cnt = 0;\n         for (let i = 0; i < graph.fNpoints; ++i) {\n            if ((graph.fX[i] < fp.scale_xmin) || (graph.fX[i] > fp.scale_xmax) ||\n                (graph.fY[i] < fp.scale_ymin) || (graph.fY[i] > fp.scale_ymax) ||\n                (graph.fZ[i] < zmin) || (graph.fZ[i] >= zmax)) continue;\n\n            ++cnt;\n         }\n         return cnt;\n      };\n\n      // try to define scale-down factor\n      if ((settings.OptimizeDraw > 0) && !fp.webgl) {\n         let numselected = countSelected(fp.scale_zmin, fp.scale_zmax),\n             sizelimit = 50000;\n\n         if (numselected > sizelimit) {\n            step = Math.floor(numselected / sizelimit);\n            if (step <= 2) step = 2;\n         }\n      }\n\n      let markeratt = new TAttMarkerHandler(graph),\n          palette = null,\n          levels = [fp.scale_zmin, fp.scale_zmax],\n          scale = fp.size_x3d / 100 * markeratt.getFullSize(),\n          promises = [];\n\n      if (this.options.Circles) scale = 0.06*fp.size_x3d;\n\n      if (fp.usesvg) scale *= 0.3;\n\n      if (this.options.Color) {\n         levels = main.getContourLevels();\n         palette = main.getHistPalette();\n      }\n\n      for (let lvl = 0; lvl < levels.length-1; ++lvl) {\n\n         let lvl_zmin = Math.max(levels[lvl], fp.scale_zmin),\n             lvl_zmax = Math.min(levels[lvl+1], fp.scale_zmax);\n\n         if (lvl_zmin >= lvl_zmax) continue;\n\n         let size = Math.floor(countSelected(lvl_zmin, lvl_zmax) / step),\n             pnts = null, select = 0,\n             index = new Int32Array(size), icnt = 0,\n             err = null, asymm = false, line = null, ierr = 0, iline = 0;\n\n         if (this.options.Markers || this.options.Circles)\n            pnts = new PointsCreator(size, fp.webgl, scale/3);\n\n         if (this.options.Error) {\n            err = new Float32Array(size*6*3);\n            asymm = this.matchObjectType(\"TGraph2DAsymmErrors\");\n          }\n\n         if (this.options.Line)\n            line = new Float32Array((size-1)*6);\n\n         for (let i = 0; i < graph.fNpoints; ++i) {\n            if ((graph.fX[i] < fp.scale_xmin) || (graph.fX[i] > fp.scale_xmax) ||\n                (graph.fY[i] < fp.scale_ymin) || (graph.fY[i] > fp.scale_ymax) ||\n                (graph.fZ[i] < lvl_zmin) || (graph.fZ[i] >= lvl_zmax)) continue;\n\n            if (step > 1) {\n               select = (select+1) % step;\n               if (select!==0) continue;\n            }\n\n            index[icnt++] = i; // remember point index for tooltip\n\n            let x = fp.grx(graph.fX[i]),\n                y = fp.gry(graph.fY[i]),\n                z = fp.grz(graph.fZ[i]);\n\n            if (pnts) pnts.addPoint(x,y,z);\n\n            if (err) {\n               err[ierr]   = fp.grx(graph.fX[i] - (asymm ? graph.fEXlow[i] : graph.fEX[i]));\n               err[ierr+1] = y;\n               err[ierr+2] = z;\n               err[ierr+3] = fp.grx(graph.fX[i] + (asymm ? graph.fEXhigh[i] : graph.fEX[i]));\n               err[ierr+4] = y;\n               err[ierr+5] = z;\n               ierr+=6;\n               err[ierr]   = x;\n               err[ierr+1] = fp.gry(graph.fY[i] - (asymm ? graph.fEYlow[i] : graph.fEY[i]));\n               err[ierr+2] = z;\n               err[ierr+3] = x;\n               err[ierr+4] = fp.gry(graph.fY[i] + (asymm ? graph.fEYhigh[i] : graph.fEY[i]));\n               err[ierr+5] = z;\n               ierr+=6;\n               err[ierr]   = x;\n               err[ierr+1] = y;\n               err[ierr+2] = fp.grz(graph.fZ[i] - (asymm ? graph.fEZlow[i] : graph.fEZ[i]));\n               err[ierr+3] = x;\n               err[ierr+4] = y;\n               err[ierr+5] = fp.grz(graph.fZ[i] + (asymm ? graph.fEZhigh[i] : graph.fEZ[i]));\n               ierr+=6;\n            }\n\n            if (line) {\n               if (iline>=6) {\n                  line[iline] = line[iline-3];\n                  line[iline+1] = line[iline-2];\n                  line[iline+2] = line[iline-1];\n                  iline+=3;\n               }\n               line[iline] = x;\n               line[iline+1] = y;\n               line[iline+2] = z;\n               iline+=3;\n            }\n         }\n\n         if (line && (iline > 3) && (line.length == iline)) {\n            let lcolor = this.getColor(graph.fLineColor),\n                material = new LineBasicMaterial({ color: new Color(lcolor), linewidth: graph.fLineWidth }),\n                linemesh = createLineSegments(line, material);\n            fp.toplevel.add(linemesh);\n\n            linemesh.graph = graph;\n            linemesh.index = index;\n            linemesh.painter = fp;\n            linemesh.scale0 = 0.7*scale;\n            linemesh.tip_name = this.getObjectHint();\n            linemesh.tip_color = (graph.fMarkerColor === 3) ? 0xFF0000 : 0x00FF00;\n            linemesh.nvertex = 2;\n            linemesh.check_next = true;\n\n            linemesh.tooltip = this.graph2DTooltip;\n         }\n\n         if (err) {\n            let lcolor = this.getColor(graph.fLineColor),\n                material = new LineBasicMaterial({ color: new Color(lcolor), linewidth: graph.fLineWidth }),\n                errmesh = createLineSegments(err, material);\n            fp.toplevel.add(errmesh);\n\n            errmesh.graph = graph;\n            errmesh.index = index;\n            errmesh.painter = fp;\n            errmesh.scale0 = 0.7*scale;\n            errmesh.tip_name = this.getObjectHint();\n            errmesh.tip_color = (graph.fMarkerColor === 3) ? 0xFF0000 : 0x00FF00;\n            errmesh.nvertex = 6;\n\n            errmesh.tooltip = this.graph2DTooltip;\n         }\n\n         if (pnts) {\n            let fcolor = 'blue';\n\n            if (!this.options.Circles)\n               fcolor = palette ? palette.calcColor(lvl, levels.length)\n                                : this.getColor(graph.fMarkerColor);\n\n            let pr = pnts.createPoints({ color: fcolor, style: this.options.Circles ? 4 : graph.fMarkerStyle }).then(mesh => {\n               mesh.graph = graph;\n               mesh.painter = fp;\n               mesh.tip_color = (graph.fMarkerColor === 3) ? 0xFF0000 : 0x00FF00;\n               mesh.scale0 = 0.3*scale;\n               mesh.index = index;\n\n               mesh.tip_name = this.getObjectHint();\n               mesh.tooltip = this.graph2DTooltip;\n               fp.toplevel.add(mesh);\n            });\n\n            promises.push(pr);\n         }\n      }\n\n      return Promise.all(promises).then(() => {\n         fp.render3D(100);\n         return this;\n      });\n   }\n\n   /** @summary draw TGraph2D object */\n   static draw(dom, gr, opt) {\n      let painter = new TGraph2DPainter(dom, gr);\n      painter.decodeOptions(opt, gr);\n\n      let promise = Promise.resolve(true);\n\n      if (!painter.getMainPainter()) {\n         if (!gr.fHistogram)\n            gr.fHistogram = painter.createHistogram();\n         promise = TH2Painter.draw(dom, gr.fHistogram, \"lego;axis\");\n         painter.ownhisto = true;\n      }\n\n      return promise.then(() => {\n         painter.addToPadPrimitives();\n         return painter.redraw();\n      });\n   }\n\n} // class TGraph2DPainter\n\nexport { TGraph2DPainter };\n"]}