{"version":3,"file":"299.0f48e082c15ab10b.js","mappings":"sMAaA,gBAAgCA,KAG7BC,cACqBC,IAAdC,KAAKC,MAAoBD,KAAKE,eAIrCC,cAAcC,GAEX,IAAIC,EAAI,IAAIC,KAAYF,GAAO,UAE1BJ,KAAKO,UAASP,KAAKO,QAAU,IAElCC,OAAOC,OAAOT,KAAKO,QAAS,CACxBG,KAAML,EAAEM,MAAM,QACdC,OAAQP,EAAEM,MAAM,UAChBE,MAAOR,EAAEM,MAAM,WAGnBX,KAAKc,aAAaV,GAIrBW,eAAeC,SAEPA,IACFA,EAAO,EACPhB,KAAKiB,mBAAoB,GAG5B,IAAIC,EAAM,cAAKC,kBAAL,IAAkBC,OAAOC,IAAIrB,KAAKC,MAE5C,OAAKiB,GAAQF,GAAQE,EAAIG,IAAIC,eACnBtB,KAAKiB,kBACLM,QAAQC,YAGXC,QAAKzB,KAAK0B,SAAUR,EAAIG,IAAIL,GAAOE,EAAId,IAAIY,IAAOW,KAAKC,IAEvDA,IAAUA,EAASC,UAAY7B,KAAK8B,QACjC9B,KAAKe,eAAeC,EAAK,KAMtCe,kBACG,IAAK/B,KAAKO,QAAS,OAEnB,IAAIyB,EAAKhC,KAAKmB,YAEd,GAAInB,KAAKO,QAAQM,aAEPb,KAAKC,UAIf,GAAID,KAAKiC,qBAAsB,QACrBjC,KAAKiC,qBAGZ,IAAIC,EAAKlC,KAAKmC,gBACd,IAAKD,EAGF,mBADOlC,KAAKC,KAKfiC,EAAGE,gBAAgBC,GAAMA,EAAER,YAAc7B,KAAK8B,QAG9C9B,KAAKe,iBAAiBY,KAAK,IAAM3B,KAAK+B,2BAC9B/B,KAAKsC,gBACbC,aAAavC,KAAKsC,wBACXtC,KAAKsC,gBAEZtC,KAAKiC,sBAAuB,EAE5BO,sBAAsB,IAAMxC,KAAK+B,uBAC7B,CAEJ,IAAIU,EAAYT,EAAGU,WAGnB,KAFKD,GAAcA,EAAU,OAAMA,EAAY,MAEzCzC,KAAKC,KAAO+B,EAAGZ,OAAOC,IAAIC,OAC7B,KAAItB,KAAKO,QAAQK,OAKd,mBADOZ,KAAKC,KAHZD,KAAKC,KAAO,EACZwC,EAAYE,KAAKC,IAAI,IAAM,EAAEH,GAOnCzC,KAAKsC,gBAAkBO,WAAW,IAAM7C,KAAK+B,kBAAmBU,IAKtEvC,eACG,YAAKD,KAAO,EAELD,KAAKe,iBAAiBY,KAAK,KAC/B3B,KAAK+B,kBACE/B,mBAKD8C,EAAKd,EAAI5B,GAClB,IAAK4B,EAAGe,OACNC,eAAQC,MAAM,8BACP,KAGT,IAAIC,EAAU,IAAIC,EAAkBL,EAAKd,GAEzC,OAAIkB,EAAQE,kBACTJ,QAAQC,MAAM,qDACP,OAGVC,EAAQ/C,cAAcC,IAEjB4B,EAAGe,OAAOM,QAAUrB,EAAGqB,SACzBrB,EAAGe,OAAOM,OAASrB,EAAGqB,QAEzBH,EAAQpB,OAAS,SAAWwB,yBAErBC,SAAgBT,EAAKd,EAAGe,OAAQ,QAAQpB,KAAK,KACjDuB,EAAQM,qBACDN,EAAQhD","names":["ObjectPainter","redraw","undefined","this","step","startDrawing","decodeOptions","opt","d","DrawOptions","options","Object","assign","once","check","repeat","first","storeDrawOpt","drawPrimitives","indx","_doing_primitives","lst","getObject","fSteps","arr","length","Promise","resolve","draw","getDom","then","ppainter","$grtimeid","selfid","continueDrawing","gr","wait_animation_frame","pp","getPadPainter","cleanPrimitives","p","running_timeout","clearTimeout","requestAnimationFrame","sleeptime","fSleepTime","Math","max","setTimeout","dom","fFrame","console","error","painter","TGraphTimePainter","getMainPainter","fTitle","internals","TH1Painter","addToPadPrimitives"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/TGraphTimePainter.mjs"],"sourcesContent":["import { internals } from '../core.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from '../hist2d/TH1Painter.mjs';\nimport { draw } from '../draw.mjs';\n\n\n/**\n * @summary Painter for TGraphTime object\n *\n * @private\n */\n\nclass TGraphTimePainter extends ObjectPainter {\n\n   /** @summary Redraw object */\n   redraw() {\n      if (this.step === undefined) this.startDrawing();\n   }\n\n   /** @summary Decode drawing options */\n   decodeOptions(opt) {\n\n      let d = new DrawOptions(opt || \"REPEAT\");\n\n      if (!this.options) this.options = {};\n\n      Object.assign(this.options, {\n          once: d.check(\"ONCE\"),\n          repeat: d.check(\"REPEAT\"),\n          first: d.check(\"FIRST\")\n      });\n\n      this.storeDrawOpt(opt);\n   }\n\n   /** @summary Draw primitives */\n   drawPrimitives(indx) {\n\n      if (!indx) {\n         indx = 0;\n         this._doing_primitives = true;\n      }\n\n      let lst = this.getObject()?.fSteps.arr[this.step];\n\n      if (!lst || (indx >= lst.arr.length)) {\n         delete this._doing_primitives;\n         return Promise.resolve();\n      }\n\n      return draw(this.getDom(), lst.arr[indx], lst.opt[indx]).then(ppainter => {\n\n         if (ppainter) ppainter.$grtimeid = this.selfid; // indicator that painter created by ourself\n         return this.drawPrimitives(indx+1);\n\n      });\n   }\n\n   /** @summary Continue drawing */\n   continueDrawing() {\n      if (!this.options) return;\n\n      let gr = this.getObject();\n\n      if (this.options.first) {\n         // draw only single frame, cancel all others\n         delete this.step;\n         return;\n      }\n\n      if (this.wait_animation_frame) {\n         delete this.wait_animation_frame;\n\n         // clear pad\n         let pp = this.getPadPainter();\n         if (!pp) {\n            // most probably, pad is cleared\n            delete this.step;\n            return;\n         }\n\n         // clear primitives produced by the TGraphTime\n         pp.cleanPrimitives(p => (p.$grtimeid === this.selfid));\n\n         // draw ptrimitives again\n         this.drawPrimitives().then(() => this.continueDrawing());\n      } else if (this.running_timeout) {\n         clearTimeout(this.running_timeout);\n         delete this.running_timeout;\n\n         this.wait_animation_frame = true;\n         // use animation frame to disable update in inactive form\n         requestAnimationFrame(() => this.continueDrawing());\n      } else {\n\n         let sleeptime = gr.fSleepTime;\n         if (!sleeptime || (sleeptime<100)) sleeptime = 10;\n\n         if (++this.step > gr.fSteps.arr.length) {\n            if (this.options.repeat) {\n               this.step = 0; // start again\n               sleeptime = Math.max(5000, 5*sleeptime); // increase sleep time\n            } else {\n               delete this.step;    // clear indicator that animation running\n               return;\n            }\n         }\n\n         this.running_timeout = setTimeout(() => this.continueDrawing(), sleeptime);\n      }\n   }\n\n   /** @ummary Start drawing of graph time */\n   startDrawing() {\n      this.step = 0;\n\n      return this.drawPrimitives().then(() => {\n         this.continueDrawing();\n         return this;\n      });\n   }\n\n   /** @summary Draw TGraphTime object */\n   static draw(dom, gr, opt) {\n      if (!gr.fFrame) {\n        console.error('Frame histogram not exists');\n        return null;\n      }\n\n      let painter = new TGraphTimePainter(dom, gr);\n\n      if (painter.getMainPainter()) {\n         console.error('Cannot draw graph time on top of other histograms');\n         return null;\n      }\n\n      painter.decodeOptions(opt);\n\n      if (!gr.fFrame.fTitle && gr.fTitle)\n         gr.fFrame.fTitle = gr.fTitle;\n\n      painter.selfid = \"grtime\" + internals.id_counter++; // use to identify primitives which should be clean\n\n      return TH1Painter.draw(dom, gr.fFrame, \"AXIS\").then(() => {\n         painter.addToPadPrimitives();\n         return painter.startDrawing();\n      });\n   }\n\n} // class TGraphTimePainter\n\nexport { TGraphTimePainter };\n"]}