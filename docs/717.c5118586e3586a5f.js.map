{"version":3,"file":"717.c5118586e3586a5f.js","mappings":"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","names":["ObjectPainter","constructor","dom","obj","opt","csstype","super","this","v7EvalAttr","name","dflt","getObject","cssprefix","type_check","res","undefined","typ1","typ2","parseFloat","fAttr","m","value","v","rstyle","fBlocks","blks","k","length","block","selector","fId","fCssClass","map","toLowerCase","v7SetAttr","v7EvalLength","sizepx","Math","round","norm","px","val","operand","pos","console","log","slice","Number","isFinite","d","v7EvalColor","pp","getPadPainter","_auto_color_cnt","pal","getHistPalette","cnt","num","_num_primitives","getColorOrdinal","_auto_colors","error","ordinal","v7EvalFont","dflts","fontScale","size","rfont","_dfltRFont","fFamily","fStyle","fWeight","text_size","text_angle","text_align","align","text_color","color","font_family","font_style","font_weight","getPadHeight","handler","FontHandler","setAngle","setAlign","setColor","createv7AttFill","prefix","pattern","createAttFill","color_as_svg","createv7AttLine","width","style","createAttLine","lineatt","setBorder","createv7AttMarker","refsize","createAttMarker","v7AttrChange","req","kind","snapid","_typename","ids","names","values","update","push","parseInt","JSON","stringify","v7SendAttrChanges","do_update","canp","getCanvPainter","v7SubmitRequest","method","submitDrawableRequest","_pending_request","assignSnapId","id","p","v7CommMode","_websocket","v7NormalMode","v7OfflineMode","RObjectPainter","arg1","axis","Object","assign","AxisPainterMethods","initAxisPainter","c","embedded","cleanup","axis_g","cleanupAxisPainter","getAxisType","configureZAxis","fp","_log","logbase","abs","exp","logz","configureAxis","min","max","smin","smax","vertical","frame_range","axis_range","opts","full_min","full_max","_symlog","reverse","timeoffset","toffset","fLabelsIndex","own_labels","z","labels","func","d3_scaleTime","domain","convertDate","S","symlog","d3_scaleSymlog","constant","E","d3_scaleLog","base","d3_scaleLinear","scale_min","scale_max","gr_range","range","axis_shift","gr","format","ndiv","nticks","nticks2","nticks3","floor","scale_range","tf1","tf2","chooseTimeFormat","tfunc1","tfunc2","d3_timeFormat","formatTime","noexp","moreloglabels","formatLog","formatLabels","order","ndig","formatNormal","getScaleMin","getScaleMax","indx","fNBinsNoOver","i","pair","second","first","fLabels","createTicks","only_major_as_array","optionNoexp","optionNoopt","optionInt","noticksopt","handle","nminor","nmiddle","nmajor","minor","middle","major","produceTicks","delta","unshift","reset","next","doround","tick","grpos","last_major","next_major_grpos","maxorder","minorder","exclorder3","maxtick","mintick","ord1","log10","ord2","bestorder","bestndig","bestlen","lbls","totallen","lbl","indexOf","warn","isCenteredLabels","processLabelsMove","arg","optionUnlab","label_g","select","box","node","getBBox","append","classed","attr","x","y","height","drag_pos0","offset","property","remove","side","labelsOffset","changeAxisAttr","scalingSize","addTitleDrag","title_g","settings","isBatchMode","acc_x","acc_y","new_x","new_y","alt_pos","curr_indx","drag_rect","drag_move","d3_drag","subject","on","evnt","sourceEvent","preventDefault","stopPropagation","title_length","titlePos","off","swap","isReverseAxis","title_align","isTitleRotated","dx","dy","set_x","set_y","besti","basepos","titleOffset","call","isInsideGrRange","delta1","delta2","getGrRange","drawMainLine","ending","endingSize","endingStyle","sz","sz7","drawTicks","main_draw","ticks","ticks_plusminus","ticksSide","h1","ticksSize","h2","startingSize","l","ticksColor","ticksWidth","gap0","gap","drawLabels","gaps","center_lbls","rotate_lbls","labelsFont","angle","textscale","maxtextlen","lbls_tilt","lbl_pos","max_lbl_width","max_lbl_height","painter","result_width","result_height","textwidth","maxwidth","gap_before","gap_after","scale","scaleTextDrawing","lastpos","fix_offset","fix_coord","startTextDrawing","text","latex","draw_g","post_process","process_drawtext_ready","drawText","axis_step","has_obstacle","formatExp","finishTextDrawing","then","selectAll","each","txt","d3_select","tr","tilt_height","sin","PI","cos","addZoomingRect","lgaps","disable_zooming","titleFont","drawTitle","fTitle","Promise","resolve","title_shift_x","title_shift_y","title_basepos","rotated","titleCenter","titleOpposite","extractDrawAttributes","rect","getPadRect","roundAngle","maxTickSize","drawAxis","layer","transform","standalone","empty","tgaps","setAfterDrawHandler","_afterDrawAgain","drawAxisAgain","drawAxisOtherPlace","only_ticks","zoomStandalone","redraw","drawable","getCoordinate","fPos","len","getPadLength","fVertical","fLength","labels_len","createG","promise","createMenu","menu","add","fillAxisContextMenu","show","addDragHandler","only_move","positionChanged","d3_pointer","item","analyzeWheelEvent","changed","drag","xn","yn","fHoriz","fArr","fVert","submitCanvExec","toFixed","redraw_mode","changes","arguments","h","redrawPad","changeAxisLog","getFramePainter","unzoom","addchk","input","addRColorMenu","col","addSizeMenu","addSelectMenu","addRAttrTextItems","noangle","noalign","change","t","flag","tframe","mode3d","xmin","xmax","ymin","ymax","axes_drawn","keys_handler","projection","v7_frame","is_root6","setFrameActive","enabledKeys","control","enableKeys","setLastEventPos","pnt","fLastEventPnt","getLastEventPos","updateAttributes","force","fX1NDC","modified_NDC","fY1NDC","fX2NDC","fY2NDC","fillatt","getProjectionFunc","b","DegToRad","alpha2","r2","sqrt","f","cdec","denom","tan","recalculateRange","Proj","scale_ymin","scale_ymax","pnts","scale_xmin","scale_xmax","original_xmin","original_xmax","original_ymin","original_ymax","n","drawGrids","getFrameSvg","getFrameHeight","w","getFrameWidth","gridx","gridy","grid_style","getSvgLineStyle","gStyle","grid_color","getColor","x_handle","draw_grid","grid","swap_xy","y_handle","axisAsText","toUpperCase","toPrecision","_setAxisRange","vmin","vmax","nmin","nmax","nzmin","nzmax","zoomChangedInteractive","setAxesRanges","xaxis","yaxis","zaxis","zmin","zmax","setAxes2Ranges","second_x","second_y","x2axis","y2axis","createXY","self_drawaxes","cleanXY","v6axes","reverse_x","reverse_y","logx","logy","extra_y_space","zoom_ymin","zoom_ymax","zoom_xmin","zoom_xmax","create","TAxisPainter","getDom","setPadName","getPadName","symlog_y","symlog_x","logcheckmin","logminfactor","assignFrameMembers","ndim","log_min_nz","ymin_nz","hasDrawnAxes","drawAxes","ticksx","ticksy","sidex","sidey","cleanupAxes","RAxisPainter","draw_swapside","draw_ticks","z_handle","pr","draw_horiz","draw_vertical","_fast_drawing","can_adjust_frame","disable_x_draw","disable_y_draw","disable_ticks","pr1","invert_side","pr2","_frame_x","all","arr","drawAxes2","zoom_x2min","zoom_x2max","scale_x2min","scale_x2max","x2min","x2max","x2_handle","zoom_y2min","zoom_y2max","scale_y2min","scale_y2max","y2min","y2max","y2_handle","getGrFuncs","use_x2","grx2","use_y2","gry2","grx","gry","revertAxis","sizeChanged","clean","grname","cleanFrameDrawings","create3DScene","window","removeEventListener","_click_handler","_dblclick_handler","frame_painter_ref","trans","top_rect","main_svg","lm","tm","rotate","fixpos","options","RotateFrame","FixFrame","_frame_y","_frame_width","_frame_height","_frame_rotate","_frame_fixpos","getLayerSvg","rx","ry","addInteractivity","FrameInteractive","addBasicInteractivity","getFrameRect","hint_delta_x","hint_delta_y","configureUserClickHandler","configureUserDblclickHandler","zoom","zoom_x","zoom_y","zoom_z","unzoom_x","unzoom_y","unzoom_z","r_x","r_y","r_z","is_any_check","flags","checkZooming","canZoomInside","zoom_zmin","zoom_zmax","forEachPainter","O","ranges","interactiveRedraw","zoomSingle","zoom_v","unzoom_v","isAxisZoomed","dox","doy","doz","zoom_changed_x","zoom_changed_y","zoom_changed_z","fld","fillObjectOfflineMenu","changeFrameAttr","fillContextMenu","alone","isTooltipAllowed","setTooltipAllowed","addAttributesMenu","saveAs","revertPoint","showAxisStatus","axis_name","hint_name","axis_value","showObjectStatus","addKeysHandler","addFrameKeysHandler","for_second_axes","addFrameInteractivity","setRootPadRange","toggleAxisLog","pad","iscan","this_pad_name","fObjectID","internals","painters","has_canvas","forEachPainterInPad","isRoot6","svg_this_pad","getPadSvg","getMainPainter","main_painter_ref","setMainPainter","_doing_draw","forEach","svg_p","pads_cache","_pad_x","_pad_y","_pad_width","_pad_height","draw_object","pad_frame","selectActivePad","active","getPadWidth","szx","szy","getRootPad","cleanPrimitives","splice","findPainterFor","selobj","selname","seltype","find","pobj","fName","fDfltPalette","fColors","fOrdinal","fColor","fInterpolate","fNormalized","addMethods","getNumPainters","userfunc","sub","registerForPadEvents","receiver","pad_events_receiver","producePadEvent","_what","_padpainter","_painter","_position","_place","what","padpainter","position","place","selectObjectPainter","istoppad","getAbsPosInCanvas","createCanvasSvg","check_resize","new_size","btns","frect","factor","svg","_fixed_size","getCanvSvg","testMainResize","render_to","selectDom","setTopPainter","online_canvas","enlargePad","padContextMenu","fWinSize","getElementRect","a","alignButtons","svg_can","pad_enlarged","hasObjectsToDraw","enlargeMain","was_fast","checkResize","showPadButtons","createPadSvg","only_resize","svg_parent","pad_name","pad_visible","svg_pad","svg_rect","fSize","color0","fBorderMode","constants","fPrimitives","syncDraw","entry","findIndex","e","resolveFunc","confirmDraw","shift","drawObject","drawPrimitives","_start_tm","Date","getTime","spenttm","ppainter","_primitive","processPadTooltipEvent","hints","processTooltipEvent","nproc","hint","user_info","changeDarkMode","mode","addSettingsMenu","hasMenuBar","actiavteMenuBar","hasEventStatus","activateStatusBar","fname","fillObjectExecMenu","reason","sync_promise","showsubitems","redrawNext","isPromise","getActivePad","r","needRedrawByResize","elem","checkCanvasResize","updateObject","addObjectPainter","objpainter","lst","extractTObjectProp","snap","fColIndex","fColValue","colors","root_colors","getRootColors","pattr","fObject","assignObject","fCssType","fOption","extract_color","member_name","attr_name","addColor","fLineColor","fLineWidth","fLineStyle","fFillColor","fFillStyle","fMarkerColor","fMarkerStyle","fMarkerSize","fTextColor","fTextAlign","fTextAngle","fTextSize","drawNextSnap","_snaps_map","next_rstyle","fDummy","redrawPadSnap","fDrawable","subpad","RPadPainter","decodeOptions","addToPadPrimitives","addPadButtons","prev_name","selectCurrentPad","webSnapIds","kNone","kObject","kColors","kStyle","kPalette","fKind","ListOfColors","fString","palette","custom_palette","ColorPalette","$dummy","findSnap","onlyid","checkid","check","embed_canvas","document","title","batch_mode","mainid","use_openui","brlayout","BrowserLayout","setDom","drawing_divid","registerForResize","isanyfound","isanyremove","prim","removePadButtons","createImage","btoa_func","produceImage","separ","itemContextMenu","rrr","getBoundingClientRect","clientX","left","clientY","top","setTimeout","selkind","selp","isInteger","full_canvas","filename","imgdata","saveFile","encodeURIComponent","file_format","use_frame","items","prnt","btns_node","btns_prnt","parentNode","btns_next","nextSibling","main","render3D","access3dKind","can3d","sz2","getSizeFor3d","canvas","renderer","domElement","dataUrl","toDataURL","foreign","clname","svg_frame","frame_node","frame_next","img","insert","reconstruct","insertBefore","innerHTML","compressSVG","image","Image","onload","createElement","context","getContext","drawImage","onerror","src","data","replace","match","p1","String","fromCharCode","decodeURIComponent","reEncode","clickPadButton","funcname","closeMenu","getDimension","shown","done","clickButton","addPadButton","btn","tooltip","keyname","_buttons","cp","is_online","PadButtonsHandler","frame_painter","sign","getV","getRect","user","DrawOptions","GlobalColors","LocalColors","IgnorePalette","fLogx","fLogy","fLogz","fGridx","fGridy","fTickx","fTicky","s","matchObjectType","addr","_raw","_args","path","connid","raw","args","nextRequest","url","reqmode","post","browser","createHttpRequest","processRequest","str","u8Arr","Uint8Array","trim","getResponseHeader","extra_hdr","send","_offset","onclose","dummy_tmout","onopen","onmessage","close","protocol","httpRequest","getProtocol","parse","nextOperation","wait_for_file","provideData","socket_kind","credits","state","cansend","ackn","getUserArgs","field","user_args","setUserArgs","setReceiver","invokeReceiver","brdcst","arg2","channels","ks","keys","chid","_msg","_len","wait_first_recv","channel","force_queue","msgqueue","ready","msg","reserveQueueItem","markQueueItemDone","processQueue","_loop_msgqueue","front","master","channelid","timerid","clearTimeout","canSend","numsend","getRelCanSend","keepAlive","inject","immediate","bind","Array","isArray","createChannel","WebWindowHandle","freechannelid","getChannelId","setHRef","href","getHRef","relative_path","ddd","lastIndexOf","connect","ntry","key","token","retry_open","first_time","toString","location","showProgress","FileDumpSocket","WebSocket","LongPollSocket","next_binary","binchid","Blob","reader","FileReader","qitem","event","target","result","readAsArrayBuffer","i1","credit","i2","i3","ArrayBuffer","err","tooltip_allowed","v7canvas","_submreq","_changed_layout","setLayoutKind","getLayoutKind","origin","main_selector","changeLayout","layout_kind","current","sidebar","firstChild","removeChild","html","appendChild","GridDisplay","getGridFrame","resize","toggleProjection","proj_painter","showUI5ProjectionArea","layout","drawProjection","drawInSidePanel","canv","testUI5","showMessage","saveCanvasAsFile","sendWebsocket","sendSaveCommand","closeWebsocket","useWebsocket","onWebsocketOpened","onWebsocketClosed","closeCurrentWindow","onWebsocketMsg","redrawObject","processDrawableReply","cmdid","cmd","reply","showUI5Panel","conn","cpainter","panel_handle","panel_name","onWebsocketError","hist","that","showSection","_requests","prevreq","_tm","_nextreq","_nextreqid","reqid","_kind","_method","submitMenuRequest","menukind","menureqid","submitExec","exec","subelem","processChanges","activateGed","hasStatus","hp","getHPainter","hasStatusLine","createStatusLine","hasGed","hasContent","removeGed","ged_view","getController","cleanupGed","destroy","deleteContent","createBrowserBtns","ToolbarIcons","toggleKind","setBrowserContent","setBrowserTitle","toggleBrowserKind","loadOpenui5","sap","ui","define","JSONModel","XMLView","oModel","viewName","oGed","setModel","placeAt","padEventsReceiver","produceJSON","can","nocanvas","RCanvasPainter","normal_canvas","frame_kind","draw","RFramePainter","reject","Error","fx","fy","fw","ph","title_margin","title_width","title_height","textFont","fText","minwidth","minheight","no_change_x","font","defs","fSrc","fDefault","ensureRCanvas","registerMethods","extractRColor","rcolor","getContourIndex","zc","mid","cntr","fContour","fCustomContour","getContourColor","zindx","getContour","deleteContour","calcColor","entry1","entry2","dist","r1","col1","d3_rgb","col2","g","createPaletteColors","setFullRange","createContour","nlevels","zminpositive","colzmin","colzmax","logmin","dz","level"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/base/RObjectPainter.mjs","../node_modules/jsroot/modules/gpad/RAxisPainter.mjs","../node_modules/jsroot/modules/gpad/RFramePainter.mjs","../node_modules/jsroot/modules/gpad/RPadPainter.mjs","../node_modules/jsroot/modules/webwindow.mjs","../node_modules/jsroot/modules/gpad/RCanvasPainter.mjs"],"sourcesContent":["import { FontHandler } from './FontHandler.mjs';\nimport { ObjectPainter } from './ObjectPainter.mjs';\n\n\nconst kNormal = 1, /* kLessTraffic = 2, */ kOffline = 3;\n\nclass RObjectPainter extends ObjectPainter {\n\n   constructor(dom, obj, opt, csstype) {\n      super(dom,obj,opt);\n      this.csstype = csstype;\n   }\n\n   /** @summary Evaluate v7 attributes using fAttr storage and configured RStyle */\n   v7EvalAttr(name, dflt) {\n      let obj = this.getObject();\n      if (!obj) return dflt;\n      if (this.cssprefix) name = this.cssprefix + name;\n\n      const type_check = res => {\n         if (dflt === undefined) return res;\n         let typ1 = typeof dflt, typ2 = typeof res;\n         if (typ1 == typ2) return res;\n         if (typ1 == 'boolean') {\n            if (typ2 == 'string') return (res != \"\") && (res != \"0\") && (res != \"no\") && (res != \"off\");\n            return !!res;\n         }\n         if ((typ1 == 'number') && (typ2 == 'string'))\n            return parseFloat(res);\n         return res;\n      };\n\n      if (obj.fAttr && obj.fAttr.m) {\n         let value = obj.fAttr.m[name];\n         if (value) return type_check(value.v); // found value direct in attributes\n      }\n\n      if (this.rstyle && this.rstyle.fBlocks) {\n         let blks = this.rstyle.fBlocks;\n         for (let k = 0; k < blks.length; ++k) {\n            let block = blks[k],\n                match = (this.csstype && (block.selector == this.csstype)) ||\n                        (obj.fId && (block.selector == (\"#\" + obj.fId))) ||\n                        (obj.fCssClass && (block.selector == (\".\" + obj.fCssClass)));\n\n            if (match && block.map && block.map.m) {\n               let value = block.map.m[name.toLowerCase()];\n               if (value) return type_check(value.v);\n            }\n         }\n      }\n\n      return dflt;\n   }\n\n   /** @summary Set v7 attributes value */\n   v7SetAttr(name, value) {\n      let obj = this.getObject();\n      if (this.cssprefix) name = this.cssprefix + name;\n\n      if (obj && obj.fAttr && obj.fAttr.m)\n         obj.fAttr.m[name] = { v: value };\n   }\n\n   /** @summary Decode pad length from string, return pixel value */\n   v7EvalLength(name, sizepx, dflt) {\n      if (sizepx <= 0) sizepx = 1;\n\n      let value = this.v7EvalAttr(name);\n\n      if (value === undefined)\n         return Math.round(dflt*sizepx);\n\n      if (typeof value == \"number\")\n         return Math.round(value*sizepx);\n\n      if (value === null)\n         return 0;\n\n      let norm = 0, px = 0, val = value, operand = 0, pos = 0;\n\n      while (val.length > 0) {\n         // skip empty spaces\n         while ((pos < val.length) && ((val[pos] == ' ') || (val[pos] == '\\t')))\n            ++pos;\n\n         if (pos >= val.length)\n            break;\n\n         if ((val[pos] == '-') || (val[pos] == '+')) {\n            if (operand) {\n               console.log(\"Fail to parse RPadLength \" + value);\n               return dflt;\n            }\n            operand = (val[pos] == '-') ? -1 : 1;\n            pos++;\n            continue;\n         }\n\n         if (pos > 0) { val = val.slice(pos); pos = 0; }\n\n         while ((pos < val.length) && (((val[pos]>='0') && (val[pos]<='9')) || (val[pos]=='.'))) pos++;\n\n         let v = parseFloat(val.slice(0, pos));\n         if (!Number.isFinite(v)) {\n            console.log(\"Fail to parse RPadLength \" + value);\n            return Math.round(dflt*sizepx);\n         }\n\n         val = val.slice(pos);\n         pos = 0;\n         if (!operand) operand = 1;\n         if ((val.length > 0) && (val[0] == '%')) {\n            val = val.slice(1);\n            norm += operand*v*0.01;\n         } else if ((val.length > 1) && (val[0] == 'p') && (val[1] == 'x')) {\n            val = val.slice(2);\n            px += operand*v;\n         } else {\n            norm += operand*v;\n         }\n\n         operand = 0;\n      }\n\n      return Math.round(norm*sizepx + px);\n   }\n\n   /** @summary Evaluate RColor using attribute storage and configured RStyle */\n   v7EvalColor(name, dflt) {\n      let val = this.v7EvalAttr(name, \"\");\n      if (!val || (typeof val != \"string\")) return dflt;\n\n      if (val == \"auto\") {\n         let pp = this.getPadPainter();\n         if (pp?._auto_color_cnt !== undefined) {\n            let pal = pp.getHistPalette(),\n                cnt = pp._auto_color_cnt++,\n                num = pp._num_primitives - 1;\n            if (num < 2) num = 2;\n            val = pal ? pal.getColorOrdinal((cnt % num) / num) : \"blue\";\n            if (!this._auto_colors) this._auto_colors = {};\n            this._auto_colors[name] = val;\n         } else if (this._auto_colors && this._auto_colors[name]) {\n            val = this._auto_colors[name];\n         } else {\n            console.error(`Autocolor ${name} not defined yet - please check code`);\n            val = \"\";\n         }\n      } else if (val[0] == \"[\") {\n         let ordinal = parseFloat(val.slice(1, val.length-1));\n         val = \"black\";\n         if (Number.isFinite(ordinal)) {\n             let pp = this.getPadPainter(),\n                 pal = pp?.getHistPalette();\n             if (pal) val = pal.getColorOrdinal(ordinal);\n         }\n      }\n      return val;\n   }\n\n   /** @summary Evaluate RAttrText properties\n     * @returns {Object} FontHandler, can be used directly for the text drawing */\n   v7EvalFont(name, dflts, fontScale) {\n\n      if (!dflts) dflts = {}; else\n      if (typeof dflts == \"number\") dflts = { size: dflts };\n\n      let pp = this.getPadPainter(),\n          rfont = pp?._dfltRFont || { fFamily: \"Arial\", fStyle: \"\", fWeight: \"\" },\n          text_size   = this.v7EvalAttr(name + \"_size\", dflts.size || 12),\n          text_angle  = this.v7EvalAttr(name + \"_angle\", 0),\n          text_align  = this.v7EvalAttr(name + \"_align\", dflts.align || \"none\"),\n          text_color  = this.v7EvalColor(name + \"_color\", dflts.color || \"none\"),\n          font_family = this.v7EvalAttr(name + \"_font_family\", rfont.fFamily || \"Arial\"),\n          font_style  = this.v7EvalAttr(name + \"_font_style\", rfont.fStyle || \"\"),\n          font_weight = this.v7EvalAttr(name + \"_font_weight\", rfont.fWeight || \"\");\n\n       if (typeof text_size == \"string\") text_size = parseFloat(text_size);\n       if (!Number.isFinite(text_size) || (text_size <= 0)) text_size = 12;\n       if (!fontScale) fontScale = pp?.getPadHeight() || 100;\n\n       let handler = new FontHandler(null, text_size, fontScale, font_family, font_style, font_weight);\n\n       if (text_angle) handler.setAngle(360 - text_angle);\n       if (text_align !== \"none\") handler.setAlign(text_align);\n       if (text_color !== \"none\") handler.setColor(text_color);\n\n       return handler;\n    }\n\n   /** @summary Create this.fillatt object based on v7 fill attributes */\n   createv7AttFill(prefix) {\n      if (!prefix || (typeof prefix != \"string\")) prefix = \"fill_\";\n\n      let color = this.v7EvalColor(prefix + \"color\", \"\"),\n          pattern = this.v7EvalAttr(prefix + \"style\", 0);\n\n      this.createAttFill({ pattern, color,  color_as_svg: true });\n   }\n\n   /** @summary Create this.lineatt object based on v7 line attributes */\n   createv7AttLine(prefix) {\n      if (!prefix || (typeof prefix != \"string\")) prefix = \"line_\";\n\n      let color = this.v7EvalColor(prefix + \"color\", \"black\"),\n          width = this.v7EvalAttr(prefix + \"width\", 1),\n          style = this.v7EvalAttr(prefix + \"style\", 1),\n          pattern = this.v7EvalAttr(prefix + \"pattern\");\n\n      this.createAttLine({ color, width, style, pattern });\n\n      if (prefix == \"border_\")\n         this.lineatt.setBorder(this.v7EvalAttr(prefix + \"rx\", 0), this.v7EvalAttr(prefix + \"ry\", 0));\n   }\n\n    /** @summary Create this.markeratt object based on v7 attributes */\n   createv7AttMarker(prefix) {\n      if (!prefix || (typeof prefix != \"string\")) prefix = \"marker_\";\n\n      let color = this.v7EvalColor(prefix + \"color\", \"black\"),\n          size = this.v7EvalAttr(prefix + \"size\", 0.01),\n          style = this.v7EvalAttr(prefix + \"style\", 1),\n          refsize = 1;\n      if (size < 1) {\n         let pp = this.getPadPainter();\n         refsize = pp?.getPadHeight() || 100;\n      }\n\n      this.createAttMarker({ color, size, style, refsize });\n   }\n\n   /** @summary Create RChangeAttr, which can be applied on the server side\n     * @private */\n   v7AttrChange(req, name, value, kind) {\n      if (!this.snapid)\n         return false;\n\n      if (!req._typename) {\n         req._typename = \"ROOT::Experimental::RChangeAttrRequest\";\n         req.ids = [];\n         req.names = [];\n         req.values = [];\n         req.update = true;\n      }\n\n      if (this.cssprefix) name = this.cssprefix + name;\n      req.ids.push(this.snapid);\n      req.names.push(name);\n      let obj = null;\n\n      if ((value === null) || (value === undefined)) {\n        if (!kind) kind = 'none';\n        if (kind !== 'none') console.error(`Trying to set ${kind} for none value`);\n      }\n\n      if (!kind)\n         switch(typeof value) {\n            case \"number\": kind = \"double\"; break;\n            case \"boolean\": kind = \"boolean\"; break;\n         }\n\n      obj = { _typename: \"ROOT::Experimental::RAttrMap::\" };\n      switch(kind) {\n         case \"none\": obj._typename += \"NoValue_t\"; break;\n         case \"boolean\": obj._typename += \"BoolValue_t\"; obj.v = value ? true : false; break;\n         case \"int\": obj._typename += \"IntValue_t\"; obj.v = parseInt(value); break;\n         case \"double\": obj._typename += \"DoubleValue_t\"; obj.v = parseFloat(value); break;\n         default: obj._typename += \"StringValue_t\"; obj.v = (typeof value == \"string\") ? value : JSON.stringify(value); break;\n      }\n\n      req.values.push(obj);\n      return true;\n   }\n\n   /** @summary Sends accumulated attribute changes to server */\n   v7SendAttrChanges(req, do_update) {\n      let canp = this.getCanvPainter();\n      if (canp && req?._typename) {\n         if (do_update !== undefined)\n            req.update = do_update ? true : false;\n         canp.v7SubmitRequest(\"\", req);\n      }\n   }\n\n   /** @summary Submit request to server-side drawable\n    * @param kind defines request kind, only single request a time can be submitted\n    * @param req is object derived from DrawableRequest, including correct _typename\n    * @param method is method of painter object which will be called when getting reply */\n   v7SubmitRequest(kind, req, method) {\n      let canp = this.getCanvPainter();\n      if (typeof canp?.submitDrawableRequest != 'function') return null;\n\n      // special situation when snapid not yet assigned - just keep ref until snapid is there\n      // maybe keep full list - for now not clear if really needed\n      if (!this.snapid) {\n         this._pending_request = { kind, req, method };\n         return req;\n      }\n\n      return canp.submitDrawableRequest(kind, req, this, method);\n   }\n\n   /** @summary Assign snapid to the painter\n     * @desc Overwrite default method */\n   assignSnapId(id) {\n      this.snapid = id;\n      if (this.snapid && this._pending_request) {\n         let p = this._pending_request;\n         this.v7SubmitRequest(p.kind, p.req, p.method);\n         delete this._pending_request;\n      }\n   }\n\n   /** @summary Return communication mode with the server\n     * @desc\n     * kOffline means no server there,\n     * kLessTraffic advise not to send commands if offline functionality available\n     * kNormal is standard functionality with RCanvas on server side */\n   v7CommMode() {\n      let canp = this.getCanvPainter();\n      if (!canp || !canp.submitDrawableRequest || !canp._websocket)\n         return kOffline;\n\n      return kNormal;\n   }\n\n   v7NormalMode() { return this.v7CommMode() == kNormal; }\n\n   v7OfflineMode() { return this.v7CommMode() == kOffline; }\n\n} // class RObjectPainter\n\nexport { RObjectPainter };\n","import { settings, isBatchMode } from '../core.mjs';\nimport { select as d3_select, pointer as d3_pointer,\n         drag as d3_drag, timeFormat as d3_timeFormat,\n         scaleTime as d3_scaleTime, scaleSymlog as d3_scaleSymlog,\n         scaleLog as d3_scaleLog, scaleLinear as d3_scaleLinear } from '../d3.mjs';\nimport { AxisPainterMethods, chooseTimeFormat } from './TAxisPainter.mjs';\nimport { createMenu } from '../gui/menu.mjs';\nimport { addDragHandler } from './TFramePainter.mjs';\nimport { RObjectPainter } from '../base/RObjectPainter.mjs';\n\n\n/**\n * @summary Axis painter for v7\n *\n * @private\n */\n\nclass RAxisPainter extends RObjectPainter {\n\n   /** @summary constructor */\n   constructor(dom, arg1, axis, cssprefix) {\n      let drawable = cssprefix ? arg1.getObject() : arg1;\n      super(dom, drawable, \"\", cssprefix ? arg1.csstype : \"axis\");\n      Object.assign(this, AxisPainterMethods);\n      this.initAxisPainter();\n\n      this.axis = axis;\n      if (cssprefix) { // drawing from the frame\n         this.embedded = true; // indicate that painter embedded into the histo painter\n         //this.csstype = arg1.csstype; // for the moment only via frame one can set axis attributes\n         this.cssprefix = cssprefix;\n         this.rstyle = arg1.rstyle;\n      } else {\n         // this.csstype = \"axis\";\n         this.cssprefix = \"axis_\";\n      }\n   }\n\n   /** @summary cleanup painter */\n   cleanup() {\n      delete this.axis;\n      delete this.axis_g;\n      this.cleanupAxisPainter();\n      super.cleanup();\n   }\n\n   /** @summary Use in GED to identify kind of axis */\n   getAxisType() { return \"RAttrAxis\"; }\n\n   /** @summary Configure only base parameters, later same handle will be used for drawing  */\n   configureZAxis(name, fp) {\n      this.name = name;\n      this.kind = \"normal\";\n      this.log = false;\n      let _log = this.v7EvalAttr(\"log\", 0);\n      if (_log) {\n         this.log = true;\n         this.logbase = 10;\n         if (Math.abs(_log - Math.exp(1))<0.1)\n            this.logbase = Math.exp(1);\n         else if (_log > 1.9)\n            this.logbase = Math.round(_log);\n      }\n      fp.logz = this.log;\n   }\n\n   /** @summary Configure axis painter\n     * @desc Axis can be drawn inside frame <g> group with offset to 0 point for the frame\n     * Therefore one should distinguish when caclulated coordinates used for axis drawing itself or for calculation of frame coordinates\n     * @private */\n   configureAxis(name, min, max, smin, smax, vertical, frame_range, axis_range, opts) {\n      if (!opts) opts = {};\n      this.name = name;\n      this.full_min = min;\n      this.full_max = max;\n      this.kind = \"normal\";\n      this.vertical = vertical;\n      this.log = false;\n      let _log = this.v7EvalAttr(\"log\", 0),\n          _symlog = this.v7EvalAttr(\"symlog\", 0);\n      this.reverse = opts.reverse || false;\n\n      if (this.v7EvalAttr(\"time\")) {\n         this.kind = 'time';\n         this.timeoffset = 0;\n         let toffset = this.v7EvalAttr(\"timeOffset\");\n         if (toffset !== undefined) {\n            toffset = parseFloat(toffset);\n            if (Number.isFinite(toffset)) this.timeoffset = toffset*1000;\n         }\n      } else if (this.axis && this.axis.fLabelsIndex) {\n         this.kind = 'labels';\n         delete this.own_labels;\n      } else if (opts.labels) {\n         this.kind = 'labels';\n      } else {\n         this.kind = 'normal';\n      }\n\n      if (this.kind == 'time') {\n         this.func = d3_scaleTime().domain([this.convertDate(smin), this.convertDate(smax)]);\n      } else if (_symlog && (_symlog > 0)) {\n         this.symlog = _symlog;\n         this.func = d3_scaleSymlog().constant(_symlog).domain([smin,smax]);\n      } else if (_log) {\n         if (smax <= 0) smax = 1;\n         if ((smin <= 0) || (smin >= smax))\n            smin = smax * 0.0001;\n         this.log = true;\n         this.logbase = 10;\n         if (Math.abs(_log - Math.exp(1))<0.1)\n            this.logbase = Math.exp(1);\n         else if (_log > 1.9)\n            this.logbase = Math.round(_log);\n         this.func = d3_scaleLog().base(this.logbase).domain([smin,smax]);\n      } else {\n         this.func = d3_scaleLinear().domain([smin,smax]);\n      }\n\n      this.scale_min = smin;\n      this.scale_max = smax;\n\n      this.gr_range = axis_range || 1000; // when not specified, one can ignore it\n\n      let range = frame_range ? frame_range : [0, this.gr_range];\n\n      this.axis_shift = range[1] - this.gr_range;\n\n      if (this.reverse)\n         this.func.range([range[1], range[0]]);\n      else\n         this.func.range(range);\n\n      if (this.kind == 'time')\n         this.gr = val => this.func(this.convertDate(val));\n      else if (this.log)\n         this.gr = val => (val < this.scale_min) ? (this.vertical ? this.func.range()[0]+5 : -5) : this.func(val);\n      else\n         this.gr = this.func;\n\n      delete this.format;// remove formatting func\n\n      let ndiv = this.v7EvalAttr(\"ndiv\", 508);\n\n      this.nticks = ndiv % 100;\n      this.nticks2 = (ndiv % 10000 - this.nticks) / 100;\n      this.nticks3 = Math.floor(ndiv/10000);\n\n      if (this.nticks > 20) this.nticks = 20;\n\n      let gr_range = Math.abs(this.gr_range) || 100;\n\n      if (this.kind == 'time') {\n         if (this.nticks > 8) this.nticks = 8;\n\n         let scale_range = this.scale_max - this.scale_min,\n             tf1 = this.v7EvalAttr(\"timeFormat\", \"\"),\n             tf2 = chooseTimeFormat(scale_range / gr_range, false);\n\n         if (!tf1 || (scale_range < 0.1 * (this.full_max - this.full_min)))\n            tf1 = chooseTimeFormat(scale_range / this.nticks, true);\n\n         this.tfunc1 = this.tfunc2 = d3_timeFormat(tf1);\n         if (tf2!==tf1)\n            this.tfunc2 = d3_timeFormat(tf2);\n\n         this.format = this.formatTime;\n\n      } else if (this.log) {\n         if (this.nticks2 > 1) {\n            this.nticks *= this.nticks2; // all log ticks (major or minor) created centrally\n            this.nticks2 = 1;\n         }\n         this.noexp = this.v7EvalAttr(\"noexp\", false);\n         if ((this.scale_max < 300) && (this.scale_min > 0.3) && (this.logbase == 10)) this.noexp = true;\n         this.moreloglabels = this.v7EvalAttr(\"moreloglbls\", false);\n\n         this.format = this.formatLog;\n      } else if (this.kind == 'labels') {\n         this.nticks = 50; // for text output allow max 50 names\n         let scale_range = this.scale_max - this.scale_min;\n         if (this.nticks > scale_range)\n            this.nticks = Math.round(scale_range);\n         this.nticks2 = 1;\n\n         this.format = this.formatLabels;\n      } else {\n         this.order = 0;\n         this.ndig = 0;\n         this.format = this.formatNormal;\n      }\n   }\n\n   /** @summary Return scale min */\n   getScaleMin() {\n      return this.func ? this.func.domain()[0] : 0;\n   }\n\n   /** @summary Return scale max */\n   getScaleMax() {\n      return this.func ? this.func.domain()[1] : 0;\n   }\n\n   /** @summary Provide label for axis value */\n   formatLabels(d) {\n      let indx = Math.round(d);\n      if (this.axis && this.axis.fLabelsIndex) {\n         if ((indx < 0) || (indx >= this.axis.fNBinsNoOver)) return null;\n         for (let i = 0; i < this.axis.fLabelsIndex.length; ++i) {\n            let pair = this.axis.fLabelsIndex[i];\n            if (pair.second === indx) return pair.first;\n         }\n      } else {\n         let labels = this.getObject().fLabels;\n         if (labels && (indx >= 0) && (indx < labels.length))\n            return labels[indx];\n      }\n      return null;\n   }\n\n   /** @summary Creates array with minor/middle/major ticks */\n   createTicks(only_major_as_array, optionNoexp, optionNoopt, optionInt) {\n\n      if (optionNoopt && this.nticks && (this.kind == \"normal\")) this.noticksopt = true;\n\n      let handle = { nminor: 0, nmiddle: 0, nmajor: 0, func: this.func };\n\n      handle.minor = handle.middle = handle.major = this.produceTicks(this.nticks);\n\n      if (only_major_as_array) {\n         let res = handle.major, delta = (this.scale_max - this.scale_min)*1e-5;\n         if (res[0] > this.scale_min + delta) res.unshift(this.scale_min);\n         if (res[res.length-1] < this.scale_max - delta) res.push(this.scale_max);\n         return res;\n      }\n\n      if ((this.nticks2 > 1) && (!this.log || (this.logbase === 10))) {\n         handle.minor = handle.middle = this.produceTicks(handle.major.length, this.nticks2);\n\n         let gr_range = Math.abs(this.func.range()[1] - this.func.range()[0]);\n\n         // avoid black filling by middle-size\n         if ((handle.middle.length <= handle.major.length) || (handle.middle.length > gr_range/3.5)) {\n            handle.minor = handle.middle = handle.major;\n         } else if ((this.nticks3 > 1) && !this.log)  {\n            handle.minor = this.produceTicks(handle.middle.length, this.nticks3);\n            if ((handle.minor.length <= handle.middle.length) || (handle.minor.length > gr_range/1.7)) handle.minor = handle.middle;\n         }\n      }\n\n      handle.reset = function() {\n         this.nminor = this.nmiddle = this.nmajor = 0;\n      };\n\n      handle.next = function(doround) {\n         if (this.nminor >= this.minor.length) return false;\n\n         this.tick = this.minor[this.nminor++];\n         this.grpos = this.func(this.tick);\n         if (doround) this.grpos = Math.round(this.grpos);\n         this.kind = 3;\n\n         if ((this.nmiddle < this.middle.length) && (Math.abs(this.grpos - this.func(this.middle[this.nmiddle])) < 1)) {\n            this.nmiddle++;\n            this.kind = 2;\n         }\n\n         if ((this.nmajor < this.major.length) && (Math.abs(this.grpos - this.func(this.major[this.nmajor])) < 1) ) {\n            this.nmajor++;\n            this.kind = 1;\n         }\n         return true;\n      };\n\n      handle.last_major = function() {\n         return (this.kind !== 1) ? false : this.nmajor == this.major.length;\n      };\n\n      handle.next_major_grpos = function() {\n         if (this.nmajor >= this.major.length) return null;\n         return this.func(this.major[this.nmajor]);\n      };\n\n      this.order = 0;\n      this.ndig = 0;\n\n      // at the moment when drawing labels, we can try to find most optimal text representation for them\n\n      if ((this.kind == \"normal\") && !this.log && (handle.major.length > 0)) {\n\n         let maxorder = 0, minorder = 0, exclorder3 = false;\n\n         if (!optionNoexp) {\n            let maxtick = Math.max(Math.abs(handle.major[0]),Math.abs(handle.major[handle.major.length-1])),\n                mintick = Math.min(Math.abs(handle.major[0]),Math.abs(handle.major[handle.major.length-1])),\n                ord1 = (maxtick > 0) ? Math.round(Math.log10(maxtick)/3)*3 : 0,\n                ord2 = (mintick > 0) ? Math.round(Math.log10(mintick)/3)*3 : 0;\n\n             exclorder3 = (maxtick < 2e4); // do not show 10^3 for values below 20000\n\n             if (maxtick || mintick) {\n                maxorder = Math.max(ord1,ord2) + 3;\n                minorder = Math.min(ord1,ord2) - 3;\n             }\n         }\n\n         // now try to find best combination of order and ndig for labels\n\n         let bestorder = 0, bestndig = this.ndig, bestlen = 1e10;\n\n         for (let order = minorder; order <= maxorder; order+=3) {\n            if (exclorder3 && (order===3)) continue;\n            this.order = order;\n            this.ndig = 0;\n            let lbls = [], indx = 0, totallen = 0;\n            while (indx<handle.major.length) {\n               let lbl = this.format(handle.major[indx], true);\n               if (lbls.indexOf(lbl)<0) {\n                  lbls.push(lbl);\n                  totallen += lbl.length;\n                  indx++;\n                  continue;\n               }\n               if (++this.ndig > 11) break; // not too many digits, anyway it will be exponential\n               lbls = []; indx = 0; totallen = 0;\n            }\n\n            // for order==0 we should virually remove \"0.\" and extra label on top\n            if (!order && (this.ndig<4)) totallen-=(handle.major.length*2+3);\n\n            if (totallen < bestlen) {\n               bestlen = totallen;\n               bestorder = this.order;\n               bestndig = this.ndig;\n            }\n         }\n\n         this.order = bestorder;\n         this.ndig = bestndig;\n\n         if (optionInt) {\n            if (this.order) console.warn('Axis painter - integer labels are configured, but axis order ' + this.order + ' is preferable');\n            if (this.ndig) console.warn('Axis painter - integer labels are configured, but ' + this.ndig + ' decimal digits are required');\n            this.ndig = 0;\n            this.order = 0;\n         }\n      }\n\n      return handle;\n   }\n\n   /** @summary Is labels should be centered */\n   isCenteredLabels() {\n      if (this.kind === 'labels') return true;\n      if (this.kind === 'log') return false;\n      return this.v7EvalAttr(\"labels_center\", false);\n   }\n\n   /** @summary Used to move axis labels instead of zooming\n     * @private */\n   processLabelsMove(arg, pos) {\n      if (this.optionUnlab || !this.axis_g) return false;\n\n      let label_g = this.axis_g.select(\".axis_labels\");\n      if (!label_g || (label_g.size() != 1)) return false;\n\n      if (arg == 'start') {\n         // no moving without labels\n         let box = label_g.node().getBBox();\n\n         label_g.append(\"rect\")\n                 .classed(\"zoom\", true)\n                 .attr(\"x\", box.x)\n                 .attr(\"y\", box.y)\n                 .attr(\"width\", box.width)\n                 .attr(\"height\", box.height)\n                 .style(\"cursor\", \"move\");\n         if (this.vertical) {\n            this.drag_pos0 = pos[0];\n         } else {\n            this.drag_pos0 = pos[1];\n         }\n\n         return true;\n      }\n\n      let offset = label_g.property('fix_offset');\n\n      if (this.vertical) {\n         offset += Math.round(pos[0] - this.drag_pos0);\n         label_g.attr('transform', `translate(${offset})`);\n      } else {\n         offset += Math.round(pos[1] - this.drag_pos0);\n         label_g.attr('transform', `translate(0,${offset})`);\n      }\n      if (!offset) label_g.attr('transform', null);\n\n      if (arg == 'stop') {\n         label_g.select(\"rect.zoom\").remove();\n         delete this.drag_pos0;\n         if (offset != label_g.property('fix_offset')) {\n            label_g.property('fix_offset', offset);\n            let side = label_g.property('side') || 1;\n            this.labelsOffset = offset / (this.vertical ? -side : side);\n            this.changeAxisAttr(1, \"labels_offset\", this.labelsOffset / this.scalingSize);\n         }\n      }\n\n      return true;\n   }\n\n   /** @summary Add interactive elements to draw axes title */\n   addTitleDrag(title_g, side) {\n      if (!settings.MoveResize || isBatchMode()) return;\n\n      let drag_rect = null,\n          acc_x, acc_y, new_x, new_y, alt_pos, curr_indx,\n          drag_move = d3_drag().subject(Object);\n\n      drag_move\n         .on(\"start\", evnt => {\n\n            evnt.sourceEvent.preventDefault();\n            evnt.sourceEvent.stopPropagation();\n\n            let box = title_g.node().getBBox(), // check that elements visible, request precise value\n                title_length = this.vertical ? box.height : box.width;\n\n            new_x = acc_x = title_g.property('shift_x');\n            new_y = acc_y = title_g.property('shift_y');\n\n            if (this.titlePos == \"center\")\n               curr_indx = 1;\n            else\n               curr_indx = (this.titlePos == \"left\") ? 0 : 2;\n\n            // let d = ((this.gr_range > 0) && this.vertical) ? title_length : 0;\n            alt_pos = [0, this.gr_range/2, this.gr_range]; // possible positions\n            let off = this.vertical ? -title_length : title_length,\n                swap = this.isReverseAxis() ? 2 : 0;\n            if (this.title_align == \"middle\") {\n               alt_pos[swap] += off/2;\n               alt_pos[2-swap] -= off/2;\n            } else if ((this.title_align == \"begin\") ^ this.isTitleRotated()) {\n               alt_pos[1] -= off/2;\n               alt_pos[2-swap] -= off;\n            } else { // end\n               alt_pos[swap] += off;\n               alt_pos[1] += off/2;\n            }\n\n            alt_pos[curr_indx] = this.vertical ? acc_y : acc_x;\n\n            drag_rect = title_g.append(\"rect\")\n                 .classed(\"zoom\", true)\n                 .attr(\"x\", box.x)\n                 .attr(\"y\", box.y)\n                 .attr(\"width\", box.width)\n                 .attr(\"height\", box.height)\n                 .style(\"cursor\", \"move\");\n//                 .style(\"pointer-events\",\"none\"); // let forward double click to underlying elements\n          }).on(\"drag\", evnt => {\n               if (!drag_rect) return;\n\n               evnt.sourceEvent.preventDefault();\n               evnt.sourceEvent.stopPropagation();\n\n               acc_x += evnt.dx;\n               acc_y += evnt.dy;\n\n               let set_x, set_y,\n                   p = this.vertical ? acc_y : acc_x, besti = 0;\n\n               for (let i=1; i<3; ++i)\n                  if (Math.abs(p - alt_pos[i]) < Math.abs(p - alt_pos[besti])) besti = i;\n\n               if (this.vertical) {\n                  set_x = acc_x;\n                  set_y = alt_pos[besti];\n               } else {\n                  set_x = alt_pos[besti];\n                  set_y = acc_y;\n               }\n\n               new_x = set_x; new_y = set_y; curr_indx = besti;\n               title_g.attr('transform', 'translate(' + Math.round(new_x) + ',' + Math.round(new_y) +  ')');\n\n          }).on(\"end\", evnt => {\n               if (!drag_rect) return;\n\n               evnt.sourceEvent.preventDefault();\n               evnt.sourceEvent.stopPropagation();\n\n               let basepos = title_g.property('basepos') || 0;\n\n               title_g.property('shift_x', new_x)\n                      .property('shift_y', new_y);\n\n               this.titleOffset = (this.vertical ? basepos - new_x : new_y - basepos) * side;\n\n               if (curr_indx == 1) {\n                  this.titlePos = \"center\";\n               } else if (curr_indx == 0) {\n                  this.titlePos = \"left\";\n               } else {\n                  this.titlePos = \"right\";\n               }\n\n               this.changeAxisAttr(0, \"title_position\", this.titlePos, \"title_offset\", this.titleOffset / this.scalingSize);\n\n               drag_rect.remove();\n               drag_rect = null;\n            });\n\n      title_g.style(\"cursor\", \"move\").call(drag_move);\n   }\n\n   /** @summary checks if value inside graphical range, taking into account delta */\n   isInsideGrRange(pos, delta1, delta2) {\n      if (!delta1) delta1 = 0;\n      if (delta2 === undefined) delta2 = delta1;\n      if (this.gr_range < 0)\n         return (pos >= this.gr_range - delta2) && (pos <= delta1);\n      return (pos >= -delta1) && (pos <= this.gr_range + delta2);\n   }\n\n   /** @summary returns graphical range */\n   getGrRange(delta) {\n      if (!delta) delta = 0;\n      if (this.gr_range < 0)\n         return this.gr_range - delta;\n      return this.gr_range + delta;\n   }\n\n   /** @summary If axis direction is negative coordinates direction */\n   isReverseAxis() {\n      return !this.vertical !== (this.getGrRange() > 0);\n   }\n\n   /** @summary Draw axis ticks\n     * @private */\n   drawMainLine(axis_g) {\n      let ending = \"\";\n\n      if (this.endingSize && this.endingStyle) {\n         let sz = (this.gr_range > 0) ? -this.endingSize : this.endingSize,\n             sz7 = Math.round(sz*0.7);\n         sz = Math.round(sz);\n         if (this.vertical)\n            ending = `l${sz7},${sz}M0,${this.gr_range}l${-sz7},${sz}`;\n         else\n            ending = `l${sz},${sz7}M${this.gr_range},0l${sz},${-sz7}`;\n      }\n\n      axis_g.append(\"svg:path\")\n            .attr(\"d\",\"M0,0\" + (this.vertical ? \"v\" : \"h\") + this.gr_range + ending)\n            .call(this.lineatt.func)\n            .style('fill', ending ? \"none\" : null);\n   }\n\n   /** @summary Draw axis ticks\n     * @returns {Promise} with gaps on left and right side\n     * @private */\n   drawTicks(axis_g, side, main_draw) {\n      if (main_draw) this.ticks = [];\n\n      this.handle.reset();\n\n      let res = \"\", ticks_plusminus = 0;\n      if (this.ticksSide == \"both\") {\n         side = 1;\n         ticks_plusminus = 1;\n      }\n\n      while (this.handle.next(true)) {\n\n         let h1 = Math.round(this.ticksSize/4), h2 = 0;\n\n         if (this.handle.kind < 3)\n            h1 = Math.round(this.ticksSize/2);\n\n         let grpos = this.handle.grpos - this.axis_shift;\n\n         if ((this.startingSize || this.endingSize) && !this.isInsideGrRange(grpos, -Math.abs(this.startingSize), -Math.abs(this.endingSize))) continue;\n\n         if (this.handle.kind == 1) {\n            // if not showing labels, not show large tick\n            if ((this.kind == \"labels\") || (this.format(this.handle.tick,true) !== null)) h1 = this.ticksSize;\n\n            if (main_draw) this.ticks.push(grpos); // keep graphical positions of major ticks\n         }\n\n         if (ticks_plusminus > 0) {\n            h2 = -h1;\n         } else if (side < 0) {\n            h2 = -h1; h1 = 0;\n         } else {\n            h2 = 0;\n         }\n\n         res += this.vertical ? `M${h1},${grpos}H${h2}` : `M${grpos},${-h1}V${-h2}`;\n      }\n\n      if (res)\n         axis_g.append(\"svg:path\")\n               .attr(\"d\", res)\n               .style('stroke', this.ticksColor || this.lineatt.color)\n               .style('stroke-width', !this.ticksWidth || (this.ticksWidth == 1) ? null : this.ticksWidth);\n\n       let gap0 = Math.round(0.25*this.ticksSize), gap = Math.round(1.25*this.ticksSize);\n       return { \"-1\": (side > 0) || ticks_plusminus ? gap : gap0,\n                \"1\": (side < 0) || ticks_plusminus ? gap : gap0 };\n   }\n\n   /** @summary Performs labels drawing\n     * @returns {Promise} wwith gaps in both direction */\n   drawLabels(axis_g, side, gaps) {\n      let center_lbls = this.isCenteredLabels(),\n          rotate_lbls = this.labelsFont.angle != 0,\n          textscale = 1, maxtextlen = 0, lbls_tilt = false,\n          label_g = axis_g.append(\"svg:g\").attr(\"class\",\"axis_labels\").property('side', side),\n          lbl_pos = this.handle.lbl_pos || this.handle.major,\n          max_lbl_width = 0, max_lbl_height = 0;\n\n      // function called when text is drawn to analyze width, required to correctly scale all labels\n      function process_drawtext_ready(painter) {\n\n         max_lbl_width = Math.max(max_lbl_width, this.result_width);\n         max_lbl_height = Math.max(max_lbl_height, this.result_height);\n\n         let textwidth = this.result_width;\n\n         if (textwidth && ((!painter.vertical && !rotate_lbls) || (painter.vertical && rotate_lbls)) && !painter.log) {\n            let maxwidth = this.gap_before*0.45 + this.gap_after*0.45;\n            if (!this.gap_before) maxwidth = 0.9*this.gap_after; else\n            if (!this.gap_after) maxwidth = 0.9*this.gap_before;\n            textscale = Math.min(textscale, maxwidth / textwidth);\n         }\n\n         if ((textscale > 0.0001) && (textscale < 0.8) && !painter.vertical && !rotate_lbls && (maxtextlen > 5) && (side > 0))\n            lbls_tilt = true;\n\n         let scale = textscale * (lbls_tilt ? 3 : 1);\n         if ((scale > 0.0001) && (scale < 1))\n            painter.scaleTextDrawing(1/scale, label_g);\n      }\n\n      let lastpos = 0,\n          fix_offset = Math.round((this.vertical ? -side : side) * this.labelsOffset),\n          fix_coord = Math.round((this.vertical ? -side : side) * gaps[side]);\n\n      if (fix_offset)\n         label_g.attr('transform', this.vertical ? `translate(${fix_offset})` : `translate(0,${fix_offset})`);\n\n      label_g.property('fix_offset', fix_offset);\n\n      this.startTextDrawing(this.labelsFont, 'font', label_g);\n\n      for (let nmajor = 0; nmajor < lbl_pos.length; ++nmajor) {\n\n         let lbl = this.format(lbl_pos[nmajor], true);\n         if (lbl === null) continue;\n\n         let pos = Math.round(this.func(lbl_pos[nmajor])),\n             arg = { text: lbl, latex: 1, draw_g: label_g };\n\n         arg.gap_before = (nmajor > 0) ? Math.abs(Math.round(pos - this.func(lbl_pos[nmajor-1]))) : 0,\n         arg.gap_after = (nmajor < lbl_pos.length-1) ? Math.abs(Math.round(this.func(lbl_pos[nmajor+1])-pos)) : 0;\n\n         if (center_lbls) {\n            let gap = arg.gap_after || arg.gap_before;\n            pos = Math.round(pos - (this.vertical ? 0.5*gap : -0.5*gap));\n            if (!this.isInsideGrRange(pos, 5)) continue;\n         }\n\n         maxtextlen = Math.max(maxtextlen, lbl.length);\n\n         pos -= this.axis_shift;\n\n         if ((this.startingSize || this.endingSize) && !this.isInsideGrRange(pos, -Math.abs(this.startingSize), -Math.abs(this.endingSize))) continue;\n\n         if (this.vertical) {\n            arg.x = fix_coord;\n            arg.y = pos;\n            arg.align = rotate_lbls ? ((side<0) ? 23 : 20) : ((side<0) ? 12 : 32);\n         } else {\n            arg.x = pos;\n            arg.y = fix_coord;\n            arg.align = rotate_lbls ? ((side<0) ? 12 : 32) : ((side<0) ? 20 : 23);\n         }\n\n         arg.post_process = process_drawtext_ready;\n\n         this.drawText(arg);\n\n         if (lastpos && (pos!=lastpos) && ((this.vertical && !rotate_lbls) || (!this.vertical && rotate_lbls))) {\n            let axis_step = Math.abs(pos-lastpos);\n            textscale = Math.min(textscale, 0.9*axis_step/this.labelsFont.size);\n         }\n\n         lastpos = pos;\n      }\n\n      if (this.order)\n         this.drawText({ x: this.vertical ? side*5 : this.getGrRange(5),\n                         y: this.has_obstacle ? fix_coord : (this.vertical ? this.getGrRange(3) : -3*side),\n                         align: this.vertical ? ((side < 0) ? 30 : 10) : ((this.has_obstacle ^ (side < 0)) ? 13 : 10),\n                         latex: 1,\n                         text: '#times' + this.formatExp(10, this.order),\n                         draw_g: label_g\n         });\n\n      return this.finishTextDrawing(label_g).then(() => {\n\n        if (lbls_tilt)\n           label_g.selectAll(\"text\").each(function () {\n               let txt = d3_select(this), tr = txt.attr(\"transform\");\n               txt.attr(\"transform\", tr + \" rotate(25)\").style(\"text-anchor\", \"start\");\n           });\n\n         if (this.vertical) {\n            gaps[side] += Math.round(rotate_lbls ? 1.2*max_lbl_height : max_lbl_width + 0.4*this.labelsFont.size) - side*fix_offset;\n         } else {\n            let tilt_height = lbls_tilt ? max_lbl_width * Math.sin(25/180*Math.PI) + max_lbl_height * (Math.cos(25/180*Math.PI) + 0.2) : 0;\n\n            gaps[side] += Math.round(Math.max(rotate_lbls ? max_lbl_width + 0.4*this.labelsFont.size : 1.2*max_lbl_height, 1.2*this.labelsFont.size, tilt_height)) + fix_offset;\n         }\n\n         return gaps;\n      });\n   }\n\n   /** @summary Add zomming rect to axis drawing */\n   addZoomingRect(axis_g, side, lgaps) {\n      if (settings.Zooming && !this.disable_zooming && !isBatchMode()) {\n         let sz = Math.max(lgaps[side], 10),\n             d = this.vertical ? `v${this.gr_range}h${-side*sz}v${-this.gr_range}`\n                               : `h${this.gr_range}v${side*sz}h${-this.gr_range}`;\n         axis_g.append(\"svg:path\")\n               .attr(\"d\",`M0,0${d}z`)\n               .attr(\"class\", \"axis_zoom\")\n               .style(\"opacity\", \"0\")\n               .style(\"cursor\", \"crosshair\");\n      }\n   }\n\n   /** @summary Returns true if axis title is rotated */\n   isTitleRotated() {\n      return this.titleFont && (this.titleFont.angle != (this.vertical ? 270 : 0));\n   }\n\n   /** @summary Draw axis title */\n   drawTitle(axis_g, side, lgaps) {\n      if (!this.fTitle)\n         return Promise.resolve(this);\n\n      let title_g = axis_g.append(\"svg:g\").attr(\"class\", \"axis_title\"),\n          title_shift_x = 0, title_shift_y = 0, title_basepos = 0;\n\n      let rotated = this.isTitleRotated();\n\n      this.startTextDrawing(this.titleFont, 'font', title_g);\n\n      this.title_align = this.titleCenter ? \"middle\" : (this.titleOpposite ^ (this.isReverseAxis() || rotated) ? \"begin\" : \"end\");\n\n      if (this.vertical) {\n         title_basepos = Math.round(-side*(lgaps[side]));\n         title_shift_x = title_basepos + Math.round(-side*this.titleOffset);\n         title_shift_y = Math.round(this.titleCenter ? this.gr_range/2 : (this.titleOpposite ? 0 : this.gr_range));\n         this.drawText({ align: [this.title_align, ((side < 0) ^ rotated ? 'top' : 'bottom')],\n                         text: this.fTitle, draw_g: title_g });\n      } else {\n         title_shift_x = Math.round(this.titleCenter ? this.gr_range/2 : (this.titleOpposite ? 0 : this.gr_range));\n         title_basepos = Math.round(side*lgaps[side]);\n         title_shift_y = title_basepos + Math.round(side*this.titleOffset);\n         this.drawText({ align: [this.title_align, ((side > 0) ^ rotated ? 'top' : 'bottom')],\n                         text: this.fTitle, draw_g: title_g });\n      }\n\n      title_g.attr('transform', `translate(${title_shift_x},${title_shift_y})`)\n             .property('basepos', title_basepos)\n             .property('shift_x', title_shift_x)\n             .property('shift_y', title_shift_y);\n\n      this.addTitleDrag(title_g, side);\n\n      return this.finishTextDrawing(title_g);\n   }\n\n   /** @summary Extract major draw attributes, which are also used in interactive operations\n     * @private  */\n   extractDrawAttributes(scalingSize) {\n      let pp = this.getPadPainter(),\n          rect = pp?.getPadRect() || { width: 10, height: 10 };\n\n      this.scalingSize = scalingSize || (this.vertical ? rect.width : rect.height);\n\n      this.createv7AttLine(\"line_\");\n\n      this.optionUnlab = this.v7EvalAttr(\"labels_hide\", false);\n\n      this.endingStyle = this.v7EvalAttr(\"ending_style\", \"\");\n      this.endingSize = Math.round(this.v7EvalLength(\"ending_size\", this.scalingSize, this.endingStyle ? 0.02 : 0));\n      this.startingSize = Math.round(this.v7EvalLength(\"starting_size\", this.scalingSize, 0));\n      this.ticksSize = this.v7EvalLength(\"ticks_size\", this.scalingSize, 0.02);\n      this.ticksSide = this.v7EvalAttr(\"ticks_side\", \"normal\");\n      this.ticksColor = this.v7EvalColor(\"ticks_color\", \"\");\n      this.ticksWidth = this.v7EvalAttr(\"ticks_width\", 1);\n      if (scalingSize && (this.ticksSize < 0))\n         this.ticksSize = -this.ticksSize;\n\n      this.fTitle = this.v7EvalAttr(\"title_value\", \"\");\n\n      if (this.fTitle) {\n         this.titleFont = this.v7EvalFont(\"title\", { size: 0.03 }, scalingSize || pp?.getPadHeight() || 10);\n         this.titleFont.roundAngle(180, this.vertical ? 270 : 0);\n\n         this.titleOffset = this.v7EvalLength(\"title_offset\", this.scalingSize, 0);\n         this.titlePos = this.v7EvalAttr(\"title_position\", \"right\");\n         this.titleCenter = (this.titlePos == \"center\");\n         this.titleOpposite = (this.titlePos == \"left\");\n      } else {\n         delete this.titleFont;\n         delete this.titleOffset;\n         delete this.titlePos;\n      }\n\n      // TODO: remove old scaling factors for labels and ticks\n      this.labelsFont = this.v7EvalFont(\"labels\", { size: scalingSize ? 0.05 : 0.03 });\n      this.labelsFont.roundAngle(180);\n      if (this.labelsFont.angle) this.labelsFont.angle = 270;\n      this.labelsOffset = this.v7EvalLength(\"labels_offset\", this.scalingSize, 0);\n\n      if (scalingSize) this.ticksSize = this.labelsFont.size*0.5; // old lego scaling factor\n\n      if (this.maxTickSize && (this.ticksSize > this.maxTickSize))\n         this.ticksSize = this.maxTickSize;\n   }\n\n   /** @summary Performs axis drawing\n     * @returns {Promise} which resolved when drawing is completed */\n   drawAxis(layer, transform, side) {\n      let axis_g = layer;\n\n      if (side === undefined) side = 1;\n\n      if (!this.standalone) {\n         axis_g = layer.select(\".\" + this.name + \"_container\");\n         if (axis_g.empty())\n            axis_g = layer.append(\"svg:g\").attr(\"class\", this.name + \"_container\");\n         else\n            axis_g.selectAll(\"*\").remove();\n      }\n\n      axis_g.attr(\"transform\", transform || null);\n\n      this.extractDrawAttributes();\n      this.axis_g = axis_g;\n      this.side = side;\n\n      if (this.ticksSide == \"invert\") side = -side;\n\n      if (this.standalone)\n         this.drawMainLine(axis_g);\n\n      let optionNoopt = false,  // no ticks position optimization\n          optionInt = false,    // integer labels\n          optionNoexp = false;  // do not create exp\n\n      this.handle = this.createTicks(false, optionNoexp, optionNoopt, optionInt);\n\n      // first draw ticks\n      let tgaps = this.drawTicks(axis_g, side, true);\n\n      // draw labels\n      let labelsPromise = this.optionUnlab ? Promise.resolve(tgaps) : this.drawLabels(axis_g, side, tgaps);\n\n      return labelsPromise.then(lgaps => {\n         // when drawing axis on frame, zoom rect should be always outside\n         this.addZoomingRect(axis_g, this.standalone ? side : this.side, lgaps);\n\n         return this.drawTitle(axis_g, side, lgaps);\n      });\n   }\n\n   /** @summary Assign handler, which is called when axis redraw by interactive changes\n     * @desc Used by palette painter to reassign iteractive handlers\n     * @private */\n   setAfterDrawHandler(handler) {\n      this._afterDrawAgain = handler;\n   }\n\n   /** @summary Draw axis with the same settings, used by interactive changes */\n   drawAxisAgain() {\n      if (!this.axis_g || !this.side) return;\n\n      this.axis_g.selectAll(\"*\").remove();\n\n      this.extractDrawAttributes();\n\n      let side = this.side;\n      if (this.ticksSide == \"invert\") side = -side;\n\n      if (this.standalone)\n         this.drawMainLine(this.axis_g);\n\n      // first draw ticks\n      let tgaps = this.drawTicks(this.axis_g, side, false);\n\n      let labelsPromise = this.optionUnlab ? Promise.resolve(tgaps) : this.drawLabels(this.axis_g, side, tgaps);\n\n      return labelsPromise.then(lgaps => {\n         // when drawing axis on frame, zoom rect should be always outside\n         this.addZoomingRect(this.axis_g, this.standalone ? side : this.side, lgaps);\n\n         return this.drawTitle(this.axis_g, side, lgaps);\n      }).then(() => {\n         if (typeof this._afterDrawAgain == 'function')\n            this._afterDrawAgain();\n      });\n   }\n\n   /** @summary Draw axis again on opposite frame size */\n   drawAxisOtherPlace(layer, transform, side, only_ticks) {\n      let axis_g = layer.select(\".\" + this.name + \"_container2\");\n      if (axis_g.empty())\n         axis_g = layer.append(\"svg:g\").attr(\"class\",this.name + \"_container2\");\n      else\n         axis_g.selectAll(\"*\").remove();\n\n      axis_g.attr(\"transform\", transform || null);\n\n      if (this.ticksSide == \"invert\") side = -side;\n\n      // draw ticks again\n      let tgaps = this.drawTicks(axis_g, side, false);\n\n      // draw labels again\n      let promise = this.optionUnlab || only_ticks ? Promise.resolve(tgaps) : this.drawLabels(axis_g, side, tgaps);\n\n      return promise.then(lgaps => {\n         this.addZoomingRect(axis_g, side, lgaps);\n         return true;\n      });\n   }\n\n   /** @summary Change zooming in standalone mode */\n   zoomStandalone(min,max) {\n      this.changeAxisAttr(1, \"zoomMin\", min, \"zoomMax\", max);\n   }\n\n   /** @summary Redraw axis, used in standalone mode for RAxisDrawable */\n   redraw() {\n\n      let drawable = this.getObject(),\n          pp   = this.getPadPainter(),\n          pos  = pp.getCoordinate(drawable.fPos),\n          len  = pp.getPadLength(drawable.fVertical, drawable.fLength),\n          reverse = this.v7EvalAttr(\"reverse\", false),\n          labels_len = drawable.fLabels.length,\n          min = (labels_len > 0) ? 0 : this.v7EvalAttr(\"min\", 0),\n          max = (labels_len > 0) ? labels_len : this.v7EvalAttr(\"max\", 100);\n\n      // in vertical direction axis drawn in negative direction\n      if (drawable.fVertical) len -= pp.getPadHeight();\n\n      let smin = this.v7EvalAttr(\"zoomMin\"),\n          smax = this.v7EvalAttr(\"zoomMax\");\n      if (smin === smax) {\n         smin = min; smax = max;\n      }\n\n      this.configureAxis(\"axis\", min, max, smin, smax, drawable.fVertical, undefined, len, { reverse, labels: labels_len > 0 });\n\n      this.createG();\n\n      this.standalone = true;  // no need to clean axis container\n\n      let promise = this.drawAxis(this.draw_g, `translate(${pos.x},${pos.y})`);\n\n      if (isBatchMode()) return promise;\n\n      return promise.then(() => {\n         if (settings.ContextMenu)\n            this.draw_g.on(\"contextmenu\", evnt => {\n               evnt.stopPropagation(); // disable main context menu\n               evnt.preventDefault();  // disable browser context menu\n               createMenu(evnt, this).then(menu => {\n                 menu.add(\"header:RAxisDrawable\");\n                 menu.add(\"Unzoom\", () => this.zoomStandalone());\n                 this.fillAxisContextMenu(menu, \"\");\n                 menu.show();\n               });\n            });\n\n         addDragHandler(this, { x: pos.x, y: pos.y, width: this.vertical ? 10 : len, height: this.vertical ? len : 10,\n                                only_move: true, redraw: d => this.positionChanged(d) });\n\n         this.draw_g.on(\"dblclick\", () => this.zoomStandalone());\n\n         if (settings.ZoomWheel)\n            this.draw_g.on(\"wheel\", evnt => {\n               evnt.stopPropagation();\n               evnt.preventDefault();\n\n               let pos = d3_pointer(evnt, this.draw_g.node()),\n                   coord = this.vertical ? (1 - pos[1] / len) : pos[0] / len,\n                   item = this.analyzeWheelEvent(evnt, coord);\n\n               if (item.changed) this.zoomStandalone(item.min, item.max);\n            });\n      });\n   }\n\n   /** @summary Process interactive moving of the axis drawing */\n   positionChanged(drag) {\n      let drawable = this.getObject(),\n          rect = this.getPadPainter().getPadRect(),\n          xn = drag.x / rect.width,\n          yn = 1 - drag.y / rect.height;\n\n      drawable.fPos.fHoriz.fArr = [ xn ];\n      drawable.fPos.fVert.fArr = [ yn ];\n\n      this.submitCanvExec(`SetPos({${xn.toFixed(4)},${yn.toFixed(4)}})`);\n   }\n\n   /** @summary Change axis attribute, submit changes to server and redraw axis when specified\n     * @desc Arguments as redraw_mode, name1, value1, name2, value2, ... */\n   changeAxisAttr(redraw_mode) {\n      let changes = {}, indx = 1;\n      while (indx < arguments.length - 1) {\n         this.v7AttrChange(changes, arguments[indx], arguments[indx+1]);\n         this.v7SetAttr(arguments[indx], arguments[indx+1]);\n         indx += 2;\n      }\n      this.v7SendAttrChanges(changes, false); // do not invoke canvas update on the server\n      if (redraw_mode === 1) {\n         if (this.standalone)\n            this.redraw();\n         else\n            this.drawAxisAgain();\n      } else if (redraw_mode)\n         this.redrawPad();\n   }\n\n   /** @summary Change axis log scale kind */\n   changeAxisLog(arg) {\n      if ((this.kind == \"labels\") || (this.kind == 'time')) return;\n      if (arg === 'toggle') arg = this.log ? 0 : 10;\n\n      arg = parseFloat(arg);\n      if (Number.isFinite(arg)) this.changeAxisAttr(2, \"log\", arg, \"symlog\", 0);\n   }\n\n   /** @summary Provide context menu for axis */\n   fillAxisContextMenu(menu, kind) {\n\n      if (kind) menu.add(\"Unzoom\", () => this.getFramePainter().unzoom(kind));\n\n      menu.add(\"sub:Log scale\", () => this.changeAxisLog('toggle'));\n      menu.addchk(!this.log && !this.symlog, \"linear\", 0, arg => this.changeAxisLog(arg));\n      menu.addchk(this.log && !this.symlog && (this.logbase==10), \"log10\", () => this.changeAxisLog(10));\n      menu.addchk(this.log && !this.symlog && (this.logbase==2), \"log2\", () => this.changeAxisLog(2));\n      menu.addchk(this.log && !this.symlog && Math.abs(this.logbase - Math.exp(1)) < 0.1, \"ln\", () => this.changeAxisLog(Math.exp(1)));\n      menu.addchk(!this.log && this.symlog, \"symlog\", 0, () =>\n         menu.input(\"set symlog constant\", this.symlog || 10, \"float\").then(v => this.changeAxisAttr(2,\"symlog\", v)));\n      menu.add(\"endsub:\");\n\n      menu.add(\"Divisions\", () => menu.input(\"Set axis devisions\", this.v7EvalAttr(\"ndiv\", 508), \"int\").then(val => this.changeAxisAttr(2, \"ndiv\", val)));\n\n      menu.add(\"sub:Ticks\");\n      menu.addRColorMenu(\"color\", this.ticksColor, col => this.changeAxisAttr(1, \"ticks_color\", col));\n      menu.addSizeMenu(\"size\", 0, 0.05, 0.01, this.ticksSize/this.scalingSize, sz => this.changeAxisAttr(1, \"ticks_size\", sz));\n      menu.addSelectMenu(\"side\", [\"normal\", \"invert\", \"both\"], this.ticksSide, side => this.changeAxisAttr(1, \"ticks_side\", side));\n      menu.add(\"endsub:\");\n\n      if (!this.optionUnlab && this.labelsFont) {\n         menu.add(\"sub:Labels\");\n         menu.addSizeMenu(\"offset\", -0.05, 0.05, 0.01, this.labelsOffset/this.scalingSize,\n                         offset => this.changeAxisAttr(1, \"labels_offset\", offset));\n         menu.addRAttrTextItems(this.labelsFont, { noangle: 1, noalign: 1 },\n               change => this.changeAxisAttr(1, \"labels_\" + change.name, change.value));\n         menu.addchk(this.labelsFont.angle, \"rotate\", res => this.changeAxisAttr(1, \"labels_angle\", res ? 180 : 0));\n         menu.add(\"endsub:\");\n      }\n\n      menu.add(\"sub:Title\", () => menu.input(\"Enter axis title\", this.fTitle).then(t => this.changeAxisAttr(1, \"title_value\", t)));\n\n      if (this.fTitle) {\n         menu.addSizeMenu(\"offset\", -0.05, 0.05, 0.01, this.titleOffset/this.scalingSize,\n                           offset => this.changeAxisAttr(1, \"title_offset\", offset));\n\n         menu.addSelectMenu(\"position\", [\"left\", \"center\", \"right\"], this.titlePos,\n                            pos => this.changeAxisAttr(1, \"title_position\", pos));\n\n         menu.addchk(this.isTitleRotated(), \"rotate\", flag => this.changeAxisAttr(1, \"title_angle\", flag ? 180 : 0));\n\n         menu.addRAttrTextItems(this.titleFont, { noangle: 1, noalign: 1 }, change => this.changeAxisAttr(1, \"title_\" + change.name, change.value));\n      }\n\n      menu.add(\"endsub:\");\n      return true;\n   }\n\n} // class RAxisPainter\n\nexport { RAxisPainter };\n","import { gStyle, settings, create, isBatchMode } from '../core.mjs';\nimport { pointer as d3_pointer } from '../d3.mjs';\nimport { getSvgLineStyle } from '../base/TAttLineHandler.mjs';\nimport { TAxisPainter } from './TAxisPainter.mjs';\nimport { RAxisPainter } from './RAxisPainter.mjs';\nimport { FrameInteractive } from './TFramePainter.mjs';\nimport { RObjectPainter } from '../base/RObjectPainter.mjs';\n\n\n/**\n * @summary Painter class for RFrame, main handler for interactivity\n *\n * @private\n */\n\nclass RFramePainter extends RObjectPainter {\n\n   /** @summary constructor\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} tframe - RFrame object */\n   constructor(dom, tframe) {\n      super(dom, tframe, \"\", \"frame\");\n      this.mode3d = false;\n      this.xmin = this.xmax = 0; // no scale specified, wait for objects drawing\n      this.ymin = this.ymax = 0; // no scale specified, wait for objects drawing\n      this.axes_drawn = false;\n      this.keys_handler = null;\n      this.projection = 0; // different projections\n      this.v7_frame = true; // indicator of v7, used in interactive part\n   }\n\n   /** @summary Returns frame painter - object itself */\n   getFramePainter() { return this; }\n\n   /** @summary Returns true if it is ROOT6 frame\n    * @private */\n   is_root6() { return false; }\n\n   /** @summary Set active flag for frame - can block some events\n    * @private */\n   setFrameActive(on) {\n      this.enabledKeys = on && settings.HandleKeys ? true : false;\n      // used only in 3D mode\n      if (this.control)\n         this.control.enableKeys = this.enabledKeys;\n   }\n\n   setLastEventPos(pnt) {\n      // set position of last context menu event, can be\n      this.fLastEventPnt = pnt;\n   }\n\n   getLastEventPos() {\n      // return position of last event\n      return this.fLastEventPnt;\n   }\n\n   /** @summary Update graphical attributes */\n   updateAttributes(force) {\n      if ((this.fX1NDC === undefined) || (force && !this.modified_NDC)) {\n\n         let rect = this.getPadPainter().getPadRect();\n         this.fX1NDC = this.v7EvalLength(\"margins_left\", rect.width, settings.FrameNDC.fX1NDC) / rect.width;\n         this.fY1NDC = this.v7EvalLength(\"margins_bottom\", rect.height, settings.FrameNDC.fY1NDC) / rect.height;\n         this.fX2NDC = 1 - this.v7EvalLength(\"margins_right\", rect.width, 1-settings.FrameNDC.fX2NDC) / rect.width;\n         this.fY2NDC = 1 - this.v7EvalLength(\"margins_top\", rect.height, 1-settings.FrameNDC.fY2NDC) / rect.height;\n      }\n\n      if (!this.fillatt)\n         this.createv7AttFill();\n\n      this.createv7AttLine(\"border_\");\n   }\n\n   /** @summary Returns coordinates transformation func */\n   getProjectionFunc() {\n      switch (this.projection) {\n         // Aitoff2xy\n         case 1: return (l, b) => {\n            const DegToRad = Math.PI/180,\n                  alpha2 = (l/2)*DegToRad,\n                  delta  = b*DegToRad,\n                  r2     = Math.sqrt(2),\n                  f      = 2*r2/Math.PI,\n                  cdec   = Math.cos(delta),\n                  denom  = Math.sqrt(1. + cdec*Math.cos(alpha2));\n            return {\n               x: cdec*Math.sin(alpha2)*2.*r2/denom/f/DegToRad,\n               y: Math.sin(delta)*r2/denom/f/DegToRad\n            };\n         };\n         // mercator\n         case 2: return (l, b) => { return { x: l, y: Math.log(Math.tan((Math.PI/2 + b/180*Math.PI)/2)) }; };\n         // sinusoidal\n         case 3: return (l, b) => { return { x: l*Math.cos(b/180*Math.PI), y: b } };\n         // parabolic\n         case 4: return (l, b) => { return { x: l*(2.*Math.cos(2*b/180*Math.PI/3) - 1), y: 180*Math.sin(b/180*Math.PI/3) }; };\n      }\n   }\n\n   /** @summary Rcalculate frame ranges using specified projection functions\n     * @desc Not yet used in v7 */\n   recalculateRange(Proj) {\n      this.projection = Proj || 0;\n\n      if ((this.projection == 2) && ((this.scale_ymin <= -90 || this.scale_ymax >=90))) {\n         console.warn(\"Mercator Projection\", \"Latitude out of range\", this.scale_ymin, this.scale_ymax);\n         this.projection = 0;\n      }\n\n      let func = this.getProjectionFunc();\n      if (!func) return;\n\n      let pnts = [ func(this.scale_xmin, this.scale_ymin),\n                   func(this.scale_xmin, this.scale_ymax),\n                   func(this.scale_xmax, this.scale_ymax),\n                   func(this.scale_xmax, this.scale_ymin) ];\n      if (this.scale_xmin<0 && this.scale_xmax>0) {\n         pnts.push(func(0, this.scale_ymin));\n         pnts.push(func(0, this.scale_ymax));\n      }\n      if (this.scale_ymin<0 && this.scale_ymax>0) {\n         pnts.push(func(this.scale_xmin, 0));\n         pnts.push(func(this.scale_xmax, 0));\n      }\n\n      this.original_xmin = this.scale_xmin;\n      this.original_xmax = this.scale_xmax;\n      this.original_ymin = this.scale_ymin;\n      this.original_ymax = this.scale_ymax;\n\n      this.scale_xmin = this.scale_xmax = pnts[0].x;\n      this.scale_ymin = this.scale_ymax = pnts[0].y;\n\n      for (let n = 1; n < pnts.length; ++n) {\n         this.scale_xmin = Math.min(this.scale_xmin, pnts[n].x);\n         this.scale_xmax = Math.max(this.scale_xmax, pnts[n].x);\n         this.scale_ymin = Math.min(this.scale_ymin, pnts[n].y);\n         this.scale_ymax = Math.max(this.scale_ymax, pnts[n].y);\n      }\n   }\n\n   /** @summary Draw axes grids\n     * @desc Called immediately after axes drawing */\n   drawGrids() {\n      let layer = this.getFrameSvg().select(\".grid_layer\");\n\n      layer.selectAll(\".xgrid\").remove();\n      layer.selectAll(\".ygrid\").remove();\n\n      let h = this.getFrameHeight(),\n          w = this.getFrameWidth(),\n          gridx = this.v7EvalAttr(\"gridX\", false),\n          gridy = this.v7EvalAttr(\"gridY\", false),\n          grid_style = getSvgLineStyle(gStyle.fGridStyle),\n          grid_color = (gStyle.fGridColor > 0) ? this.getColor(gStyle.fGridColor) : \"black\";\n\n      if (this.x_handle)\n         this.x_handle.draw_grid = gridx;\n\n      // add a grid on x axis, if the option is set\n      if (this.x_handle && this.x_handle.draw_grid) {\n         let grid = \"\";\n         for (let n = 0; n < this.x_handle.ticks.length; ++n)\n            if (this.swap_xy)\n               grid += \"M0,\"+(h+this.x_handle.ticks[n])+\"h\"+w;\n            else\n               grid += \"M\"+this.x_handle.ticks[n]+\",0v\"+h;\n\n         if (grid.length > 0)\n            layer.append(\"svg:path\")\n                 .attr(\"class\", \"xgrid\")\n                 .attr(\"d\", grid)\n                 .style('stroke',grid_color)\n                 .style(\"stroke-width\", gStyle.fGridWidth)\n                 .style(\"stroke-dasharray\", grid_style);\n      }\n\n      if (this.y_handle)\n         this.y_handle.draw_grid = gridy;\n\n      // add a grid on y axis, if the option is set\n      if (this.y_handle && this.y_handle.draw_grid) {\n         let grid = \"\";\n         for (let n = 0; n < this.y_handle.ticks.length; ++n)\n            if (this.swap_xy)\n               grid += \"M\"+this.y_handle.ticks[n]+\",0v\"+h;\n            else\n               grid += \"M0,\"+(h+this.y_handle.ticks[n])+\"h\"+w;\n\n         if (grid.length > 0)\n          layer.append(\"svg:path\")\n               .attr(\"class\", \"ygrid\")\n               .attr(\"d\", grid)\n               .style('stroke', grid_color)\n               .style(\"stroke-width\", gStyle.fGridWidth)\n               .style(\"stroke-dasharray\", grid_style);\n      }\n   }\n\n   /** @summary Converts \"raw\" axis value into text */\n   axisAsText(axis, value) {\n      let handle = this[axis+\"_handle\"];\n\n      if (handle)\n         return handle.axisAsText(value, settings[axis.toUpperCase() + \"ValuesFormat\"]);\n\n      return value.toPrecision(4);\n   }\n\n   /** @summary Set axix range */\n   _setAxisRange(prefix, vmin, vmax) {\n      let nmin = prefix + \"min\", nmax = prefix + \"max\";\n      if (this[nmin] != this[nmax]) return;\n      let min = this.v7EvalAttr(prefix + \"_min\"),\n          max = this.v7EvalAttr(prefix + \"_max\");\n\n      if (min !== undefined) vmin = min;\n      if (max !== undefined) vmax = max;\n\n      if (vmin < vmax) {\n         this[nmin] = vmin;\n         this[nmax] = vmax;\n      }\n\n      let nzmin = \"zoom_\" + prefix + \"min\", nzmax = \"zoom_\" + prefix + \"max\";\n\n      if ((this[nzmin] == this[nzmax]) && !this.zoomChangedInteractive(prefix)) {\n         min = this.v7EvalAttr(prefix + \"_zoomMin\");\n         max = this.v7EvalAttr(prefix + \"_zoomMax\");\n\n         if ((min !== undefined) || (max !== undefined)) {\n            this[nzmin] = (min === undefined) ? this[nmin] : min;\n            this[nzmax] = (max === undefined) ? this[nmax] : max;\n         }\n      }\n   }\n\n   /** @summary Set axes ranges for drawing, check configured attributes if range already specified */\n   setAxesRanges(xaxis, xmin, xmax, yaxis, ymin, ymax, zaxis, zmin, zmax) {\n      if (this.axes_drawn) return;\n      this.xaxis = xaxis;\n      this._setAxisRange(\"x\", xmin, xmax);\n      this.yaxis = yaxis;\n      this._setAxisRange(\"y\", ymin, ymax);\n      this.zaxis = zaxis;\n      this._setAxisRange(\"z\", zmin, zmax);\n   }\n\n   /** @summary Set secondary axes ranges */\n   setAxes2Ranges(second_x, xaxis, xmin, xmax, second_y, yaxis, ymin, ymax) {\n      if (second_x) {\n         this.x2axis = xaxis;\n         this._setAxisRange(\"x2\", xmin, xmax);\n      }\n      if (second_y) {\n         this.y2axis = yaxis;\n         this._setAxisRange(\"y2\", ymin, ymax);\n      }\n   }\n\n   /** @summary Create x,y objects which maps user coordinates into pixels\n     * @desc Must be used only for v6 objects, see TFramePainter for more details\n     * @private */\n   createXY(opts) {\n      if (this.self_drawaxes) return;\n\n      this.cleanXY(); // remove all previous configurations\n\n      if (!opts) opts = {};\n\n      this.v6axes = true;\n      this.swap_xy = opts.swap_xy || false;\n      this.reverse_x = opts.reverse_x || false;\n      this.reverse_y = opts.reverse_y || false;\n\n      this.logx = this.v7EvalAttr(\"x_log\", 0);\n      this.logy = this.v7EvalAttr(\"y_log\", 0);\n\n      let w = this.getFrameWidth(), h = this.getFrameHeight();\n\n      this.scale_xmin = this.xmin;\n      this.scale_xmax = this.xmax;\n\n      this.scale_ymin = this.ymin;\n      this.scale_ymax = this.ymax;\n\n      if (opts.extra_y_space) {\n         let log_scale = this.swap_xy ? this.logx : this.logy;\n         if (log_scale && (this.scale_ymax > 0))\n            this.scale_ymax = Math.exp(Math.log(this.scale_ymax)*1.1);\n         else\n            this.scale_ymax += (this.scale_ymax - this.scale_ymin)*0.1;\n      }\n\n      // if (opts.check_pad_range) {\n         // take zooming out of pad or axis attributes - skip!\n      // }\n\n      if ((this.zoom_ymin == this.zoom_ymax) && (opts.zoom_ymin != opts.zoom_ymax) && !this.zoomChangedInteractive(\"y\")) {\n         this.zoom_ymin = opts.zoom_ymin;\n         this.zoom_ymax = opts.zoom_ymax;\n      }\n\n      if (this.zoom_xmin != this.zoom_xmax) {\n         this.scale_xmin = this.zoom_xmin;\n         this.scale_xmax = this.zoom_xmax;\n      }\n\n      if (this.zoom_ymin != this.zoom_ymax) {\n         this.scale_ymin = this.zoom_ymin;\n         this.scale_ymax = this.zoom_ymax;\n      }\n\n      let xaxis = this.xaxis, yaxis = this.yaxis;\n      if (xaxis?._typename != \"TAxis\") xaxis = create(\"TAxis\");\n      if (yaxis?._typename != \"TAxis\") yaxis = create(\"TAxis\");\n\n      this.x_handle = new TAxisPainter(this.getDom(), xaxis, true);\n      this.x_handle.setPadName(this.getPadName());\n      this.x_handle.optionUnlab = this.v7EvalAttr(\"x_labels_hide\", false);\n\n      this.x_handle.configureAxis(\"xaxis\", this.xmin, this.xmax, this.scale_xmin, this.scale_xmax, this.swap_xy, this.swap_xy ? [0,h] : [0,w],\n                                      { reverse: this.reverse_x,\n                                        log: this.swap_xy ? this.logy : this.logx,\n                                        symlog: this.swap_xy ? opts.symlog_y : opts.symlog_x,\n                                        logcheckmin: this.swap_xy,\n                                        logminfactor: 0.0001 });\n\n      this.x_handle.assignFrameMembers(this,\"x\");\n\n      this.y_handle = new TAxisPainter(this.getDom(), yaxis, true);\n      this.y_handle.setPadName(this.getPadName());\n      this.y_handle.optionUnlab = this.v7EvalAttr(\"y_labels_hide\", false);\n\n      this.y_handle.configureAxis(\"yaxis\", this.ymin, this.ymax, this.scale_ymin, this.scale_ymax, !this.swap_xy, this.swap_xy ? [0,w] : [0,h],\n                                      { reverse: this.reverse_y,\n                                        log: this.swap_xy ? this.logx : this.logy,\n                                        symlog: this.swap_xy ? opts.symlog_x : opts.symlog_y,\n                                        logcheckmin: (opts.ndim < 2) || this.swap_xy,\n                                        log_min_nz: opts.ymin_nz && (opts.ymin_nz < 0.01*this.ymax) ? 0.3 * opts.ymin_nz : 0,\n                                        logminfactor: 3e-4 });\n\n      this.y_handle.assignFrameMembers(this,\"y\");\n   }\n\n   /** @summary Identify if requested axes are drawn\n     * @desc Checks if x/y axes are drawn. Also if second side is already there */\n   hasDrawnAxes(second_x, second_y) {\n      return !second_x && !second_y ? this.axes_drawn : false;\n   }\n\n   /** @summary Draw configured axes on the frame\n     * @desc axes can be drawn only for main histogram  */\n   drawAxes() {\n\n      if (this.axes_drawn || (this.xmin == this.xmax) || (this.ymin == this.ymax))\n         return Promise.resolve(this.axes_drawn);\n\n      let ticksx = this.v7EvalAttr(\"ticksX\", 1),\n          ticksy = this.v7EvalAttr(\"ticksY\", 1),\n          sidex = 1, sidey = 1;\n\n      if (this.v7EvalAttr(\"swapX\", false)) sidex = -1;\n      if (this.v7EvalAttr(\"swapY\", false)) sidey = -1;\n\n      let w = this.getFrameWidth(), h = this.getFrameHeight();\n\n      if (!this.v6axes) {\n         // this is partially same as v6 createXY method\n\n         this.cleanupAxes();\n\n         this.swap_xy = false;\n\n         if (this.zoom_xmin != this.zoom_xmax) {\n            this.scale_xmin = this.zoom_xmin;\n            this.scale_xmax = this.zoom_xmax;\n         } else {\n            this.scale_xmin = this.xmin;\n            this.scale_xmax = this.xmax;\n         }\n\n         if (this.zoom_ymin != this.zoom_ymax) {\n            this.scale_ymin = this.zoom_ymin;\n            this.scale_ymax = this.zoom_ymax;\n         } else {\n            this.scale_ymin = this.ymin;\n            this.scale_ymax = this.ymax;\n         }\n\n         this.recalculateRange(0);\n\n         this.x_handle = new RAxisPainter(this.getDom(), this, this.xaxis, \"x_\");\n         this.x_handle.setPadName(this.getPadName());\n         this.x_handle.snapid = this.snapid;\n         this.x_handle.draw_swapside = (sidex < 0);\n         this.x_handle.draw_ticks = ticksx;\n\n         this.y_handle = new RAxisPainter(this.getDom(), this, this.yaxis, \"y_\");\n         this.y_handle.setPadName(this.getPadName());\n         this.y_handle.snapid = this.snapid;\n         this.y_handle.draw_swapside = (sidey < 0);\n         this.y_handle.draw_ticks = ticksy;\n\n         this.z_handle = new RAxisPainter(this.getDom(), this, this.zaxis, \"z_\");\n         this.z_handle.setPadName(this.getPadName());\n         this.z_handle.snapid = this.snapid;\n\n         this.x_handle.configureAxis(\"xaxis\", this.xmin, this.xmax, this.scale_xmin, this.scale_xmax, false, [0,w], w, { reverse: false });\n         this.x_handle.assignFrameMembers(this,\"x\");\n\n         this.y_handle.configureAxis(\"yaxis\", this.ymin, this.ymax, this.scale_ymin, this.scale_ymax, true, [h,0], -h, { reverse: false });\n         this.y_handle.assignFrameMembers(this,\"y\");\n\n         // only get basic properties like log scale\n         this.z_handle.configureZAxis(\"zaxis\", this);\n      }\n\n      let layer = this.getFrameSvg().select(\".axis_layer\");\n\n      this.x_handle.has_obstacle = false;\n\n      let draw_horiz = this.swap_xy ? this.y_handle : this.x_handle,\n          draw_vertical = this.swap_xy ? this.x_handle : this.y_handle,\n          pp = this.getPadPainter(), pr;\n\n      if (pp?._fast_drawing) {\n         pr = Promise.resolve(true); // do nothing\n      } else if (this.v6axes) {\n\n         // in v7 ticksx/y values shifted by 1 relative to v6\n         // In v7 ticksx==0 means no ticks, ticksx==1 equivalent to ==0 in v6\n\n         let can_adjust_frame = false, disable_x_draw = false, disable_y_draw = false;\n\n         draw_horiz.disable_ticks = (ticksx <= 0);\n         draw_vertical.disable_ticks = (ticksy <= 0);\n\n         let pr1 = draw_horiz.drawAxis(layer, w, h,\n                                   draw_horiz.invert_side ? undefined : `translate(0,${h})`,\n                                   (ticksx > 1) ? -h : 0, disable_x_draw,\n                                   undefined, false);\n\n         let pr2 =  draw_vertical.drawAxis(layer, w, h,\n                                      draw_vertical.invert_side ? `translate(${w})` : undefined,\n                                      (ticksy > 1) ? w : 0, disable_y_draw,\n                                      draw_vertical.invert_side ? 0 : this._frame_x, can_adjust_frame);\n\n         pr = Promise.all([pr1,pr2]).then(() => this.drawGrids());\n\n      } else {\n\n         let arr = [];\n\n         if (ticksx > 0)\n            arr.push(draw_horiz.drawAxis(layer, (sidex > 0) ? `translate(0,${h})` : \"\", sidex));\n\n         if (ticksy > 0)\n            arr.push(draw_vertical.drawAxis(layer, (sidey > 0) ? `translate(0,${h})` : `translate(${w},${h})`, sidey));\n\n         pr = Promise.all(arr).then(() => {\n            arr = [];\n            if (ticksx > 1)\n               arr.push(draw_horiz.drawAxisOtherPlace(layer, (sidex < 0) ? `translate(0,${h})` : \"\", -sidex, ticksx == 2));\n\n            if (ticksy > 1)\n               arr.push(draw_vertical.drawAxisOtherPlace(layer, (sidey < 0) ? `translate(0,${h})` : `translate(${w},${h})`, -sidey, ticksy == 2));\n            return Promise.all(arr);\n         }).then(() => this.drawGrids());\n      }\n\n      return pr.then(() => {\n         this.axes_drawn = true;\n         return true;\n      });\n   }\n\n   /** @summary Draw secondary configuread axes */\n   drawAxes2(second_x, second_y) {\n      let w = this.getFrameWidth(), h = this.getFrameHeight(),\n          layer = this.getFrameSvg().select(\".axis_layer\"),\n          pr1, pr2;\n\n      if (second_x) {\n         if (this.zoom_x2min != this.zoom_x2max) {\n            this.scale_x2min = this.zoom_x2min;\n            this.scale_x2max = this.zoom_x2max;\n         } else {\n           this.scale_x2min = this.x2min;\n           this.scale_x2max = this.x2max;\n         }\n         this.x2_handle = new RAxisPainter(this.getDom(), this, this.x2axis, \"x2_\");\n         this.x2_handle.setPadName(this.getPadName());\n         this.x2_handle.snapid = this.snapid;\n\n         this.x2_handle.configureAxis(\"x2axis\", this.x2min, this.x2max, this.scale_x2min, this.scale_x2max, false, [0,w], w, { reverse: false });\n         this.x2_handle.assignFrameMembers(this,\"x2\");\n\n         pr1 = this.x2_handle.drawAxis(layer, \"\", -1);\n      }\n\n      if (second_y) {\n         if (this.zoom_y2min != this.zoom_y2max) {\n            this.scale_y2min = this.zoom_y2min;\n            this.scale_y2max = this.zoom_y2max;\n         } else {\n            this.scale_y2min = this.y2min;\n            this.scale_y2max = this.y2max;\n         }\n\n         this.y2_handle = new RAxisPainter(this.getDom(), this, this.y2axis, \"y2_\");\n         this.y2_handle.setPadName(this.getPadName());\n         this.y2_handle.snapid = this.snapid;\n\n         this.y2_handle.configureAxis(\"y2axis\", this.y2min, this.y2max, this.scale_y2min, this.scale_y2max, true, [h,0], -h, { reverse: false });\n         this.y2_handle.assignFrameMembers(this,\"y2\");\n\n         pr2 = this.y2_handle.drawAxis(layer, `translate(${w},${h})`, -1);\n      }\n\n      return Promise.all([pr1,pr2]);\n   }\n\n   /** @summary Return functions to create x/y points based on coordinates\n     * @desc In default case returns frame painter itself\n     * @private */\n   getGrFuncs(second_x, second_y) {\n      let use_x2 = second_x && this.grx2,\n          use_y2 = second_y && this.gry2;\n      if (!use_x2 && !use_y2) return this;\n\n      return {\n         use_x2: use_x2,\n         grx: use_x2 ? this.grx2 : this.grx,\n         x_handle: use_x2 ? this.x2_handle : this.x_handle,\n         logx: use_x2 ? this.x2_handle.log : this.x_handle.log,\n         scale_xmin: use_x2 ? this.scale_x2min : this.scale_xmin,\n         scale_xmax: use_x2 ? this.scale_x2max : this.scale_xmax,\n         use_y2: use_y2,\n         gry: use_y2 ? this.gry2 : this.gry,\n         y_handle: use_y2 ? this.y2_handle : this.y_handle,\n         logy: use_y2 ? this.y2_handle.log : this.y_handle.log,\n         scale_ymin: use_y2 ? this.scale_y2min : this.scale_ymin,\n         scale_ymax: use_y2 ? this.scale_y2max : this.scale_ymax,\n         swap_xy: this.swap_xy,\n         fp: this,\n         revertAxis(name, v) {\n            if ((name == \"x\") && this.use_x2) name = \"x2\";\n            if ((name == \"y\") && this.use_y2) name = \"y2\";\n            return this.fp.revertAxis(name, v);\n         },\n         axisAsText(name, v) {\n            if ((name == \"x\") && this.use_x2) name = \"x2\";\n            if ((name == \"y\") && this.use_y2) name = \"y2\";\n            return this.fp.axisAsText(name, v);\n         }\n      };\n   }\n\n   /** @summary function called at the end of resize of frame\n     * @desc Used to update attributes on the server\n     * @private */\n   sizeChanged() {\n\n      let changes = {};\n      this.v7AttrChange(changes, \"margins_left\", this.fX1NDC);\n      this.v7AttrChange(changes, \"margins_bottom\", this.fY1NDC);\n      this.v7AttrChange(changes, \"margins_right\", 1 - this.fX2NDC);\n      this.v7AttrChange(changes, \"margins_top\", 1 - this.fY2NDC);\n      this.v7SendAttrChanges(changes, false); // do not invoke canvas update on the server\n\n      this.redrawPad();\n   }\n\n   /** @summary Remove all x/y functions\n     * @private */\n   cleanXY() {\n      // remove all axes drawings\n      let clean = (name,grname) => {\n         if (this[name]) {\n            this[name].cleanup();\n            delete this[name];\n         }\n         delete this[grname];\n      };\n\n      clean(\"x_handle\", \"grx\");\n      clean(\"y_handle\", \"gry\");\n      clean(\"z_handle\", \"grz\");\n      clean(\"x2_handle\", \"grx2\");\n      clean(\"y2_handle\", \"gry2\");\n\n      delete this.v6axes; // marker that v6 axes are used\n   }\n\n   /** @summary Remove all axes drawings\n     * @private */\n   cleanupAxes() {\n      this.cleanXY();\n\n      if (this.draw_g) {\n         this.draw_g.select(\".grid_layer\").selectAll(\"*\").remove();\n         this.draw_g.select(\".axis_layer\").selectAll(\"*\").remove();\n      }\n      this.axes_drawn = false;\n   }\n\n   /** @summary Removes all drawn elements of the frame\n     * @private */\n   cleanFrameDrawings() {\n      // cleanup all 3D drawings if any\n      if (typeof this.create3DScene === 'function')\n         this.create3DScene(-1);\n\n      this.cleanupAxes();\n\n      let clean = (name) => {\n         this[name+\"min\"] = this[name+\"max\"] = 0;\n         this[\"zoom_\"+name+\"min\"] = this[\"zoom_\"+name+\"max\"] = 0;\n         this[\"scale_\"+name+\"min\"] = this[\"scale_\"+name+\"max\"] = 0;\n      };\n\n      clean(\"x\");\n      clean(\"y\");\n      clean(\"z\");\n      clean(\"x2\");\n      clean(\"y2\");\n\n      if (this.draw_g) {\n         this.draw_g.select(\".main_layer\").selectAll(\"*\").remove();\n         this.draw_g.select(\".upper_layer\").selectAll(\"*\").remove();\n      }\n   }\n\n   /** @summary Fully cleanup frame\n     * @private */\n   cleanup() {\n\n      this.cleanFrameDrawings();\n\n      if (this.draw_g) {\n         this.draw_g.selectAll(\"*\").remove();\n         this.draw_g.on(\"mousedown\", null)\n                    .on(\"dblclick\", null)\n                    .on(\"wheel\", null)\n                    .on(\"contextmenu\", null)\n                    .property('interactive_set', null);\n      }\n\n      if (this.keys_handler) {\n         window.removeEventListener('keydown', this.keys_handler, false);\n         this.keys_handler = null;\n      }\n      delete this.enabledKeys;\n      delete this.self_drawaxes;\n\n      delete this.xaxis;\n      delete this.yaxis;\n      delete this.zaxis;\n      delete this.x2axis;\n      delete this.y2axis;\n\n      delete this.draw_g; // frame <g> element managet by the pad\n\n      delete this._click_handler;\n      delete this._dblclick_handler;\n\n      let pp = this.getPadPainter();\n      if (pp?.frame_painter_ref === this)\n         delete pp.frame_painter_ref;\n\n      super.cleanup();\n   }\n\n   /** @summary Redraw frame\n     * @private */\n   redraw() {\n\n      let pp = this.getPadPainter();\n      if (pp) pp.frame_painter_ref = this;\n\n      // first update all attributes from objects\n      this.updateAttributes();\n\n      let rect = pp ? pp.getPadRect() : { width: 10, height: 10 },\n          lm = Math.round(rect.width * this.fX1NDC),\n          w = Math.round(rect.width * (this.fX2NDC - this.fX1NDC)),\n          tm = Math.round(rect.height * (1 - this.fY2NDC)),\n          h = Math.round(rect.height * (this.fY2NDC - this.fY1NDC)),\n          rotate = false, fixpos = false, trans;\n\n      if (pp && pp.options) {\n         if (pp.options.RotateFrame) rotate = true;\n         if (pp.options.FixFrame) fixpos = true;\n      }\n\n      if (rotate) {\n         trans = `rotate(-90,${lm},${tm}) translate(${lm-h},${tm})`;\n         let d = w; w = h; h = d;\n      } else {\n         trans = `translate(${lm},${tm})`;\n      }\n\n      // update values here to let access even when frame is not really updated\n      this._frame_x = lm;\n      this._frame_y = tm;\n      this._frame_width = w;\n      this._frame_height = h;\n      this._frame_rotate = rotate;\n      this._frame_fixpos = fixpos;\n\n      if (this.mode3d) return this; // no need for real draw in mode3d\n\n      // this is svg:g object - container for every other items belonging to frame\n      this.draw_g = this.getFrameSvg();\n\n      let top_rect, main_svg;\n\n      if (this.draw_g.empty()) {\n\n         this.draw_g = this.getLayerSvg(\"primitives_layer\").append(\"svg:g\").attr(\"class\", \"root_frame\");\n\n         if (!isBatchMode())\n            this.draw_g.append(\"svg:title\").text(\"\");\n\n         top_rect = this.draw_g.append(\"svg:rect\");\n\n         // append for the moment three layers - for drawing and axis\n         this.draw_g.append('svg:g').attr('class','grid_layer');\n\n         main_svg = this.draw_g.append('svg:svg')\n                           .attr('class','main_layer')\n                           .attr(\"x\", 0)\n                           .attr(\"y\", 0)\n                           .attr('overflow', 'hidden');\n\n         this.draw_g.append('svg:g').attr('class','axis_layer');\n         this.draw_g.append('svg:g').attr('class','upper_layer');\n      } else {\n         top_rect = this.draw_g.select(\"rect\");\n         main_svg = this.draw_g.select(\".main_layer\");\n      }\n\n      this.axes_drawn = false;\n\n      this.draw_g.attr(\"transform\", trans);\n\n      top_rect.attr(\"x\", 0)\n              .attr(\"y\", 0)\n              .attr(\"width\", w)\n              .attr(\"height\", h)\n              .attr(\"rx\", this.lineatt.rx || null)\n              .attr(\"ry\", this.lineatt.ry || null)\n              .call(this.fillatt.func)\n              .call(this.lineatt.func);\n\n      main_svg.attr(\"width\", w)\n              .attr(\"height\", h)\n              .attr(\"viewBox\", `0 0 ${w} ${h}`);\n\n      let pr = Promise.resolve(true);\n\n      if (this.v7EvalAttr(\"drawAxes\")) {\n         this.self_drawaxes = true;\n         this.setAxesRanges();\n         pr = this.drawAxes().then(() => this.addInteractivity());\n      }\n\n      return pr.then(() => {\n         if (!isBatchMode()) {\n            top_rect.style(\"pointer-events\", \"visibleFill\");  // let process mouse events inside frame\n\n            FrameInteractive.assign(this);\n            this.addBasicInteractivity();\n         }\n\n         return this;\n      });\n   }\n\n   /** @summary Returns frame width */\n   getFrameWidth() { return this._frame_width || 0; }\n\n   /** @summary Returns frame height */\n   getFrameHeight() { return this._frame_height || 0; }\n\n   /** @summary Returns frame rectangle plus extra info for hint display */\n   getFrameRect() {\n      return {\n         x: this._frame_x || 0,\n         y: this._frame_y || 0,\n         width: this.getFrameWidth(),\n         height: this.getFrameHeight(),\n         transform: this.draw_g ? this.draw_g.attr(\"transform\") : \"\",\n         hint_delta_x: 0,\n         hint_delta_y: 0\n      }\n   }\n\n   /** @summary Returns palette associated with frame */\n   getHistPalette() {\n      return this.getPadPainter().getHistPalette();\n   }\n\n   /** @summary Configure user-defined click handler\n     * @desc Function will be called every time when frame click was perfromed\n     * As argument, tooltip object with selected bins will be provided\n     * If handler function returns true, default handling of click will be disabled */\n   configureUserClickHandler(handler) {\n      this._click_handler = handler && (typeof handler == 'function') ? handler : null;\n   }\n\n   /** @summary Configure user-defined dblclick handler\n     * @desc Function will be called every time when double click was called\n     * As argument, tooltip object with selected bins will be provided\n     * If handler function returns true, default handling of dblclick (unzoom) will be disabled */\n   configureUserDblclickHandler(handler) {\n      this._dblclick_handler = handler && (typeof handler == 'function') ? handler : null;\n   }\n\n   /** @summary function can be used for zooming into specified range\n     * @desc if both limits for each axis 0 (like xmin==xmax==0), axis will be unzoomed\n     * @returns {Promise} with boolean flag if zoom operation was performed */\n   zoom(xmin, xmax, ymin, ymax, zmin, zmax) {\n\n      // disable zooming when axis conversion is enabled\n      if (this.projection) return Promise.resolve(false);\n\n      if (xmin===\"x\") { xmin = xmax; xmax = ymin; ymin = undefined; } else\n      if (xmin===\"y\") { ymax = ymin; ymin = xmax; xmin = xmax = undefined; } else\n      if (xmin===\"z\") { zmin = xmax; zmax = ymin; xmin = xmax = ymin = undefined; }\n\n      let zoom_x = (xmin !== xmax), zoom_y = (ymin !== ymax), zoom_z = (zmin !== zmax),\n          unzoom_x = false, unzoom_y = false, unzoom_z = false;\n\n      if (zoom_x) {\n         let cnt = 0;\n         if (xmin <= this.xmin) { xmin = this.xmin; cnt++; }\n         if (xmax >= this.xmax) { xmax = this.xmax; cnt++; }\n         if (cnt === 2) { zoom_x = false; unzoom_x = true; }\n      } else {\n         unzoom_x = (xmin === xmax) && (xmin === 0);\n      }\n\n      if (zoom_y) {\n         let cnt = 0;\n         if (ymin <= this.ymin) { ymin = this.ymin; cnt++; }\n         if (ymax >= this.ymax) { ymax = this.ymax; cnt++; }\n         if (cnt === 2) { zoom_y = false; unzoom_y = true; }\n      } else {\n         unzoom_y = (ymin === ymax) && (ymin === 0);\n      }\n\n      if (zoom_z) {\n         let cnt = 0;\n         // if (this.logz && this.ymin_nz && this.getDimension()===2) main_zmin = 0.3*this.ymin_nz;\n         if (zmin <= this.zmin) { zmin = this.zmin; cnt++; }\n         if (zmax >= this.zmax) { zmax = this.zmax; cnt++; }\n         if (cnt === 2) { zoom_z = false; unzoom_z = true; }\n      } else {\n         unzoom_z = (zmin === zmax) && (zmin === 0);\n      }\n\n      let changed = false,\n          r_x = \"\", r_y = \"\", r_z = \"\", is_any_check = false,\n         req = {\n            _typename: \"ROOT::Experimental::RFrame::RUserRanges\",\n            values: [0, 0, 0, 0, 0, 0],\n            flags: [false, false, false, false, false, false]\n         };\n\n      const checkZooming = (painter, force) => {\n         if (!force && (typeof painter.canZoomInside != 'function')) return;\n\n         is_any_check = true;\n\n         if (zoom_x && (force || painter.canZoomInside(\"x\", xmin, xmax))) {\n            this.zoom_xmin = xmin;\n            this.zoom_xmax = xmax;\n            changed = true; r_x = \"0\";\n            zoom_x = false;\n            req.values[0] = xmin; req.values[1] = xmax;\n            req.flags[0] = req.flags[1] = true;\n         }\n         if (zoom_y && (force || painter.canZoomInside(\"y\", ymin, ymax))) {\n            this.zoom_ymin = ymin;\n            this.zoom_ymax = ymax;\n            changed = true; r_y = \"1\";\n            zoom_y = false;\n            req.values[2] = ymin; req.values[3] = ymax;\n            req.flags[2] = req.flags[3] = true;\n         }\n         if (zoom_z && (force || painter.canZoomInside(\"z\", zmin, zmax))) {\n            this.zoom_zmin = zmin;\n            this.zoom_zmax = zmax;\n            changed = true; r_z = \"2\";\n            zoom_z = false;\n            req.values[4] = zmin; req.values[5] = zmax;\n            req.flags[4] = req.flags[5] = true;\n         }\n      };\n\n      // first process zooming (if any)\n      if (zoom_x || zoom_y || zoom_z)\n         this.forEachPainter(painter => checkZooming(painter));\n\n      // force zooming when no any other painter can verify zoom range\n      if (!is_any_check && this.self_drawaxes)\n         checkZooming(null, true);\n\n      // and process unzoom, if any\n      if (unzoom_x || unzoom_y || unzoom_z) {\n         if (unzoom_x) {\n            if (this.zoom_xmin !== this.zoom_xmax) { changed = true; r_x = \"0\"; }\n            this.zoom_xmin = this.zoom_xmax = 0;\n            req.values[0] = req.values[1] = -1;\n         }\n         if (unzoom_y) {\n            if (this.zoom_ymin !== this.zoom_ymax) { changed = true; r_y = \"1\"; }\n            this.zoom_ymin = this.zoom_ymax = 0;\n            req.values[2] = req.values[3] = -1;\n         }\n         if (unzoom_z) {\n            if (this.zoom_zmin !== this.zoom_zmax) { changed = true; r_z = \"2\"; }\n            this.zoom_zmin = this.zoom_zmax = 0;\n            req.values[4] = req.values[5] = -1;\n         }\n      }\n\n      if (!changed) return Promise.resolve(false);\n\n      if (this.v7NormalMode())\n         this.v7SubmitRequest(\"zoom\", { _typename: \"ROOT::Experimental::RFrame::RZoomRequest\", ranges: req });\n\n      return this.interactiveRedraw(\"pad\", \"zoom\" + r_x + r_y + r_z).then(() => true);\n   }\n\n   /** @summary Provide zooming of single axis\n     * @desc One can specify names like x/y/z but also second axis x2 or y2 */\n   zoomSingle(name, vmin, vmax) {\n\n      let names = [\"x\",\"y\",\"z\",\"x2\",\"y2\"], indx = names.indexOf(name);\n\n      // disable zooming when axis conversion is enabled\n      if (this.projection || !this[name+\"_handle\"] || (indx < 0))\n         return Promise.resolve(false);\n\n      let zoom_v = (vmin !== vmax), unzoom_v = false;\n\n      if (zoom_v) {\n         let cnt = 0;\n         if (vmin <= this[name+\"min\"]) { vmin = this[name+\"min\"]; cnt++; }\n         if (vmax >= this[name+\"max\"]) { vmax = this[name+\"max\"]; cnt++; }\n         if (cnt === 2) { zoom_v = false; unzoom_v = true; }\n      } else {\n         unzoom_v = (vmin === vmax) && (vmin === 0);\n      }\n\n      let changed = false, is_any_check = false,\n          req = {\n             _typename: \"ROOT::Experimental::RFrame::RUserRanges\",\n             values: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n             flags: [false, false, false, false, false, false, false, false, false, false]\n          };\n\n      let checkZooming = (painter, force) => {\n         if (!force && (typeof painter?.canZoomInside != 'function')) return;\n\n         is_any_check = true;\n\n         if (zoom_v && (force || painter.canZoomInside(name[0], vmin, vmax))) {\n            this[\"zoom_\" + name + \"min\"] = vmin;\n            this[\"zoom_\" + name + \"max\"] = vmax;\n            changed = true;\n            zoom_v = false;\n            req.values[indx*2] = vmin; req.values[indx*2+1] = vmax;\n            req.flags[indx*2] = req.flags[indx*2+1] = true;\n         }\n      };\n\n      // first process zooming (if any)\n      if (zoom_v)\n         this.forEachPainter(painter => checkZooming(painter));\n\n      // force zooming when no any other painter can verify zoom range\n      if (!is_any_check && this.self_drawaxes)\n         checkZooming(null, true);\n\n      if (unzoom_v) {\n         if (this[`zoom_${name}min`] !== this[`zoom_${name}max`]) changed = true;\n         this[`zoom_${name}min`] = this[`zoom_${name}max`] = 0;\n         req.values[indx*2] = req.values[indx*2+1] = -1;\n      }\n\n      if (!changed) return Promise.resolve(false);\n\n      if (this.v7NormalMode())\n         this.v7SubmitRequest(\"zoom\", { _typename: \"ROOT::Experimental::RFrame::RZoomRequest\", ranges: req });\n\n      return this.interactiveRedraw(\"pad\", \"zoom\" + indx).then(() => true);\n   }\n\n   /** @summary Checks if specified axis zoomed */\n   isAxisZoomed(axis) {\n      return this['zoom_'+axis+'min'] !== this['zoom_'+axis+'max'];\n   }\n\n   /** @summary Unzoom specified axes\n     * @returns {Promise} with boolean flag if zoom is changed */\n   unzoom(dox, doy, doz) {\n      if (dox == \"all\")\n         return this.unzoom(\"x2\").then(() => this.unzoom(\"y2\")).then(() => this.unzoom(\"xyz\"));\n\n      if ((dox == \"x2\") || (dox == \"y2\"))\n         return this.zoomSingle(dox, 0, 0).then(changed => {\n            if (changed) this.zoomChangedInteractive(dox, \"unzoom\");\n            return changed;\n         });\n\n      if (typeof dox === 'undefined') { dox = doy = doz = true; } else\n      if (typeof dox === 'string') { doz = dox.indexOf(\"z\") >= 0; doy = dox.indexOf(\"y\") >= 0; dox = dox.indexOf(\"x\") >= 0; }\n\n      return this.zoom(dox ? 0 : undefined, dox ? 0 : undefined,\n                       doy ? 0 : undefined, doy ? 0 : undefined,\n                       doz ? 0 : undefined, doz ? 0 : undefined).then(changed => {\n\n         if (changed && dox) this.zoomChangedInteractive(\"x\", \"unzoom\");\n         if (changed && doy) this.zoomChangedInteractive(\"y\", \"unzoom\");\n         if (changed && doz) this.zoomChangedInteractive(\"z\", \"unzoom\");\n\n         return changed;\n      });\n   }\n\n   /** @summary Mark/check if zoom for specific axis was changed interactively\n     * @private */\n   zoomChangedInteractive(axis, value) {\n      if (axis == 'reset') {\n         this.zoom_changed_x = this.zoom_changed_y = this.zoom_changed_z = undefined;\n         return;\n      }\n      if (!axis || axis == 'any')\n         return this.zoom_changed_x || this.zoom_changed_y  || this.zoom_changed_z;\n\n      if ((axis !== 'x') && (axis !== 'y') && (axis !== 'z')) return;\n\n      let fld = \"zoom_changed_\" + axis;\n      if (value === undefined) return this[fld];\n\n      if (value === 'unzoom') {\n         // special handling of unzoom, only if was never changed before flag set to true\n         this[fld] = (this[fld] === undefined);\n         return;\n      }\n\n      if (value) this[fld] = true;\n   }\n\n   /** @summary Fill menu for frame when server is not there */\n   fillObjectOfflineMenu(menu, kind) {\n      if ((kind!=\"x\") && (kind!=\"y\")) return;\n\n      menu.add(\"Unzoom\", () => this.unzoom(kind));\n\n      //if (this[kind+\"_kind\"] == \"normal\")\n      //   menu.addchk(this[\"log\"+kind], \"SetLog\"+kind, this.toggleAxisLog.bind(this, kind));\n\n      // here should be all axes attributes in offline\n   }\n\n   /** @summary Set grid drawing for specified axis */\n   changeFrameAttr(attr, value) {\n      let changes = {};\n      this.v7AttrChange(changes, attr, value);\n      this.v7SetAttr(attr, value);\n      this.v7SendAttrChanges(changes, false); // do not invoke canvas update on the server\n      this.redrawPad();\n   }\n\n   /** @summary Fill context menu */\n   fillContextMenu(menu, kind, /* obj */) {\n\n      // when fill and show context menu, remove all zooming\n\n      if ((kind==\"x\") || (kind==\"y\") || (kind==\"x2\") || (kind==\"y2\")) {\n         let handle = this[kind+\"_handle\"];\n         if (!handle) return false;\n         menu.add(\"header: \" + kind.toUpperCase() + \" axis\");\n         return handle.fillAxisContextMenu(menu, kind);\n      }\n\n      let alone = menu.size()==0;\n\n      if (alone)\n         menu.add(\"header:Frame\");\n      else\n         menu.add(\"separator\");\n\n      if (this.zoom_xmin !== this.zoom_xmax)\n         menu.add(\"Unzoom X\", () => this.unzoom(\"x\"));\n      if (this.zoom_ymin !== this.zoom_ymax)\n         menu.add(\"Unzoom Y\", () => this.unzoom(\"y\"));\n      if (this.zoom_zmin !== this.zoom_zmax)\n         menu.add(\"Unzoom Z\", () => this.unzoom(\"z\"));\n      if (this.zoom_x2min !== this.zoom_x2max)\n         menu.add(\"Unzoom X2\", () => this.unzoom(\"x2\"));\n      if (this.zoom_y2min !== this.zoom_y2max)\n         menu.add(\"Unzoom Y2\", () => this.unzoom(\"y2\"));\n      menu.add(\"Unzoom all\", () => this.unzoom(\"all\"));\n\n      menu.add(\"separator\");\n\n      menu.addchk(this.isTooltipAllowed(), \"Show tooltips\", () => this.setTooltipAllowed(\"toggle\"));\n\n      if (this.x_handle)\n         menu.addchk(this.x_handle.draw_grid, \"Grid x\", flag => this.changeFrameAttr(\"gridX\", flag));\n      if (this.y_handle)\n         menu.addchk(this.y_handle.draw_grid, \"Grid y\", flag => this.changeFrameAttr(\"gridY\", flag));\n      if (this.x_handle && !this.x2_handle)\n         menu.addchk(this.x_handle.draw_swapside, \"Swap x\", flag => this.changeFrameAttr(\"swapX\", flag));\n      if (this.y_handle && !this.y2_handle)\n         menu.addchk(this.y_handle.draw_swapside, \"Swap y\", flag => this.changeFrameAttr(\"swapY\", flag));\n      if (this.x_handle && !this.x2_handle) {\n         menu.add(\"sub:Ticks x\");\n         menu.addchk(this.x_handle.draw_ticks == 0, \"off\", () => this.changeFrameAttr(\"ticksX\", 0));\n         menu.addchk(this.x_handle.draw_ticks == 1, \"normal\", () => this.changeFrameAttr(\"ticksX\", 1));\n         menu.addchk(this.x_handle.draw_ticks == 2, \"ticks on both sides\", () => this.changeFrameAttr(\"ticksX\", 2));\n         menu.addchk(this.x_handle.draw_ticks == 3, \"labels on both sides\", () => this.changeFrameAttr(\"ticksX\", 3));\n         menu.add(\"endsub:\");\n       }\n      if (this.y_handle && !this.y2_handle) {\n         menu.add(\"sub:Ticks y\");\n         menu.addchk(this.y_handle.draw_ticks == 0, \"off\", () => this.changeFrameAttr(\"ticksY\", 0));\n         menu.addchk(this.y_handle.draw_ticks == 1, \"normal\", () => this.changeFrameAttr(\"ticksY\", 1));\n         menu.addchk(this.y_handle.draw_ticks == 2, \"ticks on both sides\", () => this.changeFrameAttr(\"ticksY\", 2));\n         menu.addchk(this.y_handle.draw_ticks == 3, \"labels on both sides\", () => this.changeFrameAttr(\"ticksY\", 3));\n         menu.add(\"endsub:\");\n       }\n\n      menu.addAttributesMenu(this, alone ? \"\" : \"Frame \");\n      menu.add(\"separator\");\n      menu.add(\"Save as frame.png\", () => this.getPadPainter().saveAs(\"png\", 'frame', 'frame.png'));\n      menu.add(\"Save as frame.svg\", () => this.getPadPainter().saveAs(\"svg\", 'frame', 'frame.svg'));\n\n      return true;\n   }\n\n   /** @summary Convert graphical coordinate into axis value */\n   revertAxis(axis, pnt) {\n      let handle = this[axis+\"_handle\"];\n      return handle ? handle.revertPoint(pnt) : 0;\n   }\n\n   /** @summary Show axis status message\n     * @desc method called normally when mouse enter main object element\n     * @private */\n   showAxisStatus(axis_name, evnt) {\n\n      let taxis = null, hint_name = axis_name, hint_title = \"axis\",\n          m = d3_pointer(evnt, this.getFrameSvg().node()), id = (axis_name==\"x\") ? 0 : 1;\n\n      if (taxis) { hint_name = taxis.fName; hint_title = taxis.fTitle || \"axis object\"; }\n\n      if (this.swap_xy) id = 1-id;\n\n      let axis_value = this.revertAxis(axis_name, m[id]);\n\n      this.showObjectStatus(hint_name, hint_title, axis_name + \" : \" + this.axisAsText(axis_name, axis_value), Math.round(m[0])+\",\"+Math.round(m[1]));\n   }\n\n   /** @summary Add interactive keys handlers\n    * @private */\n   addKeysHandler() {\n      if (isBatchMode()) return;\n      FrameInteractive.assign(this);\n      this.addFrameKeysHandler();\n   }\n\n   /** @summary Add interactive functionality to the frame\n    * @private */\n   addInteractivity(for_second_axes) {\n\n      if (isBatchMode() || (!settings.Zooming && !settings.ContextMenu))\n         return true;\n      FrameInteractive.assign(this);\n      return this.addFrameInteractivity(for_second_axes);\n   }\n\n   /** @summary Set selected range back to pad object - to be implemented\n     * @private */\n   setRootPadRange(/* pad, is3d */) {\n      // TODO: change of pad range and send back to root application\n   }\n\n   /** @summary Toggle log scale on the specified axes */\n   toggleAxisLog(axis) {\n      let handle = this[axis+\"_handle\"];\n      if (handle) handle.changeAxisLog('toggle');\n   }\n\n} // class RFramePainter\n\nexport { RFramePainter };\n","import { gStyle, settings, constants, internals, addMethods, isPromise, isBatchMode, btoa_func } from '../core.mjs';\nimport { pointer as d3_pointer } from '../d3.mjs';\nimport { ColorPalette, addColor, getRootColors } from '../base/colors.mjs';\nimport { RObjectPainter } from '../base/RObjectPainter.mjs';\nimport { getElementRect, getAbsPosInCanvas, DrawOptions, compressSVG } from '../base/BasePainter.mjs';\nimport { selectActivePad, getActivePad } from '../base/ObjectPainter.mjs';\nimport { registerForResize, saveFile } from '../gui/utils.mjs';\nimport { BrowserLayout } from '../gui/display.mjs';\nimport { createMenu, closeMenu } from '../gui/menu.mjs';\nimport { PadButtonsHandler } from './TPadPainter.mjs';\n\n\n/**\n * @summary Painter class for RPad\n *\n * @private\n */\n\nclass RPadPainter extends RObjectPainter {\n\n   /** @summary constructor */\n   constructor(dom, pad, iscan) {\n      super(dom, pad, \"\", \"pad\");\n      this.pad = pad;\n      this.iscan = iscan; // indicate if working with canvas\n      this.this_pad_name = \"\";\n      if (!this.iscan && (pad !== null)) {\n         if (pad.fObjectID)\n            this.this_pad_name = \"pad\" + pad.fObjectID; // use objectid as padname\n         else\n            this.this_pad_name = \"ppp\" + internals.id_counter++; // artificical name\n      }\n      this.painters = []; // complete list of all painters in the pad\n      this.has_canvas = true;\n      this.forEachPainter = this.forEachPainterInPad;\n   }\n\n   /** @summary Indicates that is not Root6 pad painter\n    * @private */\n   isRoot6() { return false; }\n\n  /** @summary Returns SVG element for the pad itself\n    * @private */\n   svg_this_pad() {\n      return this.getPadSvg(this.this_pad_name);\n   }\n\n   /** @summary Returns main painter on the pad\n     * @desc Typically main painter is TH1/TH2 object which is drawing axes\n    * @private */\n   getMainPainter() {\n      return this.main_painter_ref || null;\n   }\n\n   /** @summary Assign main painter on the pad\n    * @private */\n   setMainPainter(painter, force) {\n      if (!this.main_painter_ref || force)\n         this.main_painter_ref = painter;\n   }\n\n   /** @summary cleanup pad and all primitives inside */\n   cleanup() {\n      if (this._doing_draw)\n         console.error('pad drawing is not completed when cleanup is called');\n\n      this.painters.forEach(p => p.cleanup());\n\n      let svg_p = this.svg_this_pad();\n      if (!svg_p.empty()) {\n         svg_p.property('pad_painter', null);\n         if (!this.iscan) svg_p.remove();\n      }\n\n      delete this.main_painter_ref;\n      delete this.frame_painter_ref;\n      delete this.pads_cache;\n      delete this._pad_x;\n      delete this._pad_y;\n      delete this._pad_width;\n      delete this._pad_height;\n      delete this._doing_draw;\n      delete this._dfltRFont;\n\n      this.painters = [];\n      this.pad = null;\n      this.draw_object = null;\n      this.pad_frame = null;\n      this.this_pad_name = undefined;\n      this.has_canvas = false;\n\n      selectActivePad({ pp: this, active: false });\n\n      super.cleanup();\n   }\n\n   /** @summary Returns frame painter inside the pad\n    * @private */\n   getFramePainter() { return this.frame_painter_ref; }\n\n   /** @summary get pad width */\n   getPadWidth() { return this._pad_width || 0; }\n\n   /** @summary get pad height */\n   getPadHeight() { return this._pad_height || 0; }\n\n   /** @summary get pad rect */\n   getPadRect() {\n      return {\n         x: this._pad_x || 0,\n         y: this._pad_y || 0,\n         width: this.getPadWidth(),\n         height: this.getPadHeight()\n      }\n   }\n\n   /** @summary Returns frame coordiantes - also when frame is not drawn */\n   getFrameRect() {\n      let fp = this.getFramePainter();\n      if (fp) return fp.getFrameRect();\n\n      let w = this.getPadWidth(),\n          h = this.getPadHeight(),\n          rect = {};\n\n      rect.szx = Math.round(0.5*w);\n      rect.szy = Math.round(0.5*h);\n      rect.width = 2*rect.szx;\n      rect.height = 2*rect.szy;\n      rect.x = Math.round(w/2 - rect.szx);\n      rect.y = Math.round(h/2 - rect.szy);\n      rect.hint_delta_x = rect.szx;\n      rect.hint_delta_y = rect.szy;\n      rect.transform = `translate(${rect.x},${rect.y})`;\n      return rect;\n   }\n\n   /** @summary return RPad object */\n   getRootPad(is_root6) {\n      return (is_root6 === undefined) || !is_root6 ? this.pad : null;\n   }\n\n   /** @summary Cleanup primitives from pad - selector lets define which painters to remove\n    * @private */\n   cleanPrimitives(selector) {\n      if (!selector || (typeof selector !== 'function')) return;\n\n      for (let k = this.painters.length-1; k >= 0; --k)\n         if (selector(this.painters[k])) {\n            this.painters[k].cleanup();\n            this.painters.splice(k, 1);\n         }\n   }\n\n   /** @summary Try to find painter for specified object\n     * @desc can be used to find painter for some special objects, registered as\n     * histogram functions\n     * @private */\n   findPainterFor(selobj, selname, seltype) {\n      return this.painters.find(p => {\n         let pobj = p.getObject();\n         if (!pobj) return;\n\n         if (selobj && (pobj === selobj)) return true;\n         if (!selname && !seltype) return;\n         if (selname && (pobj.fName !== selname)) return;\n         if (seltype && (pobj._typename !== seltype)) return;\n         return true;\n      });\n   }\n\n   /** @summary Returns palette associated with pad.\n     * @desc Either from existing palette painter or just default palette */\n   getHistPalette() {\n      let pp = this.findPainterFor(undefined, undefined, \"ROOT::Experimental::RPaletteDrawable\");\n\n      if (pp) return pp.getHistPalette();\n\n      if (!this.fDfltPalette) {\n         this.fDfltPalette = {\n            _typename: \"ROOT::Experimental::RPalette\",\n            fColors: [{ fOrdinal : 0,     fColor : { fColor : \"rgb(53, 42, 135)\" } },\n                      { fOrdinal : 0.125, fColor : { fColor : \"rgb(15, 92, 221)\" } },\n                      { fOrdinal : 0.25,  fColor : { fColor : \"rgb(20, 129, 214)\" } },\n                      { fOrdinal : 0.375, fColor : { fColor : \"rgb(6, 164, 202)\" } },\n                      { fOrdinal : 0.5,   fColor : { fColor : \"rgb(46, 183, 164)\" } },\n                      { fOrdinal : 0.625, fColor : { fColor : \"rgb(135, 191, 119)\" } },\n                      { fOrdinal : 0.75,  fColor : { fColor : \"rgb(209, 187, 89)\" } },\n                      { fOrdinal : 0.875, fColor : { fColor : \"rgb(254, 200, 50)\" } },\n                      { fOrdinal : 1,     fColor : { fColor : \"rgb(249, 251, 14)\" } }],\n             fInterpolate: true,\n             fNormalized: true\n         };\n         addMethods(this.fDfltPalette, \"ROOT::Experimental::RPalette\");\n      }\n\n      return this.fDfltPalette;\n   }\n\n   /** @summary Returns number of painters\n     * @private */\n   getNumPainters() { return this.painters.length; }\n\n   /** @summary Call function for each painter in pad\n     * @param {function} userfunc - function to call\n     * @param {string} kind - \"all\" for all objects (default), \"pads\" only pads and subpads, \"objects\" only for object in current pad\n     * @private */\n   forEachPainterInPad(userfunc, kind) {\n      if (!kind) kind = \"all\";\n      if (kind != \"objects\") userfunc(this);\n      for (let k = 0; k < this.painters.length; ++k) {\n         let sub = this.painters[k];\n         if (typeof sub.forEachPainterInPad === 'function') {\n            if (kind!=\"objects\") sub.forEachPainterInPad(userfunc, kind);\n         } else if (kind != \"pads\") userfunc(sub);\n      }\n   }\n\n   /** @summary register for pad events receiver\n     * @desc in pad painter, while pad may be drawn without canvas\n     * @private */\n   registerForPadEvents(receiver) {\n      this.pad_events_receiver = receiver;\n   }\n\n   /** @summary Generate pad events, normally handled by GED\n     * @desc in pad painter, while pad may be drawn without canvas\n     * @private */\n   producePadEvent(_what, _padpainter, _painter, _position, _place) {\n      if ((_what == \"select\") && (typeof this.selectActivePad == 'function'))\n         this.selectActivePad(_padpainter, _painter, _position);\n\n      if (this.pad_events_receiver)\n         this.pad_events_receiver({ what: _what, padpainter:  _padpainter, painter: _painter, position: _position, place: _place });\n   }\n\n   /** @summary method redirect call to pad events receiver */\n   selectObjectPainter(_painter, pos, _place) {\n\n      let istoppad = (this.iscan || !this.has_canvas),\n          canp = istoppad ? this : this.getCanvPainter();\n\n      if (_painter === undefined) _painter = this;\n\n      if (pos && !istoppad)\n         pos = getAbsPosInCanvas(this.svg_this_pad(), pos);\n\n      selectActivePad({ pp: this, active: true });\n\n      canp.producePadEvent(\"select\", this, _painter, pos, _place);\n   }\n\n   /** @summary Create SVG element for the canvas */\n   createCanvasSvg(check_resize, new_size) {\n\n      let factor = null, svg = null, lmt = 5, rect = null, btns, frect;\n\n      if (check_resize > 0) {\n\n         if (this._fixed_size) return (check_resize > 1); // flag used to force re-drawing of all subpads\n\n         svg = this.getCanvSvg();\n\n         if (svg.empty()) return false;\n\n         factor = svg.property('height_factor');\n\n         rect = this.testMainResize(check_resize, null, factor);\n\n         if (!rect.changed) return false;\n\n         if (!isBatchMode())\n            btns = this.getLayerSvg(\"btns_layer\", this.this_pad_name);\n\n         frect = svg.select(\".canvas_fillrect\");\n\n      } else {\n\n         let render_to = this.selectDom();\n\n         if (render_to.style('position') == 'static')\n            render_to.style('position', 'relative');\n\n         svg = render_to.append(\"svg\")\n             .attr(\"class\", \"jsroot root_canvas\")\n             .property('pad_painter', this) // this is custom property\n             .property('current_pad', \"\") // this is custom property\n             .property('redraw_by_resize', false); // could be enabled to force redraw by each resize\n\n         this.setTopPainter(); //assign canvas as top painter of that element\n\n         if (!isBatchMode() && !this.online_canvas)\n            svg.append(\"svg:title\").text(\"ROOT canvas\");\n\n         frect = svg.append(\"svg:path\").attr(\"class\",\"canvas_fillrect\");\n         if (!isBatchMode())\n            frect.style(\"pointer-events\", \"visibleFill\")\n                 .on(\"dblclick\", evnt => this.enlargePad(evnt))\n                 .on(\"click\", () => this.selectObjectPainter(this, null))\n                 .on(\"mouseenter\", () => this.showObjectStatus())\n                 .on(\"contextmenu\", settings.ContextMenu ? evnt => this.padContextMenu(evnt) : null);\n\n         svg.append(\"svg:g\").attr(\"class\", \"primitives_layer\");\n         svg.append(\"svg:g\").attr(\"class\", \"info_layer\");\n         if (!isBatchMode())\n            btns = svg.append(\"svg:g\")\n                      .attr(\"class\",\"btns_layer\")\n                      .property('leftside', settings.ToolBarSide == 'left')\n                      .property('vertical', settings.ToolBarVert);\n\n         factor = 0.66;\n         if (this.pad && this.pad.fWinSize[0] && this.pad.fWinSize[1]) {\n            factor = this.pad.fWinSize[1] / this.pad.fWinSize[0];\n            if ((factor < 0.1) || (factor > 10)) factor = 0.66;\n         }\n\n         if (this._fixed_size) {\n            render_to.style(\"overflow\",\"auto\");\n            rect = { width: this.pad.fWinSize[0], height: this.pad.fWinSize[1] };\n            if (!rect.width || !rect.height)\n               rect = getElementRect(render_to);\n         } else {\n            rect = this.testMainResize(2, new_size, factor);\n         }\n      }\n\n      this.createAttFill({ pattern: 1001, color: 0 });\n\n      if ((rect.width <= lmt) || (rect.height <= lmt)) {\n         svg.style(\"display\", \"none\");\n         console.warn(`Hide canvas while geometry too small w=${rect.width} h=${rect.height}`);\n         rect.width = 200; rect.height = 100; // just to complete drawing\n      } else {\n         svg.style(\"display\", null);\n      }\n\n      if (this._fixed_size) {\n         svg.attr(\"x\", 0)\n            .attr(\"y\", 0)\n            .attr(\"width\", rect.width)\n            .attr(\"height\", rect.height)\n            .style(\"position\", \"absolute\");\n      } else {\n        svg.attr(\"x\", 0)\n           .attr(\"y\", 0)\n           .style(\"width\", \"100%\")\n           .style(\"height\", \"100%\")\n           .style(\"position\", \"absolute\")\n           .style(\"left\", 0)\n           .style(\"top\", 0)\n           .style(\"right\", 0)\n           .style(\"bottom\", 0);\n      }\n\n      svg.style(\"filter\", settings.DarkMode ? \"invert(100%)\" : null);\n\n      svg.attr(\"viewBox\", `0 0 ${rect.width} ${rect.height}`)\n         .attr(\"preserveAspectRatio\", \"none\")  // we do not preserve relative ratio\n         .property('height_factor', factor)\n         .property('draw_x', 0)\n         .property('draw_y', 0)\n         .property('draw_width', rect.width)\n         .property('draw_height', rect.height);\n\n      this._pad_x = 0;\n      this._pad_y = 0;\n      this._pad_width = rect.width;\n      this._pad_height = rect.height;\n\n      frect.attr(\"d\", `M0,0H${rect.width}V${rect.height}H0Z`)\n           .call(this.fillatt.func);\n\n      this._fast_drawing = settings.SmallPad && ((rect.width < settings.SmallPad.width) || (rect.height < settings.SmallPad.height));\n\n      if (this.alignButtons && btns)\n         this.alignButtons(btns, rect.width, rect.height);\n\n      return true;\n   }\n\n   /** @summary Enlarge pad draw element when possible */\n   enlargePad(evnt) {\n\n      if (evnt) {\n         evnt.preventDefault();\n         evnt.stopPropagation();\n      }\n\n      let svg_can = this.getCanvSvg(),\n          pad_enlarged = svg_can.property(\"pad_enlarged\");\n\n      if (this.iscan || !this.has_canvas || (!pad_enlarged && !this.hasObjectsToDraw() && !this.painters)) {\n         if (this._fixed_size) return; // canvas cannot be enlarged in such mode\n         if (!this.enlargeMain('toggle')) return;\n         if (this.enlargeMain('state')=='off') svg_can.property(\"pad_enlarged\", null);\n      } else if (!pad_enlarged) {\n         this.enlargeMain(true, true);\n         svg_can.property(\"pad_enlarged\", this.pad);\n      } else if (pad_enlarged === this.pad) {\n         this.enlargeMain(false);\n         svg_can.property(\"pad_enlarged\", null);\n      } else {\n         console.error('missmatch with pad double click events');\n      }\n\n      let was_fast = this._fast_drawing;\n\n      this.checkResize(true);\n\n      if (this._fast_drawing != was_fast)\n         this.showPadButtons();\n   }\n\n   /** @summary Create SVG element for the pad\n     * @returns true when pad is displayed and all its items should be redrawn */\n   createPadSvg(only_resize) {\n\n      if (!this.has_canvas) {\n         this.createCanvasSvg(only_resize ? 2 : 0);\n         return true;\n      }\n\n      let svg_parent = this.getPadSvg(this.pad_name), // this.pad_name MUST be here to select parent pad\n          svg_can = this.getCanvSvg(),\n          width = svg_parent.property(\"draw_width\"),\n          height = svg_parent.property(\"draw_height\"),\n          pad_enlarged = svg_can.property(\"pad_enlarged\"),\n          pad_visible = true,\n          w = width, h = height, x = 0, y = 0,\n          svg_pad = null, svg_rect = null, btns = null;\n\n      if (this.pad && this.pad.fPos && this.pad.fSize) {\n         x = Math.round(width * this.pad.fPos.fHoriz.fArr[0]);\n         y = Math.round(height * this.pad.fPos.fVert.fArr[0]);\n         w = Math.round(width * this.pad.fSize.fHoriz.fArr[0]);\n         h = Math.round(height * this.pad.fSize.fVert.fArr[0]);\n      }\n\n      if (pad_enlarged) {\n         pad_visible = false;\n         if (pad_enlarged === this.pad)\n            pad_visible = true;\n         else\n            this.forEachPainterInPad(pp => { if (pp.getObject() == pad_enlarged) pad_visible = true; }, \"pads\");\n\n         if (pad_visible) { w = width; h = height; x = y = 0; }\n      }\n\n      if (only_resize) {\n         svg_pad = this.svg_this_pad();\n         svg_rect = svg_pad.select(\".root_pad_border\");\n         if (!isBatchMode())\n            btns = this.getLayerSvg(\"btns_layer\", this.this_pad_name);\n      } else {\n         svg_pad = svg_parent.select(\".primitives_layer\")\n             .append(\"svg:svg\") // here was g before, svg used to blend all drawin outside\n             .classed(\"__root_pad_\" + this.this_pad_name, true)\n             .attr(\"pad\", this.this_pad_name) // set extra attribute  to mark pad name\n             .property('pad_painter', this); // this is custom property\n\n         if (!isBatchMode())\n            svg_pad.append(\"svg:title\").text(\"ROOT subpad\");\n\n         svg_rect = svg_pad.append(\"svg:path\").attr(\"class\", \"root_pad_border\");\n\n         svg_pad.append(\"svg:g\").attr(\"class\",\"primitives_layer\");\n         if (!isBatchMode())\n            btns = svg_pad.append(\"svg:g\")\n                          .attr(\"class\",\"btns_layer\")\n                          .property('leftside', settings.ToolBarSide != 'left')\n                          .property('vertical', settings.ToolBarVert);\n\n         if (settings.ContextMenu)\n            svg_rect.on(\"contextmenu\", evnt => this.padContextMenu(evnt));\n\n         if (!isBatchMode())\n            svg_rect.style(\"pointer-events\", \"visibleFill\") // get events also for not visible rect\n                    .on(\"dblclick\", evnt => this.enlargePad(evnt))\n                    .on(\"click\", () => this.selectObjectPainter(this, null))\n                    .on(\"mouseenter\", () => this.showObjectStatus());\n      }\n\n      this.createAttFill({ attr: this.pad });\n\n      this.createAttLine({ attr: this.pad, color0: this.pad.fBorderMode == 0 ? 'none' : '' });\n\n      svg_pad.style(\"display\", pad_visible ? null : \"none\")\n             .attr(\"viewBox\", `0 0 ${w} ${h}`) // due to svg\n             .attr(\"preserveAspectRatio\", \"none\")   // due to svg, we do not preserve relative ratio\n             .attr(\"x\", x)    // due to svg\n             .attr(\"y\", y)   // due to svg\n             .attr(\"width\", w)    // due to svg\n             .attr(\"height\", h)   // due to svg\n             .property('draw_x', x) // this is to make similar with canvas\n             .property('draw_y', y)\n             .property('draw_width', w)\n             .property('draw_height', h);\n\n      this._pad_x = x;\n      this._pad_y = y;\n      this._pad_width = w;\n      this._pad_height = h;\n\n      svg_rect.attr(\"d\", `M0,0H${w}V${h}H0Z`)\n              .call(this.fillatt.func)\n              .call(this.lineatt.func);\n\n      this._fast_drawing = settings.SmallPad && ((w < settings.SmallPad.width) || (h < settings.SmallPad.height));\n\n       // special case of 3D canvas overlay\n      if (svg_pad.property('can3d') === constants.Embed3D.Overlay)\n          this.selectDom().select(\".draw3d_\" + this.this_pad_name)\n              .style('display', pad_visible ? '' : 'none');\n\n      if (this.alignButtons && btns) this.alignButtons(btns, w, h);\n\n      return pad_visible;\n   }\n\n   /** @summary returns true if any objects beside sub-pads exists in the pad */\n   hasObjectsToDraw() {\n      let arr = this.pad ? this.pad.fPrimitives : null;\n      return arr && arr.find(obj => obj._typename != \"ROOT::Experimental::RPadDisplayItem\") ? true : false;\n   }\n\n   /** @summary sync drawing/redrawing/resize of the pad\n     * @param {string} kind - kind of draw operation, if true - always queued\n     * @returns {Promise} when pad is ready for draw operation or false if operation already queued\n     * @private */\n   syncDraw(kind) {\n      let entry = { kind : kind || \"redraw\" };\n      if (this._doing_draw === undefined) {\n         this._doing_draw = [ entry ];\n         return Promise.resolve(true);\n      }\n      // if queued operation registered, ignore next calls, indx == 0 is running operation\n      if ((entry.kind !== true) && (this._doing_draw.findIndex((e,i) => (i > 0) && (e.kind == entry.kind)) > 0))\n         return false;\n      this._doing_draw.push(entry);\n      return new Promise(resolveFunc => {\n         entry.func = resolveFunc;\n      });\n   }\n\n   /** @summary confirms that drawing is completed, may trigger next drawing immediately\n     * @private */\n   confirmDraw() {\n      if (this._doing_draw === undefined)\n         return console.warn(\"failure, should not happen\");\n      this._doing_draw.shift();\n      if (this._doing_draw.length == 0) {\n         delete this._doing_draw;\n      } else {\n         let entry = this._doing_draw[0];\n         if(entry.func) { entry.func(); delete entry.func; }\n      }\n   }\n\n   /** @summary Draw single primitive */\n   drawObject(dom, obj, opt) {\n      console.log('Not possible to draw object without loading of draw.mjs');\n      return Promise.resolve(null);\n   }\n\n   /** @summary Draw pad primitives\n     * @private */\n   drawPrimitives(indx) {\n\n      if (indx === undefined) {\n         if (this.iscan)\n            this._start_tm = new Date().getTime();\n\n         // set number of primitves\n         this._num_primitives = this.pad && this.pad.fPrimitives ? this.pad.fPrimitives.length : 0;\n\n         return this.syncDraw(true).then(() => this.drawPrimitives(0));\n      }\n\n      if (!this.pad || (indx >= this._num_primitives)) {\n\n         this.confirmDraw();\n\n         if (this._start_tm) {\n            let spenttm = new Date().getTime() - this._start_tm;\n            if (spenttm > 3000) console.log(\"Canvas drawing took \" + (spenttm*1e-3).toFixed(2) + \"s\");\n            delete this._start_tm;\n         }\n\n         return Promise.resolve();\n      }\n\n      // handle used to invoke callback only when necessary\n      return this.drawObject(this.getDom(), this.pad.fPrimitives[indx], \"\").then(ppainter => {\n         // mark painter as belonging to primitives\n         if (ppainter && (typeof ppainter == 'object'))\n            ppainter._primitive = true;\n\n         return this.drawPrimitives(indx+1);\n      });\n   }\n\n   /** @summary Process tooltip event in the pad\n     * @private */\n   processPadTooltipEvent(pnt) {\n      let painters = [], hints = [];\n\n      // first count - how many processors are there\n      if (this.painters !== null)\n         this.painters.forEach(obj => {\n            if (typeof obj.processTooltipEvent == 'function') painters.push(obj);\n         });\n\n      if (pnt) pnt.nproc = painters.length;\n\n      painters.forEach(obj => {\n         let hint = obj.processTooltipEvent(pnt);\n         if (!hint) hint = { user_info: null };\n         hints.push(hint);\n         if (pnt && pnt.painters) hint.painter = obj;\n      });\n\n      return hints;\n   }\n\n   /** @summary Changes canvas dark mode\n     * @private */\n   changeDarkMode(mode) {\n      this.getCanvSvg().style(\"filter\", (mode ?? settings.DarkMode)  ? \"invert(100%)\" : null);\n   }\n\n   /** @summary Fill pad context menu\n     * @private */\n   fillContextMenu(menu) {\n\n      if (this.iscan)\n         menu.add(\"header: RCanvas\");\n      else\n         menu.add(\"header: RPad\");\n\n      menu.addchk(this.isTooltipAllowed(), \"Show tooltips\", () => this.setTooltipAllowed(\"toggle\"));\n\n      if (!this._websocket) {\n         menu.addAttributesMenu(this);\n         if (this.iscan)\n            menu.addSettingsMenu(false, false, arg => {\n               if (arg == \"dark\") this.changeDarkMode();\n            });\n      }\n\n      menu.add(\"separator\");\n\n      if (typeof this.hasMenuBar == 'function' && typeof this.actiavteMenuBar == 'function')\n         menu.addchk(this.hasMenuBar(), \"Menu bar\", flag => this.actiavteMenuBar(flag));\n\n      if (typeof this.hasEventStatus == 'function' && typeof this.activateStatusBar == 'function')\n         menu.addchk(this.hasEventStatus(), \"Event status\", () => this.activateStatusBar('toggle'));\n\n      if (this.enlargeMain() || (this.has_canvas && this.hasObjectsToDraw()))\n         menu.addchk((this.enlargeMain('state')=='on'), \"Enlarge \" + (this.iscan ? \"canvas\" : \"pad\"), () => this.enlargePad());\n\n      let fname = this.this_pad_name || (this.iscan ? \"canvas\" : \"pad\");\n      menu.add(`Save as ${fname}.png`, fname+\".png\", arg => this.saveAs(\"png\", false, arg));\n      menu.add(`Save as ${fname}.svg`, fname+\".svg\", arg => this.saveAs(\"svg\", false, arg));\n\n      return true;\n   }\n\n   /** @summary Show pad context menu\n     * @private */\n   padContextMenu(evnt) {\n      if (evnt.stopPropagation) {\n         let pos = d3_pointer(evnt, this.svg_this_pad().node());\n         // this is normal event processing and not emulated jsroot event\n         // for debug purposes keep original context menu for small region in top-left corner\n         if ((pos.length==2) && (pos[0] >= 0) && (pos[0] < 10) && (pos[1] >= 0) && (pos[1] < 10)) return;\n\n         evnt.stopPropagation(); // disable main context menu\n         evnt.preventDefault();  // disable browser context menu\n\n         this.getFramePainter()?.setLastEventPos();\n      }\n\n      createMenu(evnt, this).then(menu => {\n         this.fillContextMenu(menu);\n         return this.fillObjectExecMenu(menu);\n      }).then(menu => menu.show());\n   }\n\n   /** @summary Redraw pad means redraw ourself\n     * @returns {Promise} when redrawing ready */\n   redrawPad(reason) {\n\n      let sync_promise = this.syncDraw(reason);\n      if (sync_promise === false) {\n         console.log('Prevent RPad redrawing');\n         return Promise.resolve(false);\n      }\n\n      let showsubitems = true;\n      let redrawNext = indx => {\n         while (indx < this.painters.length) {\n            let sub = this.painters[indx++], res = 0;\n            if (showsubitems || sub.this_pad_name)\n               res = sub.redraw(reason);\n\n            if (isPromise(res))\n               return res.then(() => redrawNext(indx));\n         }\n         return Promise.resolve(true);\n      };\n\n      return sync_promise.then(() => {\n         if (this.iscan) {\n            this.createCanvasSvg(2);\n         } else {\n            showsubitems = this.createPadSvg(true);\n         }\n         return redrawNext(0);\n      }).then(() => {\n         if (getActivePad() === this)\n            this.getCanvPainter()?.producePadEvent(\"padredraw\", this);\n         this.confirmDraw();\n         return true;\n      });\n   }\n\n   /** @summary redraw pad */\n   redraw(reason) {\n      return this.redrawPad(reason);\n   }\n\n\n   /** @summary Checks if pad should be redrawn by resize\n     * @private */\n   needRedrawByResize() {\n      let elem = this.svg_this_pad();\n      if (!elem.empty() && elem.property('can3d') === constants.Embed3D.Overlay) return true;\n\n      for (let i = 0; i < this.painters.length; ++i)\n         if (typeof this.painters[i].needRedrawByResize === 'function')\n            if (this.painters[i].needRedrawByResize()) return true;\n\n      return false;\n   }\n\n   /** @summary Check resize of canvas */\n   checkCanvasResize(size, force) {\n\n      if (!this.iscan && this.has_canvas) return false;\n\n      let sync_promise = this.syncDraw(\"canvas_resize\");\n      if (sync_promise === false) return false;\n\n      if ((size === true) || (size === false)) { force = size; size = null; }\n\n      if (size && (typeof size === 'object') && size.force) force = true;\n\n      if (!force) force = this.needRedrawByResize();\n\n      let changed = false,\n          redrawNext = indx => {\n             if (!changed || (indx >= this.painters.length)) {\n                this.confirmDraw();\n                return changed;\n             }\n\n             let res = this.painters[indx].redraw(force ? \"redraw\" : \"resize\");\n             if (!isPromise(res)) res = Promise.resolve();\n             return res.then(() => redrawNext(indx+1));\n          };\n\n      return sync_promise.then(() => {\n\n         changed = this.createCanvasSvg(force ? 2 : 1, size);\n\n         // if canvas changed, redraw all its subitems.\n         // If redrawing was forced for canvas, same applied for sub-elements\n         return redrawNext(0);\n      });\n   }\n\n   /** @summary update RPad object\n     * @private */\n   updateObject(obj) {\n      if (!obj) return false;\n\n      this.pad.fStyle = obj.fStyle;\n      this.pad.fAttr = obj.fAttr;\n\n      if (this.iscan) {\n         this.pad.fTitle = obj.fTitle;\n         this.pad.fWinSize = obj.fWinSize;\n      } else {\n         this.pad.fPos = obj.fPos;\n         this.pad.fSize = obj.fSize;\n      }\n\n      return true;\n   }\n\n\n   /** @summary Add object painter to list of primitives\n     * @private */\n   addObjectPainter(objpainter, lst, indx) {\n      if (objpainter && lst && lst[indx] && (objpainter.snapid === undefined)) {\n         // keep snap id in painter, will be used for the\n         if (this.painters.indexOf(objpainter) < 0)\n            this.painters.push(objpainter);\n         objpainter.assignSnapId(lst[indx].fObjectID);\n         if (!objpainter.rstyle) objpainter.rstyle = lst[indx].fStyle || this.rstyle;\n      }\n   }\n\n   /** @summary Extract properties from TObjectDisplayItem */\n   extractTObjectProp(snap) {\n      if (snap.fColIndex && snap.fColValue) {\n         let colors = this.root_colors || getRootColors();\n         for (let k = 0; k < snap.fColIndex.length; ++k)\n            colors[snap.fColIndex[k]] = snap.fColValue[k];\n       }\n\n      // painter used only for evaluation of attributes\n      let pattr = new RObjectPainter(), obj = snap.fObject;\n      pattr.assignObject(snap);\n      pattr.csstype = snap.fCssType;\n      pattr.rstyle = snap.fStyle;\n\n      snap.fOption = pattr.v7EvalAttr(\"options\", \"\");\n\n      const extract_color = (member_name, attr_name) => {\n         let col = pattr.v7EvalColor(attr_name, \"\");\n         if (col) obj[member_name] = addColor(col, this.root_colors);\n      };\n\n      // handle TAttLine\n      if ((obj.fLineColor !== undefined) && (obj.fLineWidth !== undefined) && (obj.fLineStyle !== undefined)) {\n         extract_color(\"fLineColor\", \"line_color\");\n         obj.fLineWidth = pattr.v7EvalAttr(\"line_width\", obj.fLineWidth);\n         obj.fLineStyle = pattr.v7EvalAttr(\"line_style\", obj.fLineStyle);\n      }\n\n      // handle TAttFill\n      if ((obj.fFillColor !== undefined) && (obj.fFillStyle !== undefined)) {\n         extract_color(\"fFillColor\", \"fill_color\");\n         obj.fFillStyle = pattr.v7EvalAttr(\"fill_style\", obj.fFillStyle);\n      }\n\n      // handle TAttMarker\n      if ((obj.fMarkerColor !== undefined) && (obj.fMarkerStyle !== undefined) && (obj.fMarkerSize !== undefined)) {\n         extract_color(\"fMarkerColor\", \"marker_color\");\n         obj.fMarkerStyle = pattr.v7EvalAttr(\"marker_style\", obj.fMarkerStyle);\n         obj.fMarkerSize = pattr.v7EvalAttr(\"marker_size\", obj.fMarkerSize);\n      }\n\n      // handle TAttText\n      if ((obj.fTextColor !== undefined) && (obj.fTextAlign !== undefined) && (obj.fTextAngle !== undefined) && (obj.fTextSize !== undefined)) {\n         extract_color(\"fTextColor\", \"text_color\");\n         obj.fTextAlign = pattr.v7EvalAttr(\"text_align\", obj.fTextAlign);\n         obj.fTextAngle = pattr.v7EvalAttr(\"text_angle\", obj.fTextAngle);\n         obj.fTextSize = pattr.v7EvalAttr(\"text_size\", obj.fTextSize);\n         // TODO: v7 font handling differs much from v6, ignore for the moment\n      }\n   }\n\n   /** @summary Function called when drawing next snapshot from the list\n     * @returns {Promise} with pad painter when ready\n     * @private */\n   drawNextSnap(lst, indx) {\n\n      if (indx === undefined) {\n         indx = -1;\n         // flag used to prevent immediate pad redraw during first draw\n         this._snaps_map = {}; // to control how much snaps are drawn\n         this._num_primitives = lst ? lst.length : 0;\n         this._auto_color_cnt = 0;\n      }\n\n      delete this.next_rstyle;\n\n      ++indx; // change to the next snap\n\n      if (!lst || indx >= lst.length) {\n         delete this._snaps_map;\n         delete this._auto_color_cnt;\n         return Promise.resolve(this);\n      }\n\n      let snap = lst[indx],\n          snapid = snap.fObjectID,\n          cnt = this._snaps_map[snapid],\n          objpainter = null;\n\n      if (cnt) cnt++; else cnt=1;\n      this._snaps_map[snapid] = cnt; // check how many objects with same snapid drawn, use them again\n\n      // empty object, no need to do something, take next\n      if (snap.fDummy) return this.drawNextSnap(lst, indx);\n\n      // first appropriate painter for the object\n      // if same object drawn twice, two painters will exists\n      for (let k = 0; k<this.painters.length; ++k) {\n         if (this.painters[k].snapid === snapid)\n            if (--cnt === 0) { objpainter = this.painters[k]; break;  }\n      }\n\n      if (objpainter) {\n\n         if (snap._typename == \"ROOT::Experimental::RPadDisplayItem\")  // subpad\n            return objpainter.redrawPadSnap(snap).then(ppainter => {\n               this.addObjectPainter(ppainter, lst, indx);\n               return this.drawNextSnap(lst, indx);\n            });\n\n         if (snap._typename === \"ROOT::Experimental::TObjectDisplayItem\")\n            this.extractTObjectProp(snap);\n\n         let promise;\n\n         if (objpainter.updateObject(snap.fDrawable || snap.fObject || snap, snap.fOption || \"\"))\n            promise = objpainter.redraw();\n\n         if (!isPromise(promise)) promise = Promise.resolve(true);\n\n         return promise.then(() => this.drawNextSnap(lst, indx)); // call next\n      }\n\n      if (snap._typename == \"ROOT::Experimental::RPadDisplayItem\") { // subpad\n\n         let subpad = snap; // not subpad, but just attributes\n\n         let padpainter = new RPadPainter(this.getDom(), subpad, false);\n         padpainter.decodeOptions(\"\");\n         padpainter.addToPadPrimitives(this.this_pad_name); // only set parent pad name\n         padpainter.assignSnapId(snap.fObjectID);\n         padpainter.rstyle = snap.fStyle;\n\n         padpainter.createPadSvg();\n\n         if (snap.fPrimitives && snap.fPrimitives.length > 0)\n            padpainter.addPadButtons();\n\n         // we select current pad, where all drawing is performed\n         let prev_name = padpainter.selectCurrentPad(padpainter.this_pad_name);\n\n         return padpainter.drawNextSnap(snap.fPrimitives).then(() => {\n            padpainter.selectCurrentPad(prev_name);\n            return this.drawNextSnap(lst, indx);\n         });\n      }\n\n      // will be used in addToPadPrimitives to assign style to sub-painters\n      this.next_rstyle = lst[indx].fStyle || this.rstyle;\n\n      if (snap._typename === \"ROOT::Experimental::TObjectDisplayItem\") {\n\n         // identifier used in RObjectDrawable\n         const webSnapIds = { kNone: 0,  kObject: 1, kColors: 4, kStyle: 5, kPalette: 6 };\n\n         if (snap.fKind == webSnapIds.kStyle) {\n            Object.assign(gStyle, snap.fObject);\n            return this.drawNextSnap(lst, indx);\n         }\n\n         if (snap.fKind == webSnapIds.kColors) {\n            let ListOfColors = [], arr = snap.fObject.arr;\n            for (let n = 0; n < arr.length; ++n) {\n               let name = arr[n].fString, p = name.indexOf(\"=\");\n               if (p > 0)\n                  ListOfColors[parseInt(name.slice(0,p))] = name.slice(p+1);\n            }\n\n            this.root_colors = ListOfColors;\n            // set global list of colors\n            // adoptRootColors(ListOfColors);\n            return this.drawNextSnap(lst, indx);\n         }\n\n         if (snap.fKind == webSnapIds.kPalette) {\n            let arr = snap.fObject.arr, palette = [];\n            for (let n = 0; n < arr.length; ++n)\n               palette[n] =  arr[n].fString;\n            this.custom_palette = new ColorPalette(palette);\n            return this.drawNextSnap(lst, indx);\n         }\n\n         if (!this.getFramePainter())\n            return this.drawObject(this.getDom(), { _typename: \"TFrame\", $dummy: true }, \"\")\n                       .then(() => this.drawNextSnap(lst, indx-1)); // call same object again\n\n         this.extractTObjectProp(snap);\n      }\n\n      // TODO - fDrawable is v7, fObject from v6, maybe use same data member?\n      return this.drawObject(this.getDom(), snap.fDrawable || snap.fObject || snap, snap.fOption || \"\").then(objpainter => {\n         this.addObjectPainter(objpainter, lst, indx);\n         return this.drawNextSnap(lst, indx);\n      });\n   }\n\n   /** @summary Search painter with specified snapid, also sub-pads are checked\n     * @private */\n   findSnap(snapid, onlyid) {\n\n      function check(checkid) {\n         if (!checkid || (typeof checkid != 'string')) return false;\n         if (checkid == snapid) return true;\n         return onlyid && (checkid.length > snapid.length) &&\n                (checkid.indexOf(snapid) == (checkid.length - snapid.length));\n      }\n\n      if (check(this.snapid)) return this;\n\n      if (!this.painters) return null;\n\n      for (let k=0;k<this.painters.length;++k) {\n         let sub = this.painters[k];\n\n         if (!onlyid && (typeof sub.findSnap === 'function'))\n            sub = sub.findSnap(snapid);\n         else if (!check(sub.snapid))\n            sub = null;\n\n         if (sub) return sub;\n      }\n\n      return null;\n   }\n\n   /** @summary Redraw pad snap\n     * @desc Online version of drawing pad primitives\n     * @returns {Promise} with pad painter*/\n   redrawPadSnap(snap) {\n      // for the pad/canvas display item contains list of primitives plus pad attributes\n\n      if (!snap || !snap.fPrimitives)\n         return Promise.resolve(this);\n\n      // for the moment only window size attributes are provided\n      // let padattr = { fCw: snap.fWinSize[0], fCh: snap.fWinSize[1], fTitle: snap.fTitle };\n\n      // if canvas size not specified in batch mode, temporary use 900x700 size\n      // if (this.batch_mode && this.iscan && (!padattr.fCw || !padattr.fCh)) { padattr.fCw = 900; padattr.fCh = 700; }\n\n      if (this.iscan && this._websocket && snap.fTitle && !this.embed_canvas && (typeof document !== \"undefined\"))\n         document.title = snap.fTitle;\n\n      if (this.snapid === undefined) {\n         // first time getting snap, create all gui elements first\n\n         this.assignSnapId(snap.fObjectID);\n\n         this.draw_object = snap;\n         this.pad = snap;\n\n         if (this.batch_mode && this.iscan)\n             this._fixed_size = true;\n\n         let mainid = this.selectDom().attr(\"id\");\n\n         if (!this.batch_mode && !this.use_openui && !this.brlayout && mainid && (typeof mainid == \"string\")) {\n            this.brlayout = new BrowserLayout(mainid, null, this);\n            this.brlayout.create(mainid, true);\n            this.setDom(this.brlayout.drawing_divid()); // need to create canvas\n            registerForResize(this.brlayout);\n         }\n\n         this.createCanvasSvg(0);\n         this.addPadButtons(true);\n\n         return this.drawNextSnap(snap.fPrimitives);\n      }\n\n      // update only pad/canvas attributes\n      this.updateObject(snap);\n\n      // apply all changes in the object (pad or canvas)\n      if (this.iscan) {\n         this.createCanvasSvg(2);\n      } else {\n         this.createPadSvg(true);\n      }\n\n      let isanyfound = false, isanyremove = false;\n\n      // find and remove painters which no longer exists in the list\n      for (let k = 0;k < this.painters.length; ++k) {\n         let sub = this.painters[k];\n         if (sub.snapid===undefined) continue; // look only for painters with snapid\n\n         snap.fPrimitives.forEach(prim => {\n            if (sub && (prim.fObjectID === sub.snapid)) {\n               sub = null; isanyfound = true;\n            }\n         });\n\n         if (sub) {\n            // remove painter which does not found in the list of snaps\n            this.painters.splice(k--,1);\n            sub.cleanup(); // cleanup such painter\n            isanyremove = true;\n            if (this.main_painter_ref === sub)\n               delete this.main_painter_ref;\n         }\n      }\n\n      if (isanyremove)\n         delete this.pads_cache;\n\n      if (!isanyfound) {\n         let fp = this.getFramePainter();\n         // cannot preserve ROOT6 frame - it must be recreated\n         if (fp?.is_root6()) fp = null;\n         for (let k = 0; k < this.painters.length; ++k)\n             if (fp !== this.painters[k])\n               this.painters[k].cleanup();\n         this.painters = [];\n         delete this.main_painter_ref;\n         if (fp) {\n            this.painters.push(fp);\n            fp.cleanFrameDrawings();\n            fp.redraw(); // need to create all layers again\n         }\n         if (this.removePadButtons) this.removePadButtons();\n         this.addPadButtons(true);\n      }\n\n      let prev_name = this.selectCurrentPad(this.this_pad_name);\n\n      return this.drawNextSnap(snap.fPrimitives).then(() => {\n         this.selectCurrentPad(prev_name);\n\n         if (getActivePad() === this)\n            this.getCanvPainter()?.producePadEvent(\"padredraw\", this);\n         return this;\n      });\n   }\n\n   /** @summary Create image for the pad\n     * @desc Used with web-based canvas to create images for server side\n     * @returns {Promise} with image data, coded with btoa() function\n     * @private */\n   createImage(format) {\n      // use https://github.com/MrRio/jsPDF in the future here\n      if (format == \"pdf\")\n         return Promise.resolve(btoa_func(\"dummy PDF file\"));\n\n      if ((format == \"png\") || (format == \"jpeg\") || (format == \"svg\"))\n         return this.produceImage(true, format).then(res => {\n            if (!res || (format == \"svg\")) return res;\n            let separ = res.indexOf(\"base64,\");\n            return (separ > 0) ? res.slice(separ+7) : \"\";\n         });\n\n      return Promise.resolve(\"\");\n   }\n\n   /** @summary Show context menu for specified item\n     * @private */\n   itemContextMenu(name) {\n       let rrr = this.svg_this_pad().node().getBoundingClientRect(),\n           evnt = { clientX: rrr.left+10, clientY: rrr.top + 10 };\n\n       // use timeout to avoid conflict with mouse click and automatic menu close\n       if (name == \"pad\")\n          return setTimeout(() => this.padContextMenu(evnt), 50);\n\n       let selp = null, selkind;\n\n       switch(name) {\n          case \"xaxis\":\n          case \"yaxis\":\n          case \"zaxis\":\n             selp = this.getMainPainter();\n             selkind = name[0];\n             break;\n          case \"frame\":\n             selp = this.getFramePainter();\n             break;\n          default: {\n             let indx = parseInt(name);\n             if (Number.isInteger(indx)) selp = this.painters[indx];\n          }\n       }\n\n       if (typeof selp?.fillContextMenu !== 'function') return;\n\n       createMenu(evnt, selp).then(menu => {\n          if (selp.fillContextMenu(menu, selkind))\n             setTimeout(() => menu.show(), 50);\n       });\n   }\n\n   /** @summary Save pad in specified format\n     * @desc Used from context menu */\n   saveAs(kind, full_canvas, filename) {\n      if (!filename)\n         filename = (this.this_pad_name || (this.iscan ? \"canvas\" : \"pad\")) + \".\" + kind;\n\n      this.produceImage(full_canvas, kind).then(imgdata => {\n         if (!imgdata)\n            return console.error(`Fail to produce image ${filename}`);\n\n         saveFile(filename, (kind != \"svg\") ? imgdata : \"data:image/svg+xml;charset=utf-8,\"+encodeURIComponent(imgdata));\n      });\n   }\n\n   /** @summary Prodce image for the pad\n     * @returns {Promise} with created image */\n   produceImage(full_canvas, file_format) {\n\n      let use_frame = (full_canvas === \"frame\"),\n          elem = use_frame ? this.getFrameSvg(this.this_pad_name) : (full_canvas ? this.getCanvSvg() : this.svg_this_pad()),\n          painter = (full_canvas && !use_frame) ? this.getCanvPainter() : this,\n          items = []; // keep list of replaced elements, which should be moved back at the end\n\n      if (elem.empty())\n         return Promise.resolve(\"\");\n\n      if (!use_frame) // do not make transformations for the frame\n      painter.forEachPainterInPad(pp => {\n\n         let item = { prnt: pp.svg_this_pad() };\n         items.push(item);\n\n         // remove buttons from each subpad\n         let btns = pp.getLayerSvg(\"btns_layer\", this.this_pad_name);\n         item.btns_node = btns.node();\n         if (item.btns_node) {\n            item.btns_prnt = item.btns_node.parentNode;\n            item.btns_next = item.btns_node.nextSibling;\n            btns.remove();\n         }\n\n         let main = pp.getFramePainter();\n         if (!main || (typeof main.render3D !== 'function') || (typeof main.access3dKind != 'function')) return;\n\n         let can3d = main.access3dKind();\n\n         if ((can3d !== constants.Embed3D.Overlay) && (can3d !== constants.Embed3D.Embed)) return;\n\n         let sz2 = main.getSizeFor3d(constants.Embed3D.Embed), // get size and position of DOM element as it will be embed\n             canvas = main.renderer.domElement;\n\n         main.render3D(0); // WebGL clears buffers, therefore we should render scene and convert immediately\n\n         let dataUrl = canvas.toDataURL(\"image/png\");\n\n         // remove 3D drawings\n\n         if (can3d === constants.Embed3D.Embed) {\n            item.foreign = item.prnt.select(\".\" + sz2.clname);\n            item.foreign.remove();\n         }\n\n         let svg_frame = main.getFrameSvg();\n         item.frame_node = svg_frame.node();\n         if (item.frame_node) {\n            item.frame_next = item.frame_node.nextSibling;\n            svg_frame.remove();\n         }\n\n         // add svg image\n         item.img = item.prnt.insert(\"image\",\".primitives_layer\")     // create image object\n                        .attr(\"x\", sz2.x)\n                        .attr(\"y\", sz2.y)\n                        .attr(\"width\", canvas.width)\n                        .attr(\"height\", canvas.height)\n                        .attr(\"href\", dataUrl);\n\n      }, \"pads\");\n\n      const reEncode = data => {\n         data = encodeURIComponent(data);\n         data = data.replace(/%([0-9A-F]{2})/g, function(match, p1) {\n           let c = String.fromCharCode('0x'+p1);\n           return c === '%' ? '%25' : c;\n         });\n         return decodeURIComponent(data);\n      }, reconstruct = () => {\n         for (let k = 0; k < items.length; ++k) {\n            let item = items[k];\n\n            if (item.img)\n               item.img.remove(); // delete embed image\n\n            let prim = item.prnt.select(\".primitives_layer\");\n\n            if (item.foreign) // reinsert foreign object\n               item.prnt.node().insertBefore(item.foreign.node(), prim.node());\n\n            if (item.frame_node) // reinsert frame as first in list of primitives\n               prim.node().insertBefore(item.frame_node, item.frame_next);\n\n            if (item.btns_node) // reinsert buttons\n               item.btns_prnt.insertBefore(item.btns_node, item.btns_next);\n         }\n      };\n\n      let width = elem.property('draw_width'), height = elem.property('draw_height');\n      if (use_frame) {\n         let fp = this.getFramePainter();\n         width = fp.getFrameWidth();\n         height = fp.getFrameHeight();\n      }\n\n      let svg = `<svg width=\"${width}\" height=\"${height}\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">${elem.node().innerHTML}</svg>`;\n\n      if (internals.processSvgWorkarounds)\n         svg = internals.processSvgWorkarounds(svg);\n\n      svg = compressSVG(svg);\n\n      if (file_format == \"svg\") {\n         reconstruct();\n         return Promise.resolve(svg); // return SVG file as is\n      }\n\n      let doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">',\n          image = new Image();\n\n      return new Promise(resolveFunc => {\n         image.onload = function() {\n            let canvas = document.createElement('canvas');\n            canvas.width = image.width;\n            canvas.height = image.height;\n            let context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0);\n\n            reconstruct();\n\n            resolveFunc(canvas.toDataURL('image/' + file_format));\n         }\n\n         image.onerror = function(arg) {\n            console.log('IMAGE ERROR', arg);\n            reconstruct();\n            resolveFunc(null);\n         }\n\n         image.src = 'data:image/svg+xml;base64,' + btoa_func(reEncode(doctype + svg));\n      });\n   }\n\n   /** @summary Process pad button click */\n   clickPadButton(funcname, evnt) {\n\n      if (funcname == \"CanvasSnapShot\")\n         return this.saveAs(\"png\", true);\n\n      if (funcname == \"enlargePad\")\n         return this.enlargePad();\n\n      if (funcname == \"PadSnapShot\")\n         return this.saveAs(\"png\", false);\n\n      if (funcname == \"PadContextMenus\") {\n\n         if (evnt) {\n            evnt.preventDefault();\n            evnt.stopPropagation();\n         }\n\n         if (closeMenu()) return;\n\n         createMenu(evnt, this).then(menu => {\n            menu.add(\"header:Menus\");\n\n            if (this.iscan)\n               menu.add(\"Canvas\", \"pad\", this.itemContextMenu);\n            else\n               menu.add(\"Pad\", \"pad\", this.itemContextMenu);\n\n            if (this.getFramePainter())\n               menu.add(\"Frame\", \"frame\", this.itemContextMenu);\n\n            let main = this.getMainPainter(); // here hist painter methods\n\n            if (main) {\n               menu.add(\"X axis\", \"xaxis\", this.itemContextMenu);\n               menu.add(\"Y axis\", \"yaxis\", this.itemContextMenu);\n               if ((typeof main.getDimension === 'function') && (main.getDimension() > 1))\n                  menu.add(\"Z axis\", \"zaxis\", this.itemContextMenu);\n            }\n\n            if (this.painters?.length) {\n               menu.add(\"separator\");\n               let shown = [];\n               for (let n = 0; n < this.painters.length; ++n) {\n                  let obj = this.painters[n]?.getObject();\n                  if (!obj || (shown.indexOf(obj) >= 0)) continue;\n\n                  let name = obj._typename ? obj._typename + \"::\" : \"\";\n                  if (obj.fName) name += obj.fName;\n                  if (!name) name = \"item\" + n;\n                  menu.add(name, n, this.itemContextMenu);\n               }\n            }\n\n            menu.show();\n         });\n\n         return;\n      }\n\n      // click automatically goes to all sub-pads\n      // if any painter indicates that processing completed, it returns true\n      let done = false;\n\n      for (let i = 0; i < this.painters.length; ++i) {\n         let pp = this.painters[i];\n\n         if (typeof pp.clickPadButton == 'function')\n            pp.clickPadButton(funcname);\n\n         if (!done && (typeof pp.clickButton == 'function'))\n            done = pp.clickButton(funcname);\n      }\n   }\n\n   /** @summary Add button to the pad\n     * @private */\n   addPadButton(btn, tooltip, funcname, keyname) {\n      if (!settings.ToolBar || isBatchMode() || this.batch_mode) return;\n\n      if (!this._buttons) this._buttons = [];\n      // check if there are duplications\n\n      for (let k = 0; k < this._buttons.length; ++k)\n         if (this._buttons[k].funcname == funcname) return;\n\n      this._buttons.push({ btn, tooltip, funcname, keyname });\n\n      let iscan = this.iscan || !this.has_canvas;\n      if (!iscan && (funcname.indexOf(\"Pad\") != 0) && (funcname !== \"enlargePad\")) {\n         let cp = this.getCanvPainter();\n         if (cp && (cp !== this)) cp.addPadButton(btn, tooltip, funcname);\n      }\n   }\n\n   /** @summary Add buttons for pad or canvas\n     * @private */\n   addPadButtons(is_online) {\n\n      this.addPadButton(\"camera\", \"Create PNG\", this.iscan ? \"CanvasSnapShot\" : \"PadSnapShot\", \"Ctrl PrintScreen\");\n\n      if (settings.ContextMenu)\n         this.addPadButton(\"question\", \"Access context menus\", \"PadContextMenus\");\n\n      let add_enlarge = !this.iscan && this.has_canvas && this.hasObjectsToDraw()\n\n      if (add_enlarge || this.enlargeMain('verify'))\n         this.addPadButton(\"circle\", \"Enlarge canvas\", \"enlargePad\");\n\n      if (is_online && this.brlayout) {\n         this.addPadButton(\"diamand\", \"Toggle Ged\", \"ToggleGed\");\n         this.addPadButton(\"three_circles\", \"Toggle Status\", \"ToggleStatus\");\n      }\n\n   }\n\n   /** @summary Show pad buttons\n     * @private */\n   showPadButtons() {\n      if (!this._buttons) return;\n\n      PadButtonsHandler.assign(this);\n      this.showPadButtons();\n   }\n\n   /** @summary Calculates RPadLength value */\n   getPadLength(vertical, len, frame_painter) {\n      let sign = vertical ? -1 : 1,\n          rect, res,\n          getV = (indx, dflt) => (indx < len.fArr.length) ? len.fArr[indx] : dflt,\n          getRect = () => {\n             if (!rect)\n                rect = frame_painter ? frame_painter.getFrameRect() : this.getPadRect();\n             return rect;\n          };\n\n      if (frame_painter) {\n         let user = getV(2), func = vertical ? \"gry\" : \"grx\";\n         if ((user !== undefined) && frame_painter[func])\n            res = frame_painter[func](user);\n      }\n\n      if (res === undefined)\n         res = vertical ? getRect().height : 0;\n\n      let norm = getV(0, 0), pixel = getV(1, 0);\n\n      res += sign*pixel;\n\n      if (norm)\n         res += sign * (vertical ? getRect().height : getRect().width) * norm;\n\n      return Math.round(res);\n   }\n\n\n   /** @summary Calculates pad position for RPadPos values\n     * @param {object} pos - instance of RPadPos\n     * @param {object} frame_painter - if drawing will be performed inside frame, frame painter */\n   getCoordinate(pos, frame_painter) {\n      return {\n         x: this.getPadLength(false, pos.fHoriz, frame_painter),\n         y: this.getPadLength(true, pos.fVert, frame_painter)\n      }\n   }\n\n   /** @summary Decode pad draw options */\n   decodeOptions(opt) {\n      let pad = this.getObject();\n      if (!pad) return;\n\n      let d = new DrawOptions(opt);\n\n      if (!this.options) this.options = {};\n\n      Object.assign(this.options, { GlobalColors: true, LocalColors: false, IgnorePalette: false, RotateFrame: false, FixFrame: false });\n\n      if (d.check('NOCOLORS') || d.check('NOCOL')) this.options.GlobalColors = this.options.LocalColors = false;\n      if (d.check('LCOLORS') || d.check('LCOL')) { this.options.GlobalColors = false; this.options.LocalColors = true; }\n      if (d.check('NOPALETTE') || d.check('NOPAL')) this.options.IgnorePalette = true;\n      if (d.check('ROTATE')) this.options.RotateFrame = true;\n      if (d.check('FIXFRAME')) this.options.FixFrame = true;\n\n      if (d.check('WHITE')) pad.fFillColor = 0;\n      if (d.check('LOGX')) pad.fLogx = 1;\n      if (d.check('LOGY')) pad.fLogy = 1;\n      if (d.check('LOGZ')) pad.fLogz = 1;\n      if (d.check('LOG')) pad.fLogx = pad.fLogy = pad.fLogz = 1;\n      if (d.check('GRIDX')) pad.fGridx = 1;\n      if (d.check('GRIDY')) pad.fGridy = 1;\n      if (d.check('GRID')) pad.fGridx = pad.fGridy = 1;\n      if (d.check('TICKX')) pad.fTickx = 1;\n      if (d.check('TICKY')) pad.fTicky = 1;\n      if (d.check('TICK')) pad.fTickx = pad.fTicky = 1;\n   }\n\n   /** @summary draw RPad object */\n   static draw(dom, pad, opt) {\n      let painter = new RPadPainter(dom, pad, false);\n      painter.decodeOptions(opt);\n\n      if (painter.getCanvSvg().empty()) {\n         painter.has_canvas = false;\n         painter.this_pad_name = \"\";\n         painter.setTopPainter();\n      } else {\n         painter.addToPadPrimitives(painter.pad_name); // must be here due to pad painter\n      }\n\n      painter.createPadSvg();\n\n      if (painter.matchObjectType(\"TPad\") && (!painter.has_canvas || painter.hasObjectsToDraw())) {\n         painter.addPadButtons();\n      }\n\n      // we select current pad, where all drawing is performed\n      let prev_name = painter.has_canvas ? painter.selectCurrentPad(painter.this_pad_name) : undefined;\n\n      selectActivePad({ pp: painter, active: false });\n\n      // flag used to prevent immediate pad redraw during first draw\n      return painter.drawPrimitives().then(() => {\n         painter.showPadButtons();\n         // we restore previous pad name\n         painter.selectCurrentPad(prev_name);\n         return painter;\n      });\n   }\n\n} // class RPadPainter\n\nexport { RPadPainter };\n","/// Connections handling to RWebWindow\n\nimport { httpRequest, createHttpRequest, loadScript, decodeUrl, browser, setBatchMode, isBatchMode, btoa_func } from './core.mjs';\n\nimport { closeCurrentWindow, showProgress, loadOpenui5 } from './gui/utils.mjs';\n\n/**\n * @summary Class emulating web socket with long-poll http requests\n *\n * @private\n */\n\nclass LongPollSocket {\n\n   constructor(addr, _raw, _args) {\n      this.path = addr;\n      this.connid = null;\n      this.req = null;\n      this.raw = _raw;\n      this.args = _args;\n\n      this.nextRequest(\"\", \"connect\");\n   }\n\n   /** @summary Submit next request */\n   nextRequest(data, kind) {\n      let url = this.path, reqmode = \"buf\", post = null;\n      if (kind === \"connect\") {\n         url += this.raw ? \"?raw_connect\" : \"?txt_connect\";\n         if (this.args) url += \"&\" + this.args;\n         console.log('longpoll connect ' + url + ' raw = ' + this.raw);\n         this.connid = \"connect\";\n      } else if (kind === \"close\") {\n         if ((this.connid === null) || (this.connid === \"close\")) return;\n         url += \"?connection=\" + this.connid + \"&close\";\n         this.connid = \"close\";\n         reqmode = \"text;sync\"; // use sync mode to close connection before browser window closed\n      } else if ((this.connid === null) || (typeof this.connid !== 'number')) {\n         if (!browser.qt5) console.error(\"No connection\");\n         return;\n      } else {\n         url += \"?connection=\" + this.connid;\n         if (kind === \"dummy\") url += \"&dummy\";\n      }\n\n      if (data) {\n         if (this.raw) {\n            // special workaround to avoid POST request, use base64 coding\n            url += \"&post=\" + btoa_func(data);\n         } else {\n            // send data with post request - most efficient way\n            reqmode = \"postbuf\";\n            post = data;\n         }\n      }\n\n      createHttpRequest(url, reqmode, function(res) {\n         // this set to the request itself, res is response\n\n         if (this.handle.req === this)\n            this.handle.req = null; // get response for existing dummy request\n\n         if (res === null)\n            return this.handle.processRequest(null);\n\n         if (this.handle.raw) {\n            // raw mode - all kind of reply data packed into binary buffer\n            // first 4 bytes header \"txt:\" or \"bin:\"\n            // after the \"bin:\" there is length of optional text argument like \"bin:14  :optional_text\"\n            // and immedaitely after text binary data. Server sends binary data so, that offset should be multiple of 8\n\n            let str = \"\", i = 0, u8Arr = new Uint8Array(res), offset = u8Arr.length;\n            if (offset < 4) {\n               if (!browser.qt5) console.error('longpoll got short message in raw mode ' + offset);\n               return this.handle.processRequest(null);\n            }\n\n            while (i < 4) str += String.fromCharCode(u8Arr[i++]);\n            if (str != \"txt:\") {\n               str = \"\";\n               while ((i < offset) && (String.fromCharCode(u8Arr[i]) != ':'))\n                  str += String.fromCharCode(u8Arr[i++]);\n               ++i;\n               offset = i + parseInt(str.trim());\n            }\n\n            str = \"\";\n            while (i < offset) str += String.fromCharCode(u8Arr[i++]);\n\n            if (str) {\n               if (str == \"<<nope>>\")\n                  this.handle.processRequest(-1111);\n               else\n                   this.handle.processRequest(str);\n            }\n            if (offset < u8Arr.length)\n               this.handle.processRequest(res, offset);\n         } else if (this.getResponseHeader(\"Content-Type\") == \"application/x-binary\") {\n            // binary reply with optional header\n            let extra_hdr = this.getResponseHeader(\"LongpollHeader\");\n            if (extra_hdr) this.handle.processRequest(extra_hdr);\n            this.handle.processRequest(res, 0);\n         } else {\n            // text reply\n            if (res && typeof res !== \"string\") {\n               let str = \"\", u8Arr = new Uint8Array(res);\n               for (let i = 0; i < u8Arr.length; ++i)\n                  str += String.fromCharCode(u8Arr[i]);\n               res = str;\n            }\n            if (res == \"<<nope>>\")\n               this.handle.processRequest(-1111);\n            else\n               this.handle.processRequest(res);\n         }\n      }, function(/*err,status*/) {\n         // console.log(`Get request error ${err} status ${status}`);\n         this.handle.processRequest(null, \"error\");\n      }, true).then(req => {\n         req.handle = this;\n         if (!this.req)\n            this.req = req; // any request can be used for response, do not submit dummy until req is there\n         req.send(post);\n      });\n   }\n\n   /** @summary Process request */\n   processRequest(res, _offset) {\n      if (res === null) {\n         if (typeof this.onerror === 'function')\n            this.onerror(\"receive data with connid \" + (this.connid || \"---\"));\n         if ((_offset == \"error\") && (typeof this.onclose === 'function'))\n            this.onclose(\"force_close\");\n         this.connid = null;\n         return;\n      } else if (res === -1111) {\n         res = \"\";\n      }\n\n      let dummy_tmout = 5;\n\n      if (this.connid === \"connect\") {\n         if (!res) {\n            this.connid = null;\n            if (typeof this.onerror === 'function')\n               this.onerror(\"connection rejected\");\n            return;\n         }\n\n         this.connid = parseInt(res);\n         dummy_tmout = 100; // when establishing connection, wait a bit longer to submit dummy package\n         console.log('Get new longpoll connection with id ' + this.connid);\n         if (typeof this.onopen == 'function') this.onopen();\n      } else if (this.connid === \"close\") {\n         if (typeof this.onclose == 'function')\n            this.onclose();\n         return;\n      } else {\n         if ((typeof this.onmessage === 'function') && res)\n            this.onmessage({ data: res, offset: _offset });\n      }\n\n      // minimal timeout to reduce load, generate dummy only if client not submit new request immediately\n      if (!this.req)\n         setTimeout(() => { if (!this.req) this.nextRequest(\"\", \"dummy\"); }, dummy_tmout);\n   }\n\n   /** @summary Send data */\n   send(str) { this.nextRequest(str); }\n\n   /** @summary Close connection */\n   close() { this.nextRequest(\"\", \"close\"); }\n\n} // class LongPollSocket\n\n// ========================================================================================\n\n/**\n * @summary Class re-playing socket data from stored protocol\n *\n * @private\n */\n\nclass FileDumpSocket {\n\n   constructor(receiver) {\n      this.receiver = receiver;\n      this.protocol = [];\n      this.cnt = 0;\n      httpRequest(\"protocol.json\", \"text\").then(res => this.getProtocol(res));\n   }\n\n   /** @summary Get stored protocol */\n   getProtocol(res) {\n      if (!res) return;\n      this.protocol = JSON.parse(res);\n      if (typeof this.onopen == 'function') this.onopen();\n      this.nextOperation();\n   }\n\n   /** @summary Emulate send - just cound operation */\n   send(/* str */) {\n      if (this.protocol[this.cnt] == \"send\") {\n         this.cnt++;\n         setTimeout(() => this.nextOperation(), 10);\n      }\n   }\n\n   /** @summary Emulate close */\n   close() {}\n\n   /** @summary Read data for next operation */\n   nextOperation() {\n      // when file request running - just ignore\n      if (this.wait_for_file) return;\n      let fname = this.protocol[this.cnt];\n      if (!fname) return;\n      if (fname == \"send\") return; // waiting for send\n      // console.log(\"getting file\", fname, \"wait\", this.wait_for_file);\n      this.wait_for_file = true;\n      this.cnt++;\n      httpRequest(fname, (fname.indexOf(\".bin\") > 0 ? \"buf\" : \"text\")).then(res => {\n         this.wait_for_file = false;\n         if (!res) return;\n         if (this.receiver.provideData)\n            this.receiver.provideData(1, res, 0);\n         setTimeout(() => this.nextOperation(), 10);\n      });\n   }\n\n} // class FileDumpSocket\n\n\n/**\n * @summary Client communication handle for RWebWindow.\n *\n * @desc Should be created with {@link connectWebWindow} function\n */\n\nclass WebWindowHandle {\n\n   constructor(socket_kind, credits) {\n      this.kind = socket_kind;\n      this.state = 0;\n      this.credits = credits || 10;\n      this.cansend = this.credits;\n      this.ackn = this.credits;\n   }\n\n   /** @summary Returns arguments specified in the RWebWindow::SetUserArgs() method\n     * @desc Can be any valid JSON expression. Undefined by default.\n     * @param {string} [field] - if specified and user args is object, returns correspondent object member\n     * @returns user arguments object */\n   getUserArgs(field) {\n      if (field && (typeof field == 'string'))\n         return (this.user_args && (typeof this.user_args == 'object')) ? this.user_args[field] : undefined;\n\n      return this.user_args;\n   }\n\n   /** @summary Set user args\n     * @desc Normally set via RWebWindow::SetUserArgs() method */\n   setUserArgs(args) { this.user_args = args; }\n\n   /** @summary Set callbacks receiver.\n     * @param {object} obj - object with receiver functions\n     * @param {function} obj.onWebsocketMsg - called when new data receieved from RWebWindow\n     * @param {function} obj.onWebsocketOpened - called when connection established\n     * @param {function} obj.onWebsocketClosed - called when connection closed\n     * @param {function} obj.onWebsocketError - called when get error via the connection */\n   setReceiver(obj) { this.receiver = obj; }\n\n   /** @summary Cleanup and close connection. */\n   cleanup() {\n      delete this.receiver;\n      this.close(true);\n   }\n\n   /** @summary Invoke method in the receiver.\n    * @private */\n   invokeReceiver(brdcst, method, arg, arg2) {\n      if (this.receiver && (typeof this.receiver[method] == 'function'))\n         this.receiver[method](this, arg, arg2);\n\n      if (brdcst && this.channels) {\n         let ks = Object.keys(this.channels);\n         for (let n = 0; n < ks.length; ++n)\n            this.channels[ks[n]].invokeReceiver(false, method, arg, arg2);\n      }\n   }\n\n   /** @summary Provide data for receiver. When no queue - do it directly.\n    * @private */\n   provideData(chid, _msg, _len) {\n      if (this.wait_first_recv) {\n         console.log(\"FIRST MESSAGE\", chid, _msg);\n         delete this.wait_first_recv;\n         return this.invokeReceiver(false, \"onWebsocketOpened\");\n      }\n\n      if ((chid > 1) && this.channels) {\n         const channel = this.channels[chid];\n         if (channel)\n            return channel.provideData(1, _msg, _len);\n      }\n\n      const force_queue = _len && (_len < 0);\n\n      if (!force_queue && (!this.msgqueue || !this.msgqueue.length))\n         return this.invokeReceiver(false, \"onWebsocketMsg\", _msg, _len);\n\n      if (!this.msgqueue) this.msgqueue = [];\n      if (force_queue) _len = undefined;\n\n      this.msgqueue.push({ ready: true, msg: _msg, len: _len });\n   }\n\n   /** @summary Reserve entry in queue for data, which is not yet decoded.\n    * @private */\n   reserveQueueItem() {\n      if (!this.msgqueue) this.msgqueue = [];\n      let item = { ready: false, msg: null, len: 0 };\n      this.msgqueue.push(item);\n      return item;\n   }\n\n   /** @summary Provide data for item which was reserved before.\n    * @private */\n   markQueueItemDone(item, _msg, _len) {\n      item.ready = true;\n      item.msg = _msg;\n      item.len = _len;\n      this.processQueue();\n   }\n\n   /** @summary Process completed messages in the queue\n     * @private */\n   processQueue() {\n      if (this._loop_msgqueue || !this.msgqueue) return;\n      this._loop_msgqueue = true;\n      while ((this.msgqueue.length > 0) && this.msgqueue[0].ready) {\n         let front = this.msgqueue.shift();\n         this.invokeReceiver(false, \"onWebsocketMsg\", front.msg, front.len);\n      }\n      if (this.msgqueue.length == 0)\n         delete this.msgqueue;\n      delete this._loop_msgqueue;\n   }\n\n   /** @summary Close connection */\n   close(force) {\n      if (this.master) {\n         this.master.send(\"CLOSECH=\" + this.channelid, 0);\n         delete this.master.channels[this.channelid];\n         delete this.master;\n         return;\n      }\n\n      if (this.timerid) {\n         clearTimeout(this.timerid);\n         delete this.timerid;\n      }\n\n      if (this._websocket && (this.state > 0)) {\n         this.state = force ? -1 : 0; // -1 prevent socket from reopening\n         this._websocket.onclose = null; // hide normal handler\n         this._websocket.close();\n         delete this._websocket;\n      }\n   }\n\n   /** @summary Checks number of credits for send operation\n     * @param {number} [numsend = 1] - number of required send operations\n     * @returns true if one allow to send specified number of text message to server */\n   canSend(numsend) { return this.cansend >= (numsend || 1); }\n\n   /** @summary Returns number of possible send operations relative to number of credits */\n   getRelCanSend() { return !this.credits ? 1 : this.cansend / this.credits; }\n\n   /** @summary Send text message via the connection.\n     * @param {string} msg - text message to send\n     * @param {number} [chid] - channel id, 1 by default, 0 used only for internal communication */\n   send(msg, chid) {\n      if (this.master)\n         return this.master.send(msg, this.channelid);\n\n      if (!this._websocket || (this.state <= 0)) return false;\n\n      if (!Number.isInteger(chid)) chid = 1; // when not configured, channel 1 is used - main widget\n\n      if (this.cansend <= 0) console.error('should be queued before sending cansend: ' + this.cansend);\n\n      let prefix = this.ackn + \":\" + this.cansend + \":\" + chid + \":\";\n      this.ackn = 0;\n      this.cansend--; // decrease number of allowed send packets\n\n      this._websocket.send(prefix + msg);\n\n      if ((this.kind === \"websocket\") || (this.kind === \"longpoll\")) {\n         if (this.timerid) clearTimeout(this.timerid);\n         this.timerid = setTimeout(() => this.keepAlive(), 10000);\n      }\n\n      return true;\n   }\n\n   /** @summary Inject message(s) into input queue, for debug purposes only\n     * @private */\n   inject(msg, chid, immediate) {\n      // use timeout to avoid too deep call stack\n      if (!immediate)\n         return setTimeout(this.inject.bind(this, msg, chid, true), 0);\n\n      if (chid === undefined) chid = 1;\n\n      if (Array.isArray(msg)) {\n         for (let k = 0; k < msg.length; ++k)\n            this.provideData(chid, (typeof msg[k] == \"string\") ? msg[k] : JSON.stringify(msg[k]), -1);\n         this.processQueue();\n      } else if (msg) {\n         this.provideData(chid, typeof msg == \"string\" ? msg : JSON.stringify(msg));\n      }\n   }\n\n   /** @summary Send keep-alive message.\n     * @desc Only for internal use, only when used with websockets\n     * @private */\n   keepAlive() {\n      delete this.timerid;\n      this.send(\"KEEPALIVE\", 0);\n   }\n\n   /** @summary Method open channel, which will share same connection, but can be used independently from main\n     * @private */\n   createChannel() {\n      if (this.master)\n         return master.createChannel();\n\n      let channel = new WebWindowHandle(\"channel\", this.credits);\n      channel.wait_first_recv = true; // first received message via the channel is confirmation of established connection\n\n      if (!this.channels) {\n         this.channels = {};\n         this.freechannelid = 2;\n      }\n\n      channel.master = this;\n      channel.channelid = this.freechannelid++;\n\n      // register\n      this.channels[channel.channelid] = channel;\n\n      // now server-side entity should be initialized and init message send from server side!\n      return channel;\n   }\n\n   /** @summary Returns used channel ID, 1 by default */\n   getChannelId() { return this.channelid && this.master ? this.channelid : 1; }\n\n   /** @summary Assign href parameter\n     * @param {string} [path] - absolute path, when not specified window.location.url will be used\n     * @private */\n   setHRef(path) { this.href = path; }\n\n   /** @summary Return href part\n     * @param {string} [relative_path] - relative path to the handle\n     * @private */\n   getHRef(relative_path) {\n      if (!relative_path || !this.kind || !this.href) return this.href;\n\n      let addr = this.href;\n      if (relative_path.indexOf(\"../\")==0) {\n         let ddd = addr.lastIndexOf(\"/\",addr.length-2);\n         addr = addr.slice(0,ddd) + relative_path.slice(2);\n      } else {\n         addr += relative_path;\n      }\n\n      return addr;\n   }\n\n   /** @summary Create configured socket for current object.\n     * @private */\n   connect(href) {\n\n      this.close();\n      if (!href && this.href) href = this.href;\n\n      let ntry = 0, args = (this.key ? (\"key=\" + this.key) : \"\");\n      if (this.token) {\n         if (args) args += \"&\";\n         args += \"token=\" + this.token;\n      }\n\n      const retry_open = first_time => {\n\n         if (this.state != 0) return;\n\n         if (!first_time) console.log(\"try connect window again \" + new Date().toString());\n\n         if (this._websocket) {\n            this._websocket.close();\n            delete this._websocket;\n         }\n\n         if (!href) {\n            href = window.location.href;\n            if (href && href.indexOf(\"#\") > 0) href = href.slice(0, href.indexOf(\"#\"));\n            if (href && href.lastIndexOf(\"/\") > 0) href = href.slice(0, href.lastIndexOf(\"/\") + 1);\n         }\n         this.href = href;\n         ntry++;\n\n         if (first_time) console.log('Opening web socket at ' + href);\n\n         if (ntry > 2) showProgress(\"Trying to connect \" + href);\n\n         let path = href;\n\n         if (this.kind == \"file\") {\n            path += \"root.filedump\";\n            this._websocket = new FileDumpSocket(this);\n            console.log('configure protocol log ' + path);\n         } else if ((this.kind === 'websocket') && first_time) {\n            path = path.replace(\"http://\", \"ws://\").replace(\"https://\", \"wss://\") + \"root.websocket\";\n            if (args) path += \"?\" + args;\n            console.log('configure websocket ' + path);\n            this._websocket = new WebSocket(path);\n         } else {\n            path += \"root.longpoll\";\n            console.log('configure longpoll ' + path);\n            this._websocket = new LongPollSocket(path, (this.kind === 'rawlongpoll'), args);\n         }\n\n         if (!this._websocket) return;\n\n         this._websocket.onopen = () => {\n            if (ntry > 2) showProgress();\n            this.state = 1;\n\n            let key = this.key || \"\";\n\n            this.send(\"READY=\" + key, 0); // need to confirm connection\n            this.invokeReceiver(false, \"onWebsocketOpened\");\n         };\n\n         this._websocket.onmessage = e => {\n            let msg = e.data;\n\n            if (this.next_binary) {\n\n               let binchid = this.next_binary;\n               delete this.next_binary;\n\n               if (msg instanceof Blob) {\n                  // this is case of websocket\n                  // console.log('Get Blob object - convert to buffer array');\n                  let reader = new FileReader, qitem = this.reserveQueueItem();\n                  // The file's text will be printed here\n                  reader.onload = event => this.markQueueItemDone(qitem, event.target.result, 0);\n                  reader.readAsArrayBuffer(msg, e.offset || 0);\n               } else {\n                  // console.log('got array ' + (typeof msg) + ' len = ' + msg.byteLength);\n                  // this is from CEF or LongPoll handler\n                  this.provideData(binchid, msg, e.offset || 0);\n               }\n\n               return;\n            }\n\n            if (typeof msg != 'string') return console.log(\"unsupported message kind: \" + (typeof msg));\n\n            let i1 = msg.indexOf(\":\"),\n               credit = parseInt(msg.slice(0, i1)),\n               i2 = msg.indexOf(\":\", i1 + 1),\n               // cansend = parseInt(msg.slice(i1 + 1, i2)),  // TODO: take into account when sending messages\n               i3 = msg.indexOf(\":\", i2 + 1),\n               chid = parseInt(msg.slice(i2 + 1, i3));\n\n            this.ackn++;            // count number of received packets,\n            this.cansend += credit; // how many packets client can send\n\n            msg = msg.slice(i3 + 1);\n\n            if (chid == 0) {\n               console.log('GET chid=0 message', msg);\n               if (msg == \"CLOSE\") {\n                  this.close(true); // force closing of socket\n                  this.invokeReceiver(true, \"onWebsocketClosed\");\n               }\n            } else if (msg == \"$$binary$$\") {\n               this.next_binary = chid;\n            } else if (msg == \"$$nullbinary$$\") {\n               this.provideData(chid, new ArrayBuffer(0), 0);\n            } else {\n               this.provideData(chid, msg);\n            }\n\n            if (this.ackn > 7)\n               this.send('READY', 0); // send dummy message to server\n         };\n\n         this._websocket.onclose = arg => {\n            delete this._websocket;\n            if ((this.state > 0) || (arg === \"force_close\")) {\n               console.log('websocket closed');\n               this.state = 0;\n               this.invokeReceiver(true, \"onWebsocketClosed\");\n            }\n         };\n\n         this._websocket.onerror = err => {\n            console.log(`websocket error ${err} state ${this.state}`);\n            if (this.state > 0) {\n               this.invokeReceiver(true, \"onWebsocketError\", err);\n               this.state = 0;\n            }\n         };\n\n         // only in interactive mode try to reconnect\n         if (!isBatchMode())\n            setTimeout(retry_open, 3000); // after 3 seconds try again\n\n      } // retry_open\n\n      retry_open(true); // call for the first time\n   }\n\n} // class WebWindowHandle\n\n\n/** @summary Method used to initialize connection to web window.\n  * @param {object} arg - arguments\n  * @param {string} [arg.socket_kind] - kind of connection longpoll|websocket, detected automatically from URL\n  * @param {number} [arg.credits = 10] - number of packets which can be send to server without acknowledge\n  * @param {object} arg.receiver - instance of receiver for websocket events, allows to initiate connection immediately\n  * @param {string} [arg.first_recv] - required prefix in the first message from RWebWindow, remain part of message will be returned in handle.first_msg\n  * @param {string} [arg.href] - URL to RWebWindow, using window.location.href by default\n  * @returns {Promise} ready-to-use {@link WebWindowHandle} instance  */\nfunction connectWebWindow(arg) {\n\n   if (typeof arg == 'function')\n      arg = { callback: arg };\n   else if (!arg || (typeof arg != 'object'))\n      arg = {};\n\n   let d = decodeUrl();\n\n   // special holder script, prevents headless chrome browser from too early exit\n   if (d.has(\"headless\") && d.get(\"key\") && (browser.isChromeHeadless || browser.isChrome) && !arg.ignore_chrome_batch_holder)\n      loadScript(\"root_batch_holder.js?key=\" + d.get(\"key\"));\n\n   if (!arg.platform)\n      arg.platform = d.get(\"platform\");\n\n   if (arg.platform == \"qt5\")\n      browser.qt5 = true;\n   else if (arg.platform == \"cef3\")\n      browser.cef3 = true;\n\n   if (arg.batch === undefined)\n      arg.batch = d.has(\"headless\");\n\n   if (arg.batch) setBatchMode(true);\n\n   if (!arg.socket_kind)\n      arg.socket_kind = d.get(\"ws\");\n\n   if (!arg.socket_kind) {\n      if (browser.qt5)\n         arg.socket_kind = \"rawlongpoll\";\n      else if (browser.cef3)\n         arg.socket_kind = \"longpoll\";\n      else\n         arg.socket_kind = \"websocket\";\n   }\n\n   // only for debug purposes\n   // arg.socket_kind = \"longpoll\";\n\n   let main = new Promise(resolveFunc => {\n      let handle = new WebWindowHandle(arg.socket_kind, arg.credits);\n      handle.setUserArgs(arg.user_args);\n      if (arg.href) handle.setHRef(arg.href); // apply href now  while connect can be called from other place\n\n      if (window) {\n         window.onbeforeunload = () => handle.close(true);\n         if (browser.qt5) window.onqt5unload = window.onbeforeunload;\n      }\n\n      handle.key = d.get(\"key\");\n      handle.token = d.get(\"token\");\n\n      if (arg.receiver) {\n         // when receiver exists, it handles itself callbacks\n         handle.setReceiver(arg.receiver);\n         handle.connect();\n         return resolveFunc(handle);\n      }\n\n      if (!arg.first_recv)\n         return resolveFunc(handle);\n\n      handle.setReceiver({\n         onWebsocketOpened() {}, // dummy function when websocket connected\n\n         onWebsocketMsg(handle, msg) {\n            if (msg.indexOf(arg.first_recv) != 0)\n               return handle.close();\n            handle.first_msg = msg.slice(arg.first_recv.length);\n            resolveFunc(handle);\n         },\n\n         onWebsocketClosed() { closeCurrentWindow(); } // when connection closed, close panel as well\n      });\n\n      handle.connect();\n   });\n\n   if (!arg.ui5) return main;\n\n   return Promise.all([main, loadOpenui5(arg)]).then(arr => arr[0]);\n}\n\nexport { WebWindowHandle, connectWebWindow };\n","import { settings, create, parse, registerMethods, isBatchMode } from '../core.mjs';\nimport { select as d3_select, rgb as d3_rgb } from '../d3.mjs';\nimport { closeCurrentWindow, showProgress, loadOpenui5, ToolbarIcons } from '../gui/utils.mjs';\nimport { GridDisplay, getHPainter } from '../gui/display.mjs';\nimport { selectActivePad, cleanup, resize } from '../base/ObjectPainter.mjs';\nimport { RObjectPainter } from '../base/RObjectPainter.mjs';\nimport { RAxisPainter } from './RAxisPainter.mjs';\nimport { RFramePainter } from './RFramePainter.mjs';\nimport { RPadPainter } from './RPadPainter.mjs';\nimport { addDragHandler } from './TFramePainter.mjs';\nimport { WebWindowHandle } from '../webwindow.mjs';\n\n\n/**\n * @summary Painter class for RCanvas\n *\n * @private\n */\n\nclass RCanvasPainter extends RPadPainter {\n\n   /** @summary constructor */\n   constructor(dom, canvas) {\n      super(dom, canvas, true);\n      this._websocket = null;\n      this.tooltip_allowed = settings.Tooltip;\n      this.v7canvas = true;\n   }\n\n   /** @summary Cleanup canvas painter */\n   cleanup() {\n      delete this._websocket;\n      delete this._submreq;\n\n     if (this._changed_layout)\n         this.setLayoutKind('simple');\n      delete this._changed_layout;\n\n      super.cleanup();\n   }\n\n   /** @summary Returns layout kind */\n   getLayoutKind() {\n      let origin = this.selectDom('origin'),\n         layout = origin.empty() ? \"\" : origin.property('layout');\n      return layout || 'simple';\n   }\n\n   /** @summary Set canvas layout kind */\n   setLayoutKind(kind, main_selector) {\n      let origin = this.selectDom('origin');\n      if (!origin.empty()) {\n         if (!kind) kind = 'simple';\n         origin.property('layout', kind);\n         origin.property('layout_selector', (kind != 'simple') && main_selector ? main_selector : null);\n         this._changed_layout = (kind !== 'simple'); // use in cleanup\n      }\n   }\n\n   /** @summary Changes layout\n     * @returns {Promise} indicating when finished */\n   changeLayout(layout_kind, mainid) {\n      let current = this.getLayoutKind();\n      if (current == layout_kind)\n         return Promise.resolve(true);\n\n      let origin = this.selectDom('origin'),\n          sidebar = origin.select('.side_panel'),\n          main = this.selectDom(), lst = [];\n\n      while (main.node().firstChild)\n         lst.push(main.node().removeChild(main.node().firstChild));\n\n      if (!sidebar.empty()) cleanup(sidebar.node());\n\n      this.setLayoutKind(\"simple\"); // restore defaults\n      origin.html(\"\"); // cleanup origin\n\n      if (layout_kind == 'simple') {\n         main = origin;\n         for (let k = 0; k < lst.length; ++k)\n            main.node().appendChild(lst[k]);\n         this.setLayoutKind(layout_kind);\n      } else {\n         let grid = new GridDisplay(origin.node(), layout_kind);\n\n         if (mainid == undefined)\n            mainid = (layout_kind.indexOf(\"vert\") == 0) ? 0 : 1;\n\n         main = d3_select(grid.getGridFrame(mainid));\n         sidebar = d3_select(grid.getGridFrame(1 - mainid));\n\n         main.classed(\"central_panel\", true).style('position', 'relative');\n         sidebar.classed(\"side_panel\", true).style('position', 'relative');\n\n         // now append all childs to the new main\n         for (let k = 0; k < lst.length; ++k)\n            main.node().appendChild(lst[k]);\n\n         this.setLayoutKind(layout_kind, \".central_panel\");\n\n         // remove reference to MDIDisplay, solves resize problem\n         origin.property('mdi', null);\n      }\n\n      // resize main drawing and let draw extras\n      resize(main.node());\n      return Promise.resolve(true);\n   }\n\n   /** @summary Toggle projection\n     * @returns {Promise} indicating when ready\n     * @private */\n   toggleProjection(kind) {\n      delete this.proj_painter;\n\n      if (kind) this.proj_painter = 1; // just indicator that drawing can be preformed\n\n      if (this.showUI5ProjectionArea)\n         return this.showUI5ProjectionArea(kind);\n\n      let layout = 'simple', mainid;\n\n      switch(kind) {\n         case \"X\":\n         case \"bottom\": layout = 'vert2_31'; mainid = 0; break;\n         case \"Y\":\n         case \"left\": layout = 'horiz2_13'; mainid = 1; break;\n         case \"top\": layout = 'vert2_13'; mainid = 1; break;\n         case \"right\": layout = 'horiz2_31'; mainid = 0; break;\n      }\n\n      return this.changeLayout(layout, mainid);\n   }\n\n   /** @summary Draw projection for specified histogram\n     * @private */\n   drawProjection( /*kind,hist*/) {\n      // dummy for the moment\n   }\n\n   /** @summary Draw in side panel\n     * @private */\n   drawInSidePanel(canv, opt) {\n      let side = this.selectDom('origin').select(\".side_panel\");\n      if (side.empty()) return Promise.resolve(null);\n      return this.drawObject(side.node(), canv, opt);\n   }\n\n   /** @summary Checks if canvas shown inside ui5 widget\n     * @desc Function should be used only from the func which supposed to be replaced by ui5\n     * @private */\n   testUI5() {\n      if (!this.use_openui) return false;\n      console.warn(\"full ui5 should be used - not loaded yet? Please check!!\");\n      return true;\n   }\n\n   /** @summary Show message\n     * @desc Used normally with web-based canvas and handled in ui5\n     * @private */\n   showMessage(msg) {\n      if (!this.testUI5())\n         showProgress(msg, 7000);\n   }\n\n   /** @summary Function called when canvas menu item Save is called */\n   saveCanvasAsFile(fname) {\n      let pnt = fname.indexOf(\".\");\n      this.createImage(fname.slice(pnt+1))\n          .then(res => { console.log('save', fname, res.length); this.sendWebsocket(\"SAVE:\" + fname + \":\" + res); });\n   }\n\n   /** @summary Send command to server to save canvas with specified name\n     * @desc Should be only used in web-based canvas\n     * @private */\n   sendSaveCommand(fname) {\n      this.sendWebsocket(\"PRODUCE:\" + fname);\n   }\n\n   /** @summary Send message via web socket\n     * @private */\n   sendWebsocket(msg, chid) {\n      if (this._websocket)\n         this._websocket.send(msg, chid);\n   }\n\n   /** @summary Close websocket connection to canvas\n     * @private */\n   closeWebsocket(force) {\n      if (this._websocket) {\n         this._websocket.close(force);\n         this._websocket.cleanup();\n         delete this._websocket;\n      }\n   }\n\n   /** @summary Use provided connection for the web canvas\n     * @private */\n   useWebsocket(handle) {\n      this.closeWebsocket();\n\n      this._websocket = handle;\n      this._websocket.setReceiver(this);\n      this._websocket.connect();\n   }\n\n   /** @summary Hanler for websocket open event\n     * @private */\n   onWebsocketOpened(/*handle*/) {\n   }\n\n   /** @summary Hanler for websocket close event\n     * @private */\n   onWebsocketClosed(/*handle*/) {\n      if (!this.embed_canvas)\n         closeCurrentWindow();\n   }\n\n   /** @summary Hanler for websocket message\n     * @private */\n   onWebsocketMsg(handle, msg) {\n      console.log(\"GET_MSG \" + msg.slice(0,30));\n\n      if (msg == \"CLOSE\") {\n         this.onWebsocketClosed();\n         this.closeWebsocket(true);\n      } else if (msg.slice(0,5)=='SNAP:') {\n         msg = msg.slice(5);\n         let p1 = msg.indexOf(\":\"),\n             snapid = msg.slice(0,p1),\n             snap = parse(msg.slice(p1+1));\n         this.syncDraw(true)\n             .then(() => this.redrawPadSnap(snap))\n             .then(() => {\n                 handle.send(\"SNAPDONE:\" + snapid); // send ready message back when drawing completed\n                 this.confirmDraw();\n              });\n      } else if (msg.slice(0,4)=='JSON') {\n         let obj = parse(msg.slice(4));\n         // console.log(\"get JSON \", msg.length-4, obj._typename);\n         this.redrawObject(obj);\n      } else if (msg.slice(0,9)==\"REPL_REQ:\") {\n         this.processDrawableReply(msg.slice(9));\n      } else if (msg.slice(0,4)=='CMD:') {\n         msg = msg.slice(4);\n         let p1 = msg.indexOf(\":\"),\n             cmdid = msg.slice(0,p1),\n             cmd = msg.slice(p1+1),\n             reply = \"REPLY:\" + cmdid + \":\";\n         if ((cmd == \"SVG\") || (cmd == \"PNG\") || (cmd == \"JPEG\")) {\n            this.createImage(cmd.toLowerCase())\n                .then(res => handle.send(reply + res));\n         } else if (cmd.indexOf(\"ADDPANEL:\") == 0) {\n            let relative_path = cmd.slice(9);\n            if (!this.showUI5Panel) {\n               handle.send(reply + \"false\");\n            } else {\n\n               let conn = new WebWindowHandle(handle.kind);\n\n               // set interim receiver until first message arrives\n               conn.setReceiver({\n                  cpainter: this,\n\n                  onWebsocketOpened() {\n                  },\n\n                  onWebsocketMsg(panel_handle, msg) {\n                     let panel_name = (msg.indexOf(\"SHOWPANEL:\")==0) ? msg.slice(10) : \"\";\n                     this.cpainter.showUI5Panel(panel_name, panel_handle)\n                                  .then(res => handle.send(reply + (res ? \"true\" : \"false\")));\n                  },\n\n                  onWebsocketClosed() {\n                     // if connection failed,\n                     handle.send(reply + \"false\");\n                  },\n\n                  onWebsocketError() {\n                     // if connection failed,\n                     handle.send(reply + \"false\");\n                  }\n\n               });\n\n               let addr = handle.href;\n               if (relative_path.indexOf(\"../\")==0) {\n                  let ddd = addr.lastIndexOf(\"/\",addr.length-2);\n                  addr = addr.slice(0,ddd) + relative_path.slice(2);\n               } else {\n                  addr += relative_path;\n               }\n               // only when connection established, panel will be activated\n               conn.connect(addr);\n            }\n         } else {\n            console.log('Unrecognized command ' + cmd);\n            handle.send(reply);\n         }\n      } else if ((msg.slice(0,7)=='DXPROJ:') || (msg.slice(0,7)=='DYPROJ:')) {\n         let kind = msg[1],\n             hist = parse(msg.slice(7));\n         this.drawProjection(kind, hist);\n      } else if (msg.slice(0,5)=='SHOW:') {\n         let that = msg.slice(5),\n             on = that[that.length-1] == '1';\n         this.showSection(that.slice(0,that.length-2), on);\n      } else {\n         console.log(\"unrecognized msg len:\" + msg.length + \" msg:\" + msg.slice(0,20));\n      }\n   }\n\n   /** @summary Submit request to RDrawable object on server side */\n   submitDrawableRequest(kind, req, painter, method) {\n\n      if (!this._websocket || !req || !req._typename ||\n          !painter.snapid || (typeof painter.snapid != \"string\")) return null;\n\n      if (kind && method) {\n         // if kind specified - check if such request already was submitted\n         if (!painter._requests) painter._requests = {};\n\n         let prevreq = painter._requests[kind];\n\n         if (prevreq) {\n            let tm = new Date().getTime();\n            if (!prevreq._tm || (tm - prevreq._tm < 5000)) {\n               prevreq._nextreq = req; // submit when got reply\n               return false;\n            }\n            delete painter._requests[kind]; // let submit new request after timeout\n         }\n\n         painter._requests[kind] = req; // keep reference on the request\n      }\n\n      req.id = painter.snapid;\n\n      if (method) {\n         if (!this._nextreqid) this._nextreqid = 1;\n         req.reqid = this._nextreqid++;\n      } else {\n         req.reqid = 0; // request will not be replied\n      }\n\n      let msg = JSON.stringify(req);\n\n      if (req.reqid) {\n         req._kind = kind;\n         req._painter = painter;\n         req._method = method;\n         req._tm = new Date().getTime();\n\n         if (!this._submreq) this._submreq = {};\n         this._submreq[req.reqid] = req; // fast access to submitted requests\n      }\n\n      // console.log('Sending request ', msg.slice(0,60));\n\n      this.sendWebsocket(\"REQ:\" + msg);\n      return req;\n   }\n\n   /** @summary Submit menu request\n     * @private */\n   submitMenuRequest(painter, menukind, reqid) {\n      return new Promise(resolveFunc => {\n         this.submitDrawableRequest(\"\", {\n            _typename: \"ROOT::Experimental::RDrawableMenuRequest\",\n            menukind: menukind || \"\",\n            menureqid: reqid, // used to identify menu request\n         }, painter, resolveFunc);\n      });\n   }\n\n   /** @summary Submit executable command for given painter */\n   submitExec(painter, exec, subelem) {\n      // snapid is intentionally ignored - only painter.snapid has to be used\n      if (!this._websocket) return;\n\n      if (subelem && (typeof subelem == 'string')) {\n         let len = subelem.length;\n         if ((len > 2) && (subelem.indexOf(\"#x\") == len - 2)) subelem = \"x\"; else\n         if ((len > 2) && (subelem.indexOf(\"#y\") == len - 2)) subelem = \"y\"; else\n         if ((len > 2) && (subelem.indexOf(\"#z\") == len - 2)) subelem = \"z\";\n\n         if ((subelem == \"x\") || (subelem == \"y\") || (subelem == \"z\"))\n            exec = subelem + \"axis#\" + exec;\n         else\n            return console.log(`not recoginzed subelem ${subelem} in SubmitExec`);\n       }\n\n      this.submitDrawableRequest(\"\", {\n         _typename: \"ROOT::Experimental::RDrawableExecRequest\",\n         exec: exec\n      }, painter);\n   }\n\n   /** @summary Process reply from request to RDrawable */\n   processDrawableReply(msg) {\n      let reply = parse(msg);\n      if (!reply || !reply.reqid || !this._submreq) return false;\n\n      let req = this._submreq[reply.reqid];\n      if (!req) return false;\n\n      // remove reference first\n      delete this._submreq[reply.reqid];\n\n      // remove blocking reference for that kind\n      if (req._kind && req._painter?._requests)\n         if (req._painter._requests[req._kind] === req)\n            delete req._painter._requests[req._kind];\n\n      if (req._method)\n         req._method(reply, req);\n\n      // resubmit last request of that kind\n      if (req._nextreq && !req._painter._requests[req._kind])\n         this.submitDrawableRequest(req._kind, req._nextreq, req._painter, req._method);\n   }\n\n   /** @summary Show specified section in canvas */\n   showSection(that, on) {\n      switch(that) {\n         case \"Menu\": break;\n         case \"StatusBar\": break;\n         case \"Editor\": break;\n         case \"ToolBar\": break;\n         case \"ToolTips\": this.setTooltipAllowed(on); break;\n      }\n      return Promise.resolve(true);\n   }\n\n   /** @summary Method informs that something was changed in the canvas\n     * @desc used to update information on the server (when used with web6gui)\n     * @private */\n   processChanges(kind, painter, subelem) {\n      // check if we could send at least one message more - for some meaningful actions\n      if (!this._websocket || !this._websocket.canSend(2) || (typeof kind !== \"string\")) return;\n\n      let msg = \"\";\n      if (!painter) painter = this;\n      switch (kind) {\n         case \"sbits\":\n            console.log(\"Status bits in RCanvas are changed - that to do?\");\n            break;\n         case \"frame\": // when moving frame\n         case \"zoom\":  // when changing zoom inside frame\n            console.log(\"Frame moved or zoom is changed - that to do?\");\n            break;\n         case \"pave_moved\":\n            console.log('TPave is moved inside RCanvas - that to do?');\n            break;\n         default:\n            if ((kind.slice(0,5) == \"exec:\") && painter?.snapid) {\n               this.submitExec(painter, kind.slice(5), subelem);\n            } else {\n               console.log(\"UNPROCESSED CHANGES\", kind);\n            }\n      }\n\n      if (msg) {\n         console.log(\"RCanvas::processChanges want to send  \" + msg.length + \"  \" + msg.slice(0,40));\n      }\n   }\n\n   /** @summary Handle pad button click event\n     * @private */\n   clickPadButton(funcname, evnt) {\n      if (funcname == \"ToggleGed\") return this.activateGed(this, null, \"toggle\");\n      if (funcname == \"ToggleStatus\") return this.activateStatusBar(\"toggle\");\n      super.clickPadButton(funcname, evnt);\n   }\n\n   /** @summary returns true when event status area exist for the canvas */\n   hasEventStatus() {\n      if (this.testUI5()) return false;\n      if (this.brlayout)\n         return this.brlayout.hasStatus();\n      let hp = getHPainter();\n      return hp ? hp.hasStatusLine() : false;\n   }\n\n   /** @summary Show/toggle event status bar\n     * @private */\n   activateStatusBar(state) {\n      if (this.testUI5()) return;\n      if (this.brlayout)\n         this.brlayout.createStatusLine(23, state);\n      else\n         getHPainter()?.createStatusLine(23, state);\n\n      this.processChanges(\"sbits\", this);\n   }\n\n   /** @summary Returns true if GED is present on the canvas */\n   hasGed() {\n      if (this.testUI5()) return false;\n      return this.brlayout?.hasContent() ?? false;\n   }\n\n   /** @summary Function used to de-activate GED\n     * @private */\n   removeGed() {\n      if (this.testUI5()) return;\n\n      this.registerForPadEvents(null);\n\n      if (this.ged_view) {\n         this.ged_view.getController().cleanupGed();\n         this.ged_view.destroy();\n         delete this.ged_view;\n      }\n      this.brlayout?.deleteContent();\n\n      this.processChanges(\"sbits\", this);\n   }\n\n   /** @summary Function used to activate GED\n     * @returns {Promise} when GED is there\n     * @private */\n   activateGed(objpainter, kind, mode) {\n      if (this.testUI5() || !this.brlayout)\n         return Promise.resolve(false);\n\n      if (this.brlayout.hasContent()) {\n         if ((mode === \"toggle\") || (mode === false))\n            this.removeGed();\n         else\n            objpainter?.getPadPainter()?.selectObjectPainter(objpainter);\n\n         return Promise.resolve(true);\n      }\n\n      if (mode === false)\n         return Promise.resolve(false);\n\n      let btns = this.brlayout.createBrowserBtns();\n\n      ToolbarIcons.createSVG(btns, ToolbarIcons.diamand, 15, \"toggle fix-pos mode\")\n                  .style(\"margin\",\"3px\").on(\"click\", () => this.brlayout.toggleKind('fix'));\n\n      ToolbarIcons.createSVG(btns, ToolbarIcons.circle, 15, \"toggle float mode\")\n                  .style(\"margin\",\"3px\").on(\"click\", () => this.brlayout.toggleKind('float'));\n\n      ToolbarIcons.createSVG(btns, ToolbarIcons.cross, 15, \"delete GED\")\n                  .style(\"margin\",\"3px\").on(\"click\", () => this.removeGed());\n\n      // be aware, that jsroot_browser_hierarchy required for flexible layout that element use full browser area\n      this.brlayout.setBrowserContent(\"<div class='jsroot_browser_hierarchy' id='ged_placeholder'>Loading GED ...</div>\");\n      this.brlayout.setBrowserTitle(\"GED\");\n      this.brlayout.toggleBrowserKind(kind || \"float\");\n\n      return new Promise(resolveFunc => {\n\n         loadOpenui5.then(sap => {\n\n            d3_select(\"#ged_placeholder\").text(\"\");\n\n            sap.ui.define([\"sap/ui/model/json/JSONModel\", \"sap/ui/core/mvc/XMLView\"], (JSONModel,XMLView) => {\n\n               let oModel = new JSONModel({ handle: null });\n\n               XMLView.create({\n                  viewName: \"rootui5.canv.view.Ged\"\n               }).then(oGed => {\n\n                  oGed.setModel(oModel);\n\n                  oGed.placeAt(\"ged_placeholder\");\n\n                  this.ged_view = oGed;\n\n                  // TODO: should be moved into Ged controller - it must be able to detect canvas painter itself\n                  this.registerForPadEvents(oGed.getController().padEventsReceiver.bind(oGed.getController()));\n\n                  objpainter?.getPadPainter()?.selectObjectPainter(objpainter);\n\n                  this.processChanges(\"sbits\", this);\n\n                  resolveFunc(true);\n               });\n            });\n         });\n      });\n   }\n\n   /** @summary produce JSON for RCanvas, which can be used to display canvas once again\n     * @private */\n   produceJSON() {\n      console.error('RCanvasPainter.produceJSON not yet implemented');\n      return \"\";\n   }\n\n   /** @summary draw RCanvas object */\n   static draw(dom, can /*, opt */) {\n      let nocanvas = !can;\n      if (nocanvas)\n         can = create(\"ROOT::Experimental::TCanvas\");\n\n      let painter = new RCanvasPainter(dom, can);\n      painter.normal_canvas = !nocanvas;\n      painter.createCanvasSvg(0);\n\n      selectActivePad({ pp: painter, active: false });\n\n      return painter.drawPrimitives().then(() => {\n         painter.addPadButtons();\n         painter.showPadButtons();\n         return painter;\n      });\n   }\n\n} // class RCanvasPainter\n\n\n/** @summary draw RPadSnapshot object\n  * @private */\nfunction drawRPadSnapshot(dom, snap /*, opt*/) {\n   let painter = new RCanvasPainter(dom, null);\n   painter.normal_canvas = false;\n   painter.batch_mode = isBatchMode();\n   return painter.syncDraw(true).then(() => painter.redrawPadSnap(snap)).then(() => {\n      painter.confirmDraw();\n      painter.showPadButtons();\n      return painter;\n   });\n}\n\n/** @summary Ensure RCanvas and RFrame for the painter object\n  * @param {Object} painter  - painter object to process\n  * @param {string|boolean} frame_kind  - false for no frame or \"3d\" for special 3D mode\n  * @desc Assigns DOM, creates and draw RCanvas and RFrame if necessary, add painter to pad list of painters\n  * @returns {Promise} for ready */\nfunction ensureRCanvas(painter, frame_kind) {\n   if (!painter)\n      return Promise.reject(Error('Painter not provided in ensureRCanvas'));\n\n   // simple check - if canvas there, can use painter\n   let pr = painter.getCanvSvg().empty() ? RCanvasPainter.draw(painter.getDom(), null /* , noframe */) : Promise.resolve(true);\n\n   return pr.then(() => {\n      if ((frame_kind !== false) && painter.getFrameSvg().select(\".main_layer\").empty())\n         return RFramePainter.draw(painter.getDom(), null, (typeof frame_kind === \"string\") ? frame_kind : \"\");\n   }).then(() => {\n      painter.addToPadPrimitives();\n      return painter;\n   });\n}\n\n\n/** @summary Function used for direct draw of RFrameTitle\n  * @private */\nfunction drawRFrameTitle(reason, drag) {\n   let fp = this.getFramePainter();\n   if (!fp)\n      return console.log('no frame painter - no title');\n\n   let rect         = fp.getFrameRect(),\n       fx           = rect.x,\n       fy           = rect.y,\n       fw           = rect.width,\n       // fh           = rect.height,\n       ph           = this.getPadPainter().getPadHeight(),\n       title        = this.getObject(),\n       title_margin = this.v7EvalLength(\"margin\", ph, 0.02),\n       title_width  = fw,\n       title_height = this.v7EvalLength(\"height\", ph, 0.05),\n       textFont     = this.v7EvalFont(\"text\", { size: 0.07, color: \"black\", align: 22 });\n\n   if (reason == 'drag') {\n      title_height = drag.height;\n      title_margin = fy - drag.y - drag.height;\n      let changes = {};\n      this.v7AttrChange(changes, \"margin\", title_margin / ph);\n      this.v7AttrChange(changes, \"height\", title_height / ph);\n      this.v7SendAttrChanges(changes, false); // do not invoke canvas update on the server\n   }\n\n   this.createG();\n\n   this.draw_g.attr(\"transform\",`translate(${fx},${Math.round(fy-title_margin-title_height)})`);\n\n   let arg = { x: title_width/2, y: title_height/2, text: title.fText, latex: 1 };\n\n   this.startTextDrawing(textFont, 'font');\n\n   this.drawText(arg);\n\n   return this.finishTextDrawing().then(() => {\n      if (!isBatchMode())\n        addDragHandler(this, { x: fx, y: Math.round(fy-title_margin-title_height), width: title_width, height: title_height,\n                               minwidth: 20, minheight: 20, no_change_x: true, redraw: d => this.redraw('drag', d) });\n   });\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////\n\nregisterMethods(\"ROOT::Experimental::RPalette\", {\n\n   extractRColor(rcolor) {\n     return rcolor.fColor || \"black\";\n   },\n\n   getColor(indx) {\n      return this.palette[indx];\n   },\n\n   getContourIndex(zc) {\n      let cntr = this.fContour, l = 0, r = cntr.length-1, mid;\n\n      if (zc < cntr[0]) return -1;\n      if (zc >= cntr[r]) return r-1;\n\n      if (this.fCustomContour) {\n         while (l < r-1) {\n            mid = Math.round((l+r)/2);\n            if (cntr[mid] > zc) r = mid; else l = mid;\n         }\n         return l;\n      }\n\n      // last color in palette starts from level cntr[r-1]\n      return Math.floor((zc-cntr[0]) / (cntr[r-1] - cntr[0]) * (r-1));\n   },\n\n   getContourColor(zc) {\n      let zindx = this.getContourIndex(zc);\n      return (zindx < 0) ? \"\" : this.getColor(zindx);\n   },\n\n   getContour() {\n      return this.fContour && (this.fContour.length > 1) ? this.fContour : null;\n   },\n\n   deleteContour() {\n      delete this.fContour;\n   },\n\n   calcColor(value, entry1, entry2) {\n      let dist = entry2.fOrdinal - entry1.fOrdinal,\n          r1 = entry2.fOrdinal - value,\n          r2 = value - entry1.fOrdinal;\n\n      if (!this.fInterpolate || (dist <= 0))\n         return (r1 < r2) ? entry2.fColor : entry1.fColor;\n\n      // interpolate\n      let col1 = d3_rgb(this.extractRColor(entry1.fColor)),\n          col2 = d3_rgb(this.extractRColor(entry2.fColor)),\n          color = d3_rgb(Math.round((col1.r*r1 + col2.r*r2)/dist),\n                         Math.round((col1.g*r1 + col2.g*r2)/dist),\n                         Math.round((col1.b*r1 + col2.b*r2)/dist));\n\n      return color.toString();\n   },\n\n   createPaletteColors(len) {\n      let arr = [], indx = 0;\n\n      while (arr.length < len) {\n         let value = arr.length / (len-1);\n\n         let entry = this.fColors[indx];\n\n         if ((Math.abs(entry.fOrdinal - value)<0.0001) || (indx == this.fColors.length - 1)) {\n            arr.push(this.extractRColor(entry.fColor));\n            continue;\n         }\n\n         let next = this.fColors[indx+1];\n         if (next.fOrdinal <= value)\n            indx++;\n         else\n            arr.push(this.calcColor(value, entry, next));\n      }\n\n      return arr;\n   },\n\n   getColorOrdinal(value) {\n      // extract color with ordinal value between 0 and 1\n      if (!this.fColors)\n         return \"black\";\n      if ((typeof value != \"number\") || (value < 0))\n         value = 0;\n      else if (value > 1)\n         value = 1;\n\n      // TODO: implement better way to find index\n\n      let entry, next = this.fColors[0];\n      for (let indx = 0; indx < this.fColors.length-1; ++indx) {\n         entry = next;\n\n         if (Math.abs(entry.fOrdinal - value) < 0.0001)\n            return this.extractRColor(entry.fColor);\n\n         next = this.fColors[indx+1];\n         if (next.fOrdinal > value)\n            return this.calcColor(value, entry, next);\n      }\n\n      return this.extractRColor(next.fColor);\n   },\n\n   setFullRange(min, max) {\n      // set full z scale range, used in zooming\n      this.full_min = min;\n      this.full_max = max;\n   },\n\n   createContour(logz, nlevels, zmin, zmax, zminpositive) {\n      this.fContour = [];\n      delete this.fCustomContour;\n      this.colzmin = zmin;\n      this.colzmax = zmax;\n\n      if (logz) {\n         if (this.colzmax <= 0) this.colzmax = 1.;\n         if (this.colzmin <= 0)\n            if ((zminpositive===undefined) || (zminpositive <= 0))\n               this.colzmin = 0.0001*this.colzmax;\n            else\n               this.colzmin = ((zminpositive < 3) || (zminpositive>100)) ? 0.3*zminpositive : 1;\n         if (this.colzmin >= this.colzmax) this.colzmin = 0.0001*this.colzmax;\n\n         let logmin = Math.log(this.colzmin)/Math.log(10),\n             logmax = Math.log(this.colzmax)/Math.log(10),\n             dz = (logmax-logmin)/nlevels;\n         this.fContour.push(this.colzmin);\n         for (let level=1; level<nlevels; level++)\n            this.fContour.push(Math.exp((logmin + dz*level)*Math.log(10)));\n         this.fContour.push(this.colzmax);\n         this.fCustomContour = true;\n      } else {\n         if ((this.colzmin === this.colzmax) && (this.colzmin !== 0)) {\n            this.colzmax += 0.01*Math.abs(this.colzmax);\n            this.colzmin -= 0.01*Math.abs(this.colzmin);\n         }\n         let dz = (this.colzmax-this.colzmin)/nlevels;\n         for (let level=0; level<=nlevels; level++)\n            this.fContour.push(this.colzmin + dz*level);\n      }\n\n      if (!this.palette || (this.palette.length != nlevels))\n         this.palette = this.createPaletteColors(nlevels);\n   }\n\n});\n\n/** @summary draw RFont object\n  * @private */\nfunction drawRFont() {\n   let font   = this.getObject(),\n       svg    = this.getCanvSvg(),\n       defs   = svg.select('.canvas_defs'),\n       clname = \"custom_font_\" + font.fFamily+font.fWeight+font.fStyle;\n\n   if (defs.empty())\n      defs = svg.insert(\"svg:defs\", \":first-child\").attr(\"class\", \"canvas_defs\");\n\n   let entry = defs.select(\".\" + clname);\n   if (entry.empty())\n      entry = defs.append(\"style\").attr(\"type\", \"text/css\").attr(\"class\", clname);\n\n   entry.text(`@font-face { font-family: \"${font.fFamily}\"; font-weight: ${font.fWeight ? font.fWeight : \"normal\"}; font-style: ${font.fStyle ? font.fStyle : \"normal\"}; src: ${font.fSrc}; }`);\n\n   if (font.fDefault)\n      this.getPadPainter()._dfltRFont = font;\n\n   return true;\n}\n\n/** @summary draw RAxis object\n  * @private */\nfunction drawRAxis(dom, obj, opt) {\n   let painter = new RAxisPainter(dom, obj, opt);\n   painter.disable_zooming = true;\n   return ensureRCanvas(painter, false)\n           .then(() => painter.redraw())\n           .then(() => painter);\n}\n\n/** @summary draw RFrame object\n  * @private */\nfunction drawRFrame(dom, obj, opt) {\n   let p = new RFramePainter(dom, obj);\n   if (opt == \"3d\") p.mode3d = true;\n   return ensureRCanvas(p, false).then(() => p.redraw());\n}\n\nexport { ensureRCanvas, drawRPadSnapshot,\n         drawRFrameTitle, drawRFont, drawRAxis, drawRFrame,\n         RObjectPainter, RPadPainter, RCanvasPainter };\n"]}