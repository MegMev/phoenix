{"version":3,"file":"431.f7e7d4a33928000d.js","mappings":"4QAUA,aACG,IAAIA,EAAYC,KAAKC,YACjBC,EAAYF,KAAKG,gBACjBC,EAAYJ,KAAKK,WAAW,WAAW,GAASH,EAAGI,kBAAoB,KACvEC,IAAYH,GAAUJ,KAAKK,WAAW,YAAY,GAClDG,EAAYN,EAAGO,cAAcV,EAAKW,KAAMN,GACxCO,EAAYX,KAAKY,WAAW,OAAQ,CAAEC,KAAM,GAAIC,MAAO,QAASC,MAAO,KAE3E,YAAKC,QAAQT,EAAW,eAAgBH,GAAU,eAElDJ,KAAKiB,iBAAiBN,EAAU,QAEhCX,KAAKkB,SAAS,CAAEC,EAAGX,EAAEW,EAAGC,EAAGZ,EAAEY,EAAGrB,KAAMA,EAAKsB,MAAOC,MAAO,IAElDtB,KAAKuB,oBAKf,aAEI,IAAIC,EAAWxB,KAAKC,YAChBC,EAAWF,KAAKG,gBAChBC,EAAWJ,KAAKK,WAAW,WAAW,GAASH,EAAGI,kBAAoB,KACtEC,IAAWH,GAAUJ,KAAKK,WAAW,YAAY,GACjDoB,EAAWvB,EAAGO,cAAce,EAAKE,IAAKtB,GACtCuB,EAAWzB,EAAGO,cAAce,EAAKI,IAAKxB,GAE1CJ,KAAKgB,QAAQT,EAAW,eAAgBH,GAAU,eAElDJ,KAAK6B,kBAEL7B,KAAK8B,OACAC,OAAO,YACPC,KAAK,IAAK,IAAGP,EAAGN,KAAKM,EAAGL,KAAKO,EAAGR,KAAKQ,EAAGP,KACxCa,KAAKjC,KAAKkC,QAAQC,MAK3B,aAEG,IAAIC,EAAWpC,KAAKC,YAChBC,EAAWF,KAAKG,gBAChBC,EAAWJ,KAAKK,WAAW,WAAW,GAASH,EAAGI,kBAAoB,KACtEC,IAAWH,GAAUJ,KAAKK,WAAW,YAAY,GACjDoB,EAAWvB,EAAGO,cAAc2B,EAAIV,IAAKtB,GACrCuB,EAAWzB,EAAGO,cAAc2B,EAAIR,IAAKxB,GAEzCJ,KAAKgB,QAAQT,EAAW,eAAgBH,GAAU,eAElDJ,KAAK6B,gBAAgB,WAErB7B,KAAKqC,kBAELrC,KAAK8B,OACAC,OAAO,YACPC,KAAK,IAAK,IAAGP,EAAGN,KAAKM,EAAGL,KAAKO,EAAGR,KAAKQ,EAAGP,KAAKK,EAAGN,MAChDc,KAAKjC,KAAKkC,QAAQC,MAClBF,KAAKjC,KAAKsC,QAAQH,MAK1B,aACI,IAAII,EAAWvC,KAAKC,YAChBC,EAAWF,KAAKG,gBAChBC,EAAWJ,KAAKK,WAAW,WAAW,GAASH,EAAGI,kBAAoB,KACtEC,IAAWH,GAAUJ,KAAKK,WAAW,YAAY,GACjDG,EAAWN,EAAGO,cAAc8B,EAAOC,GAAIpC,GAE3CJ,KAAKgB,QAAQT,EAAW,eAAgBH,GAAU,eAElDJ,KAAKyC,oBAEL,IAAIC,EAAO1C,KAAK2C,UAAUC,OAAOpC,EAAEW,EAAGX,EAAEY,GAEpCsB,GACD1C,KAAK8B,OAAOC,OAAO,YACPC,KAAK,IAAKU,GACVT,KAAKjC,KAAK2C,UAAUR,MAQvC,gBAA8BU,IAG3BC,iBACG,IAAIC,EAAW/C,KAAKC,YAChB+C,EAAMD,EAAWA,EAASE,SAAW,KAEzC,OAAID,IAAQA,EAAIE,WACbC,gBAAWH,EAAK,gCAEZA,EAIVI,YAAYC,GAET,IAAIC,EAAUtD,KAAK8C,iBACfS,EAAUD,EAAQE,aAClBC,EAASzD,KAAKM,kBAElB,IAAKiD,EACF,OAAOG,QAAQC,IAAI,2BAGtB,IAAKF,EACF,OAAOC,QAAQC,IAAI,iCAEtB,IASIC,EAAWC,EAAWC,EAAeC,EATrCC,EAAeV,EAAQW,SACvBC,EAAeZ,EAAQa,SACvBC,EAAeb,EAAQ,GACvBc,EAAed,EAAQA,EAAQe,OAAO,GACtCC,EAAed,EAAOe,eACtBC,EAAezE,KAAKG,gBAAgBuE,cACpCC,EAAe3E,KAAKG,gBAAgByE,eACpCC,EAAe7E,KAAKK,WAAW,WAAW,GAC1CyE,EAAe9E,KAAKK,WAAW,YAAY,GAG/C,GAAIgD,EAAM,CACPS,EAAgBT,EAAK0B,MACrBhB,EAAiBV,EAAK2B,OAEtB,IAAIC,EAAU,GACVH,GACD9E,KAAKkF,aAAaD,EAAS,UAAW5B,EAAKlC,EAAIoD,EAAKpD,EAAIoD,EAAKQ,OAASN,GACtEzE,KAAKkF,aAAaD,EAAS,QAASnB,EAAgBW,KAEpDzE,KAAKkF,aAAaD,EAAS,UAAW5B,EAAKjC,EAAImD,EAAKnD,EAAImD,EAAKS,QAAUP,GACvEzE,KAAKkF,aAAaD,EAAS,QAASlB,EAAiBY,IAExD3E,KAAKmF,kBAAkBF,GAAS,OAC5B,CACH,GAAIH,EAAU,CACZ,IAAIM,EAASpF,KAAKqF,aAAa,SAAUZ,EAAW,KACpDb,EAAY0B,KAAKC,MAAMhB,EAAKpD,EAAIoD,EAAKQ,MAAQK,GAC7CtB,EAAgB9D,KAAKqF,aAAa,QAASZ,EAAW,KACtDZ,EAAYU,EAAKnD,EACjB2C,EAAiBQ,EAAKS,WACjB,CACL,IAAII,EAASpF,KAAKqF,aAAa,SAAUV,EAAY,KACrDf,EAAYW,EAAKpD,EACjB2C,EAAgBS,EAAKQ,MACrBlB,EAAYyB,KAAKC,MAAMhB,EAAKnD,EAAImD,EAAKS,OAASI,GAC9CrB,EAAiB/D,KAAKqF,aAAa,QAASV,EAAY,KAI1D3E,KAAK8B,OAAOE,KAAK,YAAa,aAAY4B,KAAaC,MAG3D,IAAI2B,EAASxF,KAAK8B,OAAO2D,OAAO,YAMhC,GALAC,EAAWC,QACRH,EAASxF,KAAK8B,OAAOC,OAAO,SAASC,KAAK,QAAS,WAEnDwD,EAAOI,UAAU,KAAKC,UAEpBhB,EAAS,OAEdW,EAAOzD,OAAO,YACTC,KAAK,IAAM,QAAO8B,KAAiBC,QACnC+B,MAAM,SAAU,SAChBA,MAAM,OAAQ,cAELC,IAAT/B,QAAiC+B,IAAT7B,KAAuBF,EAAOI,EAAMF,EAAOG,GAExE2B,EACGvC,EAAOwC,SAASC,cAAc,QAASlC,EAAME,EAAME,EAAMC,GAAM,EAAM,CAACN,EAAgB,IAAKA,EAAgB,CAAEoC,SAAS,IAEtH1C,EAAOwC,SAASC,cAAc,QAASlC,EAAME,EAAME,EAAMC,GAAM,EAAO,CAAC,EAAGP,GAAgBA,EAAe,CAAEqC,SAAS,IAEvH,QAASC,EAAI,EAAGA,EAAI7C,EAAQe,OAAO,IAAK8B,EAAG,CACxC,IAAIC,EAAKf,KAAKC,MAAM9B,EAAOwC,SAASK,GAAG/C,EAAQ6C,KAC3CG,EAAKjB,KAAKC,MAAM9B,EAAOwC,SAASK,GAAG/C,EAAQ6C,EAAE,KAC7CI,EAAMlD,EAAQmD,iBAAiBlD,EAAQ6C,GAAG7C,EAAQ6C,EAAE,IAAI,GAExDM,EAAIlB,EAAOzD,OAAO,YACTC,KAAK,IAAK8C,EAAY,MAAKyB,KAAMzC,KAAiBuC,OAAW,IAAGA,OAAQtC,KAAkBwC,QAC1FT,MAAM,OAAQU,GACdV,MAAM,SAAUU,GAChBG,SAAS,QAASH,GAClBG,SAAS,SAASC,QAAOJ,GAAKK,OAAO,IAAKC,YAEnD9G,KAAK+G,oBACNL,EAAEM,GAAG,YAAa,YACfC,QAAUjH,MAAMkH,aAAaC,SAAS,KAAKrB,MAAM,QAAQmB,QAAUjH,MAAM2G,SAAS,YAClFK,GAAG,WAAY,YACfC,QAAUjH,MAAMkH,aAAaC,SAAS,KAAKrB,MAAM,QAAQmB,QAAUjH,MAAM2G,SAAS,YAClF5E,OAAO,aAAahC,KAAKwD,EAAQ6C,GAAGgB,QAAQ,GAAK,MAAQ7D,EAAQ6C,EAAE,GAAGgB,QAAQ,IAEhFC,oBACDX,EAAEM,GAAG,WAAY,IAAMvD,EAAO6D,OAAO,MAG3C7D,EAAOwC,SAASsB,YAAcjC,KAAKC,MAAoB,GAAdzB,GAEzC,IAAI0D,EAAU/D,EAAOwC,SAASwB,SAASzH,KAAK8B,OAAQgD,EAAY,aAAYhB,KAAiBC,KAAqB,eAAcA,KAAmBe,GAAW,EAAK,GAEnK,OAAI4C,oBAAiBrE,EACXmE,EAEHA,EAAQG,KAAK,KAiBjB,GAfIN,wBACDrH,KAAK8B,OAAOkF,GAAG,cAAeY,IAC3BA,EAAKC,kBACLD,EAAKE,kBACLC,OAAWH,EAAM5H,MAAM2H,KAAKK,IACzBA,EAAKC,IAAI,kBACTD,EAAKE,OAAOpD,EAAU,WAAYqD,IAAUnI,KAAKoI,UAAU,WAAYD,GAAOnI,KAAKqI,cACnF5E,EAAOwC,SAASqC,oBAAoBN,EAAM,KAC1CA,EAAKO,YAIdC,QAAexI,KAAM,CAAEmB,EAAGyC,EAAWxC,EAAGyC,EAAWkB,MAAOjB,EAAekB,OAAQjB,EAC1D0E,SAAU,GAAIC,UAAW,GAAIC,aAAc7D,EAAU8D,YAAa9D,EAAU+D,OAAQC,GAAK9I,KAAKoD,YAAY0F,MAE5HzB,mBAAkB,OAEvB,IAA4C0B,EAAWC,EAAmBC,EAAeC,EAArFC,GAAa,EAAOC,EAAO,EAAGC,EAAO,EAEzC,MAAMC,EAAc1B,IAEjB,IAAKuB,EAAY,OAKjB,GAJAvB,EAAKE,iBAELoB,GAAWK,QAAW3B,EAAM5H,KAAK8B,OAAO0H,QAEpCP,EACD,OAAOxF,EAAOwC,SAASwD,kBAAkB,OAAQP,GAGjDG,EADCvE,EACMQ,KAAKoE,IAAIpE,KAAKqE,IAAIT,EAAS,GAAI,GAAInF,GAEnCuB,KAAKoE,IAAIpE,KAAKqE,IAAIT,EAAS,GAAI,GAAIpF,GAE7C,IAAI8F,EAAKtE,KAAKuE,IAAIR,EAAKD,IAElBJ,GAAsBY,EAAK,IAC7Bb,EAAUjD,MAAM,UAAW,MAC3BkD,GAAoB,GAGvBhD,EACG+C,EAAU/G,KAAK,IAAKsD,KAAKoE,IAAIN,EAAMC,IAAOrH,KAAK,SAAU4H,GAEzDb,EAAU/G,KAAK,IAAKsD,KAAKoE,IAAIN,EAAMC,IAAOrH,KAAK,QAAS4H,IAC3DE,EAAalC,IACb,GAAKuB,EASL,GAPAvB,EAAKE,kBACLb,QAAU8C,QAAQ/C,GAAG,wBAAyB,MAC5BA,GAAG,sBAAuB,MAC5C+B,EAAUlD,SACVkD,EAAY,KACZI,GAAa,EAETF,EACDxF,EAAOwC,SAASwD,kBAAkB,OAAQP,OACtC,CACJ,IAAIc,EAAIvG,EAAOwC,SAAS9D,KAAMoE,EAAKyD,EAAEC,OAAOb,GAAOc,EAAKF,EAAEC,OAAOZ,GACjErJ,KAAKM,kBAAkB6J,KAAK,IAAK7E,KAAKoE,IAAInD,EAAI2D,GAAK5E,KAAKqE,IAAIpD,EAAI2D,MAEnEE,EAAexC,IAEXuB,IACJA,GAAa,EAEbvB,EAAKE,iBACLF,EAAKC,kBAELqB,GAAWK,QAAW3B,EAAM5H,KAAK8B,OAAO0H,QACxCJ,EAAOC,EAAOH,EAASpE,EAAW,EAAI,GACtCkE,GAAoB,EACpBC,GAAgB,EAChBF,EAAYvD,EACNzD,OAAO,YACPC,KAAK,QAAS,QACdA,KAAK,KAAM,eACX8D,MAAM,UAAW,QACvBE,EACG+C,EAAU/G,KAAK,IAAK,GAAGA,KAAK,QAAS8B,GAAe9B,KAAK,IAAKoH,GAAMpH,KAAK,SAAU,GAEnF+G,EAAU/G,KAAK,IAAKoH,GAAMpH,KAAK,QAAS,GAAGA,KAAK,IAAK,GAAGA,KAAK,SAAU+B,IAE1EkD,QAAU8C,QAAQ/C,GAAG,wBAAyBsC,GAC5BtC,GAAG,sBAAuB8C,GAAY,GAExDO,WAAW,MACHrB,GAAqBG,IACvBF,EAAgBxF,EAAOwC,SAASwD,kBAAkB,QAASP,KAC9D,OACFoB,EAAiB,KAClBtK,KAAK8B,OAAO8D,UAAU,4BACVoB,GAAG,YAAaoD,GAChBpD,GAAG,WAAY,IAAMvD,EAAO6D,OAAO,MAE3CD,sBACDrH,KAAK8B,OAAOkF,GAAG,QAASY,IACrBA,EAAKC,kBACLD,EAAKE,iBAEL,IAAIyC,GAAMhB,QAAW3B,EAAM5H,KAAK8B,OAAO0H,QAGnCgB,EAAO/G,EAAOwC,SAASwE,kBAAkB7C,EAFjC9C,EAAY,EAAIyF,EAAI,GAAKxG,EAAkBwG,EAAI,GAAKzG,GAG5D0G,EAAKE,SACNjH,EAAO0G,KAAK,IAAKK,EAAKd,IAAKc,EAAKb,QAI5ClG,EAAOwC,SAAS0E,oBAAoBL,GAEpCA,kBAKMM,EAAKtH,EAASuH,GACvB,IAAIC,EAAU,IAAIC,EAAgBH,EAAKtH,EAASuH,EAAK,WACrD,OAAOG,mBAAcF,GAAS,GAAOnD,KAAK,KACvCmD,EAAQ9J,UACD8J","names":["text","this","getObject","pp","getPadPainter","onframe","v7EvalAttr","getFramePainter","clipping","p","getCoordinate","fPos","textFont","v7EvalFont","size","color","align","createG","startTextDrawing","drawText","x","y","fText","latex","finishTextDrawing","line","p1","fP1","p2","fP2","createv7AttLine","draw_g","append","attr","call","lineatt","func","box","createv7AttFill","fillatt","marker","fP","createv7AttMarker","path","markeratt","create","RObjectPainter","getHistPalette","drawable","pal","fPalette","getColor","addMethods","drawPalette","drag","palette","contour","getContour","framep","console","log","palette_x","palette_y","palette_width","palette_height","gmin","full_min","gmax","full_max","zmin","zmax","length","rect","getFrameRect","pad_width","getPadWidth","pad_height","getPadHeight","visible","vertical","width","height","changes","v7AttrChange","v7SendAttrChanges","margin","v7EvalLength","Math","round","g_btns","select","w","empty","selectAll","remove","style","undefined","s","z_handle","configureAxis","reverse","i","z0","gr","z1","col","getContourColor","r","property","d3_rgb","darker","toString","isTooltipAllowed","on","d3_select","transition","duration","toFixed","settings","unzoom","maxTickSize","promise","drawAxis","isBatchMode","then","evnt","stopPropagation","preventDefault","createMenu","menu","add","addchk","flag","v7SetAttr","redrawPad","fillAxisContextMenu","show","addDragHandler","minwidth","minheight","no_change_x","no_change_y","redraw","d","zoom_rect","zoom_rect_visible","moving_labels","last_pos","doing_zoom","sel1","sel2","moveRectSel","d3_pointer","node","processLabelsMove","min","max","sz","abs","endRectSel","window","z","invert","z2","zoom","startRectSel","setTimeout","assignHandlers","pos","item","analyzeWheelEvent","changed","setAfterDrawHandler","dom","opt","painter","RPalettePainter","ensureRCanvas"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/v7more.mjs"],"sourcesContent":["import { addMethods, settings, isBatchMode } from '../core.mjs';\nimport { select as d3_select, rgb as d3_rgb, pointer as d3_pointer } from '../d3.mjs';\nimport { RObjectPainter } from '../base/RObjectPainter.mjs';\nimport { addDragHandler } from '../gpad/TFramePainter.mjs';\nimport { ensureRCanvas } from '../gpad/RCanvasPainter.mjs';\nimport { createMenu } from '../gui/menu.mjs';\n\n\n/** @summary draw RText object\n  * @private */\nfunction drawText() {\n   let text      = this.getObject(),\n       pp        = this.getPadPainter(),\n       onframe   = this.v7EvalAttr(\"onFrame\", false) ? pp.getFramePainter() : null,\n       clipping  = onframe ? this.v7EvalAttr(\"clipping\", false) : false,\n       p         = pp.getCoordinate(text.fPos, onframe),\n       textFont  = this.v7EvalFont(\"text\", { size: 12, color: \"black\", align: 22 });\n\n   this.createG(clipping ? \"main_layer\" : (onframe ? \"upper_layer\" : false));\n\n   this.startTextDrawing(textFont, 'font');\n\n   this.drawText({ x: p.x, y: p.y, text: text.fText, latex: 1 });\n\n   return this.finishTextDrawing();\n}\n\n/** @summary draw RLine object\n  * @private */\nfunction drawLine() {\n\n    let line     = this.getObject(),\n        pp       = this.getPadPainter(),\n        onframe  = this.v7EvalAttr(\"onFrame\", false) ? pp.getFramePainter() : null,\n        clipping = onframe ? this.v7EvalAttr(\"clipping\", false) : false,\n        p1       = pp.getCoordinate(line.fP1, onframe),\n        p2       = pp.getCoordinate(line.fP2, onframe);\n\n    this.createG(clipping ? \"main_layer\" : (onframe ? \"upper_layer\" : false));\n\n    this.createv7AttLine();\n\n    this.draw_g\n        .append(\"svg:path\")\n        .attr(\"d\",`M${p1.x},${p1.y}L${p2.x},${p2.y}`)\n        .call(this.lineatt.func);\n}\n\n/** @summary draw RBox object\n  * @private */\nfunction drawBox() {\n\n   let box      = this.getObject(),\n       pp       = this.getPadPainter(),\n       onframe  = this.v7EvalAttr(\"onFrame\", false) ? pp.getFramePainter() : null,\n       clipping = onframe ? this.v7EvalAttr(\"clipping\", false) : false,\n       p1       = pp.getCoordinate(box.fP1, onframe),\n       p2       = pp.getCoordinate(box.fP2, onframe);\n\n   this.createG(clipping ? \"main_layer\" : (onframe ? \"upper_layer\" : false));\n\n   this.createv7AttLine(\"border_\");\n\n   this.createv7AttFill();\n\n   this.draw_g\n       .append(\"svg:path\")\n       .attr(\"d\",`M${p1.x},${p1.y}H${p2.x}V${p2.y}H${p1.x}Z`)\n       .call(this.lineatt.func)\n       .call(this.fillatt.func);\n}\n\n/** @summary draw RMarker object\n  * @private */\nfunction drawMarker() {\n    let marker   = this.getObject(),\n        pp       = this.getPadPainter(),\n        onframe  = this.v7EvalAttr(\"onFrame\", false) ? pp.getFramePainter() : null,\n        clipping = onframe ? this.v7EvalAttr(\"clipping\", false) : false,\n        p        = pp.getCoordinate(marker.fP, onframe);\n\n    this.createG(clipping ? \"main_layer\" : (onframe ? \"upper_layer\" : false));\n\n    this.createv7AttMarker();\n\n    let path = this.markeratt.create(p.x, p.y);\n\n    if (path)\n       this.draw_g.append(\"svg:path\")\n                  .attr(\"d\", path)\n                  .call(this.markeratt.func);\n}\n\n/** @summary painter for RPalette\n *\n * @private\n */\n\nclass RPalettePainter extends RObjectPainter {\n\n   /** @summary get palette */\n   getHistPalette() {\n      let drawable = this.getObject(),\n          pal = drawable ? drawable.fPalette : null;\n\n      if (pal && !pal.getColor)\n         addMethods(pal, \"ROOT::Experimental::RPalette\");\n\n      return pal;\n   }\n\n   /** @summary Draw palette */\n   drawPalette(drag) {\n\n      let palette = this.getHistPalette(),\n          contour = palette.getContour(),\n          framep = this.getFramePainter();\n\n      if (!contour)\n         return console.log('no contour - no palette');\n\n      // frame painter must  be there\n      if (!framep)\n         return console.log('no frame painter - no palette');\n\n      let gmin         = palette.full_min,\n          gmax         = palette.full_max,\n          zmin         = contour[0],\n          zmax         = contour[contour.length-1],\n          rect         = framep.getFrameRect(),\n          pad_width    = this.getPadPainter().getPadWidth(),\n          pad_height   = this.getPadPainter().getPadHeight(),\n          visible      = this.v7EvalAttr(\"visible\", true),\n          vertical     = this.v7EvalAttr(\"vertical\", true),\n          palette_x, palette_y, palette_width, palette_height;\n\n      if (drag) {\n         palette_width = drag.width;\n         palette_height = drag.height;\n\n         let changes = {};\n         if (vertical) {\n            this.v7AttrChange(changes, \"margin\", (drag.x - rect.x - rect.width) / pad_width);\n            this.v7AttrChange(changes, \"width\", palette_width / pad_width);\n         } else {\n            this.v7AttrChange(changes, \"margin\", (drag.y - rect.y - rect.height) / pad_width);\n            this.v7AttrChange(changes, \"width\", palette_height / pad_height);\n         }\n         this.v7SendAttrChanges(changes, false); // do not invoke canvas update on the server\n      } else {\n          if (vertical) {\n            let margin = this.v7EvalLength(\"margin\", pad_width, 0.02);\n            palette_x = Math.round(rect.x + rect.width + margin);\n            palette_width = this.v7EvalLength(\"width\", pad_width, 0.05);\n            palette_y = rect.y;\n            palette_height = rect.height;\n          } else {\n            let margin = this.v7EvalLength(\"margin\", pad_height, 0.02);\n            palette_x = rect.x;\n            palette_width = rect.width;\n            palette_y = Math.round(rect.y + rect.height + margin);\n            palette_height = this.v7EvalLength(\"width\", pad_height, 0.05);\n          }\n\n          // x,y,width,height attributes used for drag functionality\n          this.draw_g.attr(\"transform\",`translate(${palette_x},${palette_y})`);\n      }\n\n      let g_btns = this.draw_g.select(\".colbtns\");\n      if (g_btns.empty())\n         g_btns = this.draw_g.append(\"svg:g\").attr(\"class\", \"colbtns\");\n      else\n         g_btns.selectAll(\"*\").remove();\n\n      if (!visible) return;\n\n      g_btns.append(\"svg:path\")\n          .attr(\"d\", `M0,0H${palette_width}V${palette_height}H0Z`)\n          .style(\"stroke\", \"black\")\n          .style(\"fill\", \"none\");\n\n      if ((gmin === undefined) || (gmax === undefined)) { gmin = zmin; gmax = zmax; }\n\n      if (vertical)\n         framep.z_handle.configureAxis(\"zaxis\", gmin, gmax, zmin, zmax, true, [palette_height, 0], -palette_height, { reverse: false });\n      else\n         framep.z_handle.configureAxis(\"zaxis\", gmin, gmax, zmin, zmax, false, [0, palette_width], palette_width, { reverse: false });\n\n      for (let i = 0; i < contour.length-1; ++i) {\n         let z0 = Math.round(framep.z_handle.gr(contour[i])),\n             z1 = Math.round(framep.z_handle.gr(contour[i+1])),\n             col = palette.getContourColor((contour[i]+contour[i+1])/2);\n\n         let r = g_btns.append(\"svg:path\")\n                     .attr(\"d\", vertical ? `M0,${z1}H${palette_width}V${z0}H0Z` : `M${z0},0V${palette_height}H${z1}V0Z`)\n                     .style(\"fill\", col)\n                     .style(\"stroke\", col)\n                     .property(\"fill0\", col)\n                     .property(\"fill1\", d3_rgb(col).darker(0.5).toString());\n\n         if (this.isTooltipAllowed())\n            r.on('mouseover', function() {\n               d3_select(this).transition().duration(100).style(\"fill\", d3_select(this).property('fill1'));\n            }).on('mouseout', function() {\n               d3_select(this).transition().duration(100).style(\"fill\", d3_select(this).property('fill0'));\n            }).append(\"svg:title\").text(contour[i].toFixed(2) + \" - \" + contour[i+1].toFixed(2));\n\n         if (settings.Zooming)\n            r.on(\"dblclick\", () => framep.unzoom(\"z\"));\n      }\n\n      framep.z_handle.maxTickSize = Math.round(palette_width*0.3);\n\n      let promise = framep.z_handle.drawAxis(this.draw_g, vertical ? `translate(${palette_width},${palette_height})` : `translate(0,${palette_height})`, vertical ? -1 : 1);\n\n      if (isBatchMode() || drag)\n         return promise;\n\n      return promise.then(() => {\n\n         if (settings.ContextMenu)\n            this.draw_g.on(\"contextmenu\", evnt => {\n               evnt.stopPropagation(); // disable main context menu\n               evnt.preventDefault();  // disable browser context menu\n               createMenu(evnt, this).then(menu => {\n                  menu.add(\"header:Palette\");\n                  menu.addchk(vertical, \"Vertical\", flag => { this.v7SetAttr(\"vertical\", flag); this.redrawPad(); });\n                  framep.z_handle.fillAxisContextMenu(menu, \"z\");\n                  menu.show();\n               });\n            });\n\n         addDragHandler(this, { x: palette_x, y: palette_y, width: palette_width, height: palette_height,\n                                minwidth: 20, minheight: 20, no_change_x: !vertical, no_change_y: vertical, redraw: d => this.drawPalette(d) });\n\n         if (!settings.Zooming) return;\n\n         let doing_zoom = false, sel1 = 0, sel2 = 0, zoom_rect, zoom_rect_visible, moving_labels, last_pos;\n\n         const moveRectSel = evnt => {\n\n            if (!doing_zoom) return;\n            evnt.preventDefault();\n\n            last_pos = d3_pointer(evnt, this.draw_g.node());\n\n            if (moving_labels)\n               return framep.z_handle.processLabelsMove('move', last_pos);\n\n            if (vertical)\n               sel2 = Math.min(Math.max(last_pos[1], 0), palette_height);\n            else\n               sel2 = Math.min(Math.max(last_pos[0], 0), palette_width);\n\n            let sz = Math.abs(sel2-sel1);\n\n            if (!zoom_rect_visible && (sz > 1)) {\n               zoom_rect.style('display', null);\n               zoom_rect_visible = true;\n            }\n\n            if (vertical)\n               zoom_rect.attr(\"y\", Math.min(sel1, sel2)).attr(\"height\", sz);\n            else\n               zoom_rect.attr(\"x\", Math.min(sel1, sel2)).attr(\"width\", sz);\n         }, endRectSel = evnt => {\n            if (!doing_zoom) return;\n\n            evnt.preventDefault();\n            d3_select(window).on(\"mousemove.colzoomRect\", null)\n                             .on(\"mouseup.colzoomRect\", null);\n            zoom_rect.remove();\n            zoom_rect = null;\n            doing_zoom = false;\n\n            if (moving_labels) {\n               framep.z_handle.processLabelsMove('stop', last_pos);\n            } else {\n               let z = framep.z_handle.func, z1 = z.invert(sel1), z2 = z.invert(sel2);\n               this.getFramePainter().zoom(\"z\", Math.min(z1, z2), Math.max(z1, z2));\n            }\n         }, startRectSel = evnt => {\n            // ignore when touch selection is activated\n            if (doing_zoom) return;\n            doing_zoom = true;\n\n            evnt.preventDefault();\n            evnt.stopPropagation();\n\n            last_pos = d3_pointer(evnt, this.draw_g.node());\n            sel1 = sel2 = last_pos[vertical ? 1 : 0];\n            zoom_rect_visible = false;\n            moving_labels = false;\n            zoom_rect = g_btns\n                 .append(\"svg:rect\")\n                 .attr(\"class\", \"zoom\")\n                 .attr(\"id\", \"colzoomRect\")\n                 .style('display', 'none');\n            if (vertical)\n               zoom_rect.attr(\"x\", 0).attr(\"width\", palette_width).attr(\"y\", sel1).attr(\"height\", 1);\n            else\n               zoom_rect.attr(\"x\", sel1).attr(\"width\", 1).attr(\"y\", 0).attr(\"height\", palette_height);\n\n            d3_select(window).on(\"mousemove.colzoomRect\", moveRectSel)\n                             .on(\"mouseup.colzoomRect\", endRectSel, true);\n\n            setTimeout(() => {\n               if (!zoom_rect_visible && doing_zoom)\n                  moving_labels = framep.z_handle.processLabelsMove('start', last_pos);\n            }, 500);\n         },  assignHandlers = () => {\n            this.draw_g.selectAll(\".axis_zoom, .axis_labels\")\n                       .on(\"mousedown\", startRectSel)\n                       .on(\"dblclick\", () => framep.unzoom(\"z\"));\n\n            if (settings.ZoomWheel)\n               this.draw_g.on(\"wheel\", evnt => {\n                  evnt.stopPropagation();\n                  evnt.preventDefault();\n\n                  let pos = d3_pointer(evnt, this.draw_g.node()),\n                      coord = vertical ? (1 - pos[1] / palette_height) : pos[0] / palette_width;\n\n                  let item = framep.z_handle.analyzeWheelEvent(evnt, coord);\n                  if (item.changed)\n                     framep.zoom(\"z\", item.min, item.max);\n               });\n         };\n\n         framep.z_handle.setAfterDrawHandler(assignHandlers);\n\n         assignHandlers();\n      });\n   }\n\n   /** @summary draw RPalette object */\n   static draw(dom, palette, opt) {\n      let painter = new RPalettePainter(dom, palette, opt, \"palette\");\n      return ensureRCanvas(painter, false).then(() => {\n         painter.createG(); // just create container, real drawing will be done by histogram\n         return painter;\n      });\n   }\n\n} // class RPalettePainter\n\nexport { RPalettePainter, drawText, drawLine, drawBox, drawMarker };\n"]}