{"version":3,"file":"460.f17fb9f1dbf53f03.js","mappings":"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","names":["dom","obj","opt","typ","_typename","indexOf","TH1Painter","TH2Painter","TH3Painter","TGraphPainter","Promise","reject","Error","final","this","last_pr","dump","testio","isBatchMode","painter","BasePainter","drawid","selectDom","property","resolve","internals","str","create","fString","toJSON","drawRawText","then","obj_painter","redrawObject","drawTreeDrawResult","p","player","draw_first","configureOnline","itemname","url","askey","root_version","expr","setItemName","draw_expr","configureTree","tree","local_tree","showExtraButtons","args","main","numentries","fEntries","select","remove","node","innerHTML","on","performDraw","parse_cut","drawopt","attr","firstentry","cleanup","showPlayer","show_extra","html","setTopPainter","fName","parse_expr","i","checkResize","registerForResize","getValue","sel","elem","empty","val","undefined","performLocalDraw","frame","cut","parseInt","Number","isInteger","progress","treeDrawProgress","bind","treeDraw","getDrawOpt","res","hname","option","pos","slice","pos2","nentries","submitDrawRequest","httpRequest","resize","hpainter","asleaf","item","findItem","top","getTopOnlineItem","leaf_cnt","_name","_ttree","_parent","itemFullName","getOnlineItemUrl","_root_version","mdi","getDisplay","findFrame","divid","d3_select","_childs","n","length","leaf","_kind","createTreePlayer","drawTreePlayer","pr","e","func","branch","t","$tree","$branch","fType","kClonesNode","kSTLNode","direct_branch","fStreamerType","kTString","kObject","kAnyP","ObjectPainter","showProgress","treeIOTest","TDrawSelector","value","document","isFinite","last_progress","diff","aver_diff","ndig","main_box","createElement","text_node","createTextNode","toFixed","selector","appendChild","title","onclick","_break","nodeValue","Abort"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TTree.mjs"],"sourcesContent":["import { internals, httpRequest, isBatchMode, create, toJSON } from '../core.mjs';\nimport { select as d3_select } from '../d3.mjs';\nimport { kTString, kObject, kAnyP } from '../io.mjs';\nimport { kClonesNode, kSTLNode, treeDraw, treeIOTest, TDrawSelector } from '../tree.mjs';\nimport { BasePainter } from '../base/BasePainter.mjs';\nimport { cleanup, resize, drawRawText, ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from '../hist/TH1Painter.mjs';\nimport { TH2Painter } from '../hist/TH2Painter.mjs';\nimport { TH3Painter } from '../hist/TH3Painter.mjs';\nimport { TGraphPainter } from '../hist/TGraphPainter.mjs';\nimport { showProgress, registerForResize } from '../gui/utils.mjs';\n\n\n/** @summary Show TTree::Draw progress during processing */\nTDrawSelector.prototype.ShowProgress = function(value) {\n   if ((typeof document == 'undefined') || isBatchMode()) return;\n\n   if ((value === undefined) || !Number.isFinite(value))\n      return showProgress();\n\n   if (this.last_progress !== value) {\n      let diff = value - this.last_progress;\n      if (!this.aver_diff) this.aver_diff = diff;\n      this.aver_diff = diff * 0.3 + this.aver_diff * 0.7;\n   }\n\n   let ndig = 0;\n   if (this.aver_diff <= 0) ndig = 0; else\n      if (this.aver_diff < 0.0001) ndig = 3; else\n         if (this.aver_diff < 0.001) ndig = 2; else\n            if (this.aver_diff < 0.01) ndig = 1;\n\n   let main_box = document.createElement(\"p\"),\n      text_node = document.createTextNode(\"TTree draw \" + (value * 100).toFixed(ndig) + \" %  \"),\n      selector = this;\n\n   main_box.appendChild(text_node);\n   main_box.title = \"Click on element to break drawing\";\n\n   main_box.onclick = function() {\n      if (++selector._break < 3) {\n         main_box.title = \"Tree draw will break after next I/O operation\";\n         return text_node.nodeValue = \"Breaking ... \";\n      }\n      selector.Abort();\n      showProgress();\n   };\n\n   showProgress(main_box);\n   this.last_progress = value;\n}\n\n/** @summary Draw result of tree drawing\n  * @private */\nfunction drawTreeDrawResult(dom, obj, opt) {\n\n   let typ = obj._typename;\n\n   if (!typ || (typeof typ !== 'string'))\n      return Promise.reject(Error(`Object without type cannot be draw with TTree`));\n\n   if (typ.indexOf('TH1') == 0)\n      return TH1Painter.draw(dom, obj, opt);\n   if (typ.indexOf('TH2') == 0)\n      return TH2Painter.draw(dom, obj, opt);\n   if (typ.indexOf('TH3') == 0)\n      return TH3Painter.draw(dom, obj, opt);\n   if (typ.indexOf('TGraph') == 0)\n      return TGraphPainter.draw(dom, obj, opt);\n\n   return Promise.reject(Error(`Object of type ${typ} cannot be draw with TTree`));\n}\n\n\n/** @summary Handle callback function with progress of tree draw\n  * @private */\nfunction treeDrawProgress(obj, final) {\n\n   // no need to update drawing if previous is not yet completed\n   if (!final && !this.last_pr)\n      return;\n\n   if (this.dump || this.testio) {\n      if (!final) return;\n      if (isBatchMode()) {\n         let painter = new BasePainter(this.drawid);\n         painter.selectDom().property(\"_json_object_\", obj);\n         return Promise.resolve(painter);\n      }\n      if (typeof internals.drawInspector == 'function')\n         return internals.drawInspector(this.drawid, obj);\n      let str = create('TObjString');\n      str.fString = toJSON(obj,2);\n      return drawRawText(this.drawid, str);\n   }\n\n   // complex logic with intermediate update\n   // while TTree reading not synchronized with drawing,\n   // next portion can appear before previous is drawn\n   // critical is last drawing which should wait for previous one\n   // therefore last_pr is kept as inidication that promise is not yet processed\n\n   if (!this.last_pr) this.last_pr = Promise.resolve(true);\n\n    return this.last_pr.then(() => {\n       if (this.obj_painter)\n          this.last_pr = this.obj_painter.redrawObject(obj).then(() => this.obj_painter);\n       else\n          this.last_pr = drawTreeDrawResult(this.drawid, obj).then(p => {\n             this.obj_painter = p;\n             if (!final) this.last_pr = null;\n             return p; // return painter for histogram\n          });\n\n       return final ? this.last_pr : null;\n   });\n}\n\n\n/** @summary Create painter to perform tree drawing on server side\n  * @private */\nfunction createTreePlayer(player) {\n\n   player.draw_first = true;\n\n   player.configureOnline = function(itemname, url, askey, root_version, expr) {\n      this.setItemName(itemname, \"\", this);\n      this.url = url;\n      this.root_version = root_version;\n      this.askey = askey;\n      this.draw_expr = expr;\n   }\n\n   player.configureTree = function(tree) {\n      this.local_tree = tree;\n   }\n\n   player.showExtraButtons = function(args) {\n      let main = this.selectDom(),\n         numentries = this.local_tree ? this.local_tree.fEntries : 0;\n\n      main.select('.treedraw_more').remove(); // remove more button first\n\n      main.select(\".treedraw_buttons\").node().innerHTML +=\n          'Cut: <input class=\"treedraw_cut ui-corner-all ui-widget\" style=\"width:8em;margin-left:5px\" title=\"cut expression\"></input>'+\n          'Opt: <input class=\"treedraw_opt ui-corner-all ui-widget\" style=\"width:5em;margin-left:5px\" title=\"histogram draw options\"></input>'+\n          `Num: <input class=\"treedraw_number\" type=\"number\" min=\"0\" max=\"${numentries}\" step=\"1000\" style=\"width:7em;margin-left:5px\" title=\"number of entries to process (default all)\"></input>`+\n          `First: <input class=\"treedraw_first\" type=\"number\" min=\"0\" max=\"${numentries}\" step=\"1000\" style=\"width:7em;margin-left:5px\" title=\"first entry to process (default first)\"></input>`+\n          '<button class=\"treedraw_clear\" title=\"Clear drawing\">Clear</button>';\n\n      main.select('.treedraw_exe').on(\"click\", () => this.performDraw());\n      main.select(\".treedraw_cut\").property(\"value\", args?.parse_cut || \"\").on(\"change\", () => this.performDraw());\n      main.select(\".treedraw_opt\").property(\"value\", args?.drawopt || \"\").on(\"change\", () => this.performDraw());\n      main.select(\".treedraw_number\").attr(\"value\", args?.numentries || \"\"); // .on(\"change\", () => this.performDraw());\n      main.select(\".treedraw_first\").attr(\"value\", args?.firstentry || \"\"); // .on(\"change\", () => this.performDraw());\n      main.select(\".treedraw_clear\").on(\"click\", () => cleanup(this.drawid));\n   }\n\n   player.showPlayer = function(args) {\n\n      let main = this.selectDom();\n\n      this.drawid = \"jsroot_tree_player_\" + internals.id_counter++ + \"_draw\";\n\n      let show_extra = args?.parse_cut || args?.numentries || args?.firstentry;\n\n      main.html('<div style=\"display:flex; flex-flow:column; height:100%; width:100%;\">'+\n                   '<div class=\"treedraw_buttons\" style=\"flex: 0 1 auto;margin-top:0.2em;\">' +\n                      '<button class=\"treedraw_exe\" title=\"Execute draw expression\" style=\"margin-left:0.5em\">Draw</button>' +\n                      'Expr:<input class=\"treedraw_varexp treedraw_varexp_info\" style=\"width:12em;margin-left:5px\" title=\"draw expression\"></input>'+\n                      '<label class=\"treedraw_varexp_info\">\\u24D8</label>' +\n                     '<button class=\"treedraw_more\">More</button>' +\n                   '</div>' +\n                   '<div style=\"flex: 0 1 auto\"><hr/></div>' +\n                   `<div id=\"${this.drawid}\" style=\"flex: 1 1 auto; overflow:hidden;\"></div>` +\n                '</div>');\n\n      // only when main html element created, one can set painter\n      // ObjectPainter allow such usage of methods from BasePainter\n      this.setTopPainter();\n\n      if (this.local_tree)\n         main.select('.treedraw_buttons')\n             .attr(\"title\", \"Tree draw player for: \" + this.local_tree.fName);\n      main.select('.treedraw_exe').on(\"click\", () => this.performDraw());\n      main.select('.treedraw_varexp')\n          .attr(\"value\", args?.parse_expr || this.draw_expr || \"px:py\")\n          .on(\"change\", () => this.performDraw());\n      main.select('.treedraw_varexp_info')\n          .attr('title', \"Example of valid draw expressions:\\n\" +\n                         \"  px - 1-dim draw\\n\" +\n                         \"  px:py - 2-dim draw\\n\" +\n                         \"  px:py:pz - 3-dim draw\\n\" +\n                         \"  px+py:px-py - use any expressions\\n\" +\n                         \"  px:py>>Graph - create and draw TGraph\\n\" +\n                         \"  px:py>>dump - dump extracted variables\\n\" +\n                         \"  px:py>>h(50,-5,5,50,-5,5) - custom histogram\\n\" +\n                         \"  px:py;hbins:100 - custom number of bins\");\n\n      if (show_extra)\n         this.showExtraButtons(args);\n      else\n         main.select('.treedraw_more').on(\"click\", () => this.showExtraButtons(args));\n\n      this.checkResize();\n\n      registerForResize(this);\n   }\n\n   player.getValue = function(sel) {\n      const elem = this.selectDom().select(sel);\n      if (elem.empty()) return;\n      const val = elem.property(\"value\");\n      if (val !== undefined) return val;\n      return elem.attr(\"value\");\n   }\n\n   player.performLocalDraw = function() {\n      if (!this.local_tree) return;\n\n      const frame = this.selectDom(),\n            args = { expr: this.getValue('.treedraw_varexp') };\n\n      if (frame.select('.treedraw_more').empty()) {\n         args.cut = this.getValue('.treedraw_cut');\n         if (!args.cut) delete args.cut;\n\n         args.drawopt = this.getValue('.treedraw_opt');\n         if (args.drawopt === \"dump\") { args.dump = true; args.drawopt = \"\"; }\n         if (!args.drawopt) delete args.drawopt;\n\n         args.numentries = parseInt(this.getValue('.treedraw_number'));\n         if (!Number.isInteger(args.numentries)) delete args.numentries;\n\n         args.firstentry = parseInt(this.getValue('.treedraw_first'));\n         if (!Number.isInteger(args.firstentry)) delete args.firstentry;\n      }\n\n      /* if (args.drawopt) */ cleanup(this.drawid);\n\n      args.drawid = this.drawid;\n\n      args.progress = treeDrawProgress.bind(args);\n\n      treeDraw(this.local_tree, args).then(obj => args.progress(obj, true));\n   }\n\n   player.getDrawOpt = function() {\n      let res = \"player\",\n          expr = this.getValue('.treedraw_varexp')\n      if (expr) res += \":\" + expr;\n      return res;\n   }\n\n   player.performDraw = function() {\n\n      if (this.local_tree)\n         return this.performLocalDraw();\n\n      let frame = this.selectDom(),\n          url = this.url + '/exe.json.gz?compact=3&method=Draw',\n          expr = this.getValue('.treedraw_varexp'),\n          hname = \"h_tree_draw\", option = \"\",\n          pos = expr.indexOf(\">>\");\n\n      if (pos < 0) {\n         expr += \">>\" + hname;\n      } else {\n         hname = expr.slice(pos+2);\n         if (hname[0]=='+') hname = hname.slice(1);\n         let pos2 = hname.indexOf(\"(\");\n         if (pos2 > 0) hname = hname.slice(0, pos2);\n      }\n\n      if (frame.select('.treedraw_more').empty()) {\n         let cut = this.getValue('.treedraw_cut'),\n             nentries = this.getValue('.treedraw_number'),\n             firstentry = this.getValue('.treedraw_first');\n\n         option = this.getValue('.treedraw_opt');\n\n         url += `&prototype=\"const char*,const char*,Option_t*,Long64_t,Long64_t\"&varexp=\"${expr}\"&selection=\"${cut}\"`;\n\n         // provide all optional arguments - default value kMaxEntries not works properly in ROOT6\n         if (nentries==\"\") nentries = (this.root_version >= 394499) ? \"TTree::kMaxEntries\": \"1000000000\"; // kMaxEntries available since ROOT 6.05/03\n         if (firstentry==\"\") firstentry = \"0\";\n         url += `&option=\"${option}\"&nentries=${nentries}&firstentry=${firstentry}`;\n      } else {\n         url += `&prototype=\"Option_t*\"&opt=\"${expr}\"`;\n      }\n      url += '&_ret_object_=' + hname;\n\n      const submitDrawRequest = () => {\n         httpRequest(url, 'object').then(res => {\n            cleanup(this.drawid);\n            drawTreeDrawResult(this.drawid, res, option);\n         });\n      };\n\n      this.draw_expr = expr;\n\n      if (this.askey) {\n         // first let read tree from the file\n         this.askey = false;\n         httpRequest(this.url + \"/root.json.gz?compact=3\", 'text').then(submitDrawRequest);\n      } else {\n         submitDrawRequest();\n      }\n   }\n\n   player.checkResize = function(/*arg*/) {\n      resize(this.drawid);\n   }\n\n   return player;\n}\n\n\n/** @summary function used with THttpServer to assign player for the TTree object\n  * @private */\nfunction drawTreePlayer(hpainter, itemname, askey, asleaf) {\n\n   let item = hpainter.findItem(itemname),\n       top = hpainter.getTopOnlineItem(item),\n       expr = \"\", leaf_cnt = 0;\n   if (!item || !top) return null;\n\n   if (asleaf) {\n      expr = item._name;\n      while (item && !item._ttree) item = item._parent;\n      if (!item) return null;\n      itemname = hpainter.itemFullName(item);\n   }\n\n   let url = hpainter.getOnlineItemUrl(itemname);\n   if (!url) return null;\n\n   let root_version = top._root_version || 400129; // by default use version number 6-27-01\n\n   let mdi = hpainter.getDisplay();\n   if (!mdi) return null;\n\n   let frame = mdi.findFrame(itemname, true);\n   if (!frame) return null;\n\n   let divid = d3_select(frame).attr('id'),\n       player = new BasePainter(divid);\n\n   if (item._childs && !asleaf)\n      for (let n = 0; n < item._childs.length; ++n) {\n         let leaf = item._childs[n];\n         if (leaf && leaf._kind && (leaf._kind.indexOf(\"ROOT.TLeaf\") == 0) && (leaf_cnt < 2)) {\n            if (leaf_cnt++ > 0) expr += \":\";\n            expr += leaf._name;\n         }\n      }\n\n   createTreePlayer(player);\n   player.configureOnline(itemname, url, askey, root_version, expr);\n   player.showPlayer();\n\n   return player;\n}\n\n/** @summary function used with THttpServer when tree is not yet loaded\n  * @private */\nfunction drawTreePlayerKey(hpainter, itemname) {\n   return drawTreePlayer(hpainter, itemname, true);\n}\n\n/** @summary function used with THttpServer when tree is not yet loaded\n  * @private */\nfunction drawLeafPlayer(hpainter, itemname) {\n   return drawTreePlayer(hpainter, itemname, false, true);\n}\n\n/** @summary function called from draw()\n  * @desc just envelope for real TTree::Draw method which do the main job\n  * Can be also used for the branch and leaf object\n  * @private */\nfunction drawTree(dom, obj, opt) {\n\n   let tree = obj, args = opt;\n\n   if (obj._typename == \"TBranchFunc\") {\n      // fictional object, created only in browser\n      args = { expr: \".\" + obj.func + \"()\", branch: obj.branch };\n      if (opt && opt.indexOf(\"dump\")==0)\n         args.expr += \">>\" + opt;\n      else if (opt)\n         args.expr += opt;\n      tree = obj.branch.$tree;\n   } else if (obj.$branch) {\n      // this is drawing of the single leaf from the branch\n      args = { expr: \".\" + obj.fName + (opt || \"\"), branch: obj.$branch };\n      if ((args.branch.fType === kClonesNode) || (args.branch.fType === kSTLNode)) {\n         // special case of size\n         args.expr = opt;\n         args.direct_branch = true;\n      }\n\n      tree = obj.$branch.$tree;\n   } else if (obj.$tree) {\n      // this is drawing of the branch\n\n      // if generic object tried to be drawn without specifying any options, it will be just dump\n      if (!opt && obj.fStreamerType && (obj.fStreamerType !== kTString) &&\n          (obj.fStreamerType >= kObject) && (obj.fStreamerType <= kAnyP)) opt = \"dump\";\n\n      args = { expr: opt, branch: obj };\n      tree = obj.$tree;\n   } else {\n      if (!args) args = 'player';\n      if (typeof args === 'string') args = { expr: args };\n   }\n\n   if (!tree)\n      throw Error('No TTree object available for TTree::Draw');\n\n   if (typeof args.expr == 'string') {\n      let p = args.expr.indexOf('player');\n      if (p == 0) {\n         args.player = true;\n         args.expr = args.expr.slice(6);\n         if (args.expr[0] == ':') args.expr = args.expr.slice(1);\n      } else if ((p >= 0) && (p == args.expr.length-6)) {\n         args.player = true;\n         args.expr = args.expr.slice(0, p);\n         if ((p > 0) && (args.expr[p-1] == ';')) args.expr = args.expr.slice(0, p-1);\n      }\n   }\n\n   let painter;\n\n   if (args.player) {\n      painter = new ObjectPainter(dom, obj, opt);\n      createTreePlayer(painter);\n      painter.configureTree(tree);\n      painter.showPlayer(args);\n      args.drawid = painter.drawid;\n   } else {\n      args.drawid = dom;\n   }\n\n   // use in result handling same function as for progress handling\n\n   args.progress = treeDrawProgress.bind(args);\n\n   let pr;\n   if (args.expr === \"testio\") {\n      args.testio = true;\n      args.showProgress = showProgress;\n      pr = treeIOTest(tree, args);\n   } else if (args.expr || args.branch) {\n      pr = treeDraw(tree, args);\n   } else\n      return Promise.resolve(painter);\n\n   return pr.then(res => args.progress(res, true));\n}\n\nexport { drawTree, drawTreePlayer, drawTreePlayerKey, drawLeafPlayer };\n"]}