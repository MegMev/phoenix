{"version":3,"file":"879.f7e5384c873dac7a.js","mappings":"gPAUA,MAAMA,GAAeC,SAAI,IAQzB,gBAA4BC,KAEzBC,YAAYC,EAAKC,GACdC,MAAMF,EAAKC,GACXE,KAAKC,WAAY,EACjBD,KAAKE,KAAO,KACZF,KAAKG,KAAOH,KAAKI,KAAOJ,KAAKK,KAAOL,KAAKM,KAAO,EAChDN,KAAKO,aAAc,EACnBP,KAAKQ,QAA8B,oBAAnBV,EAAMW,UACtBT,KAAKU,WAAiC,gBAAnBZ,EAAMW,WACa,qBAAnBX,EAAMW,WACa,qBAAnBX,EAAMW,WACNT,KAAKQ,SAAWV,EAAMW,UAAUE,MAAM,YAM5DC,SACG,IAAIC,EAAUC,QAAQC,SAAQ,GAE9B,GAAIf,KAAKgB,aAAc,QACbhB,KAAKgB,aACZ,IAAIC,EAAejB,KAAKkB,kBACpBD,iBAAcE,aAAcnB,KAAKC,YAClCY,EAAUI,EAAaL,UAG7B,OAAOC,EAAQO,KAAK,IAAMpB,KAAKqB,aAIlCC,iBACUtB,KAAKuB,uBACLvB,KAAKE,KACZH,MAAMuB,UAITE,UACG,IAAI1B,EAAQE,KAAKyB,YACjB,MAA2B,sBAApB3B,iBAAOW,WAAmCX,EAAQ,KAI5D4B,cAAcC,EAAKC,SAEG,iBAAPD,GAA6C,GAAxBA,EAAIE,QAAQ,WAC1CF,EAAMA,EAAIG,MAAM,IAEnB,IAAIhC,EAAQE,KAAKyB,YACbM,IAAW/B,KAAKwB,UAChBQ,EAAa,GACbC,EAAWL,IAAe5B,KAAKkB,kBAAoBlB,KAAKC,UAEvDD,KAAKkC,UAASlC,KAAKkC,QAAU,IAGlC,MAAMC,EAAc,CAACC,EAAGC,KACrBC,OAAOC,OAAOF,EAAK,CAAEG,KAAM,EAAGC,MAAO,EAAGC,KAAM,EAAGC,KAAM,EAAGC,IAAK,EAAGC,SAAU,EAAGC,GAAG,EAAGC,KAAM,EAAGC,UAAW,EAAGC,KAAM,EAAGC,UAAW,IAE5HnB,GAAUK,EAAEe,MAAM,MAAM,KAAOd,EAAIa,UAAYd,EAAEgB,eAEjDhB,EAAEe,MAAM,OAAMd,EAAIG,KAAO,GACzBJ,EAAEe,MAAM,OAAMd,EAAIU,KAAO,GACzBX,EAAEe,MAAM,QAAOd,EAAII,MAAQ,GAC3BL,EAAEe,MAAM,OAAMd,EAAII,MAAQ,GAC1BL,EAAEe,MAAM,OAAMd,EAAIM,KAAO,KACzBP,EAAEe,MAAM,QAAOd,EAAIM,KAAO,KAC1BP,EAAEe,MAAM,OAAMd,EAAIM,KAAO,GACzBP,EAAEe,MAAM,OAAQd,EAAIO,IAAM,EAAGP,EAAIgB,OAAS,GAC1CjB,EAAEe,MAAM,OAAQd,EAAIgB,OAAS,EAAGhB,EAAIY,KAAO,GAC3Cb,EAAEe,MAAM,QAASd,EAAIgB,OAAS,EAAGhB,EAAIW,UAAY,EAAGX,EAAIY,KAAO,GAC/Db,EAAEe,MAAM,QAASd,EAAIgB,OAAS,EAAGhB,EAAIW,UAAY,EAAGX,EAAIY,KAAO,GAC/Db,EAAEe,MAAM,QAASd,EAAIgB,OAAS,EAAGhB,EAAIY,KAAO,GAC5Cb,EAAEe,MAAM,OAAQd,EAAIgB,OAAS,EAAGhB,EAAIY,KAAO,GAC3Cb,EAAEe,MAAM,OAAQd,EAAIM,KAAO,EAAGN,EAAIgB,OAAS,EAAGhB,EAAIQ,SAAW,GAC7DT,EAAEe,MAAM,MAAuB,GAAXd,EAAIO,MAAUP,EAAIO,IAAM,GAC5CR,EAAEe,MAAM,OAAQd,EAAIK,KAAO,EAAGL,EAAIgB,OAAS,GAC3CjB,EAAEe,MAAM,OAAQd,EAAIS,GAAK,EAAGT,EAAIgB,OAAS,GACzCjB,EAAEe,MAAM,OAAQd,EAAIS,GAAK,EAAGT,EAAIgB,OAAS,GACzCjB,EAAEe,MAAM,OAAQd,EAAIK,KAAO,EAAGL,EAAIgB,OAAS,GAC3CjB,EAAEe,MAAM,OAAMd,EAAIgB,OAAS,IAGlCf,OAAOC,OAAOvC,KAAKkC,QAAS,CAAEoB,KAAM,GAAIC,MAAO,EAAGC,UAAU,EAAOC,SAAU9B,EAAK+B,UAAU,EAAOC,UAAU,EAAOC,mBAAmB,IAEnI7B,GAAUJ,IACPA,EAAIE,QAAQ,KAAO,GACpBG,EAAaL,EAAIkC,MAAM,KACvBlC,EAAMK,EAAW8B,SACTnC,EAAIE,QAAQ,KAAO,IAC3BG,EAAaL,EAAIkC,MAAM,KACvBlC,EAAMK,EAAW8B,UAIvB,IAAIzB,EAAMrC,KAAKkC,QACXE,EAAI,IAAI2B,KAAYpC,GAGxBU,EAAImB,SAAWpB,EAAEe,MAAM,iBACvB,IAAIa,EAAO,GAkDX,GAjDAC,CAD4B,gBAAiB,QAAS,OAAQ,OAAQ,OAAQ,SAAU,QAAS,QAAS,SAAU,QAAS,SACnHC,QAAQC,IAAc/B,EAAEe,MAAMgB,KAAOH,GAAQ,IAAMG,KACzD/B,EAAEe,MAAM,UAAU,KAAOa,GAAQ,UAAY5B,EAAEgC,MAC/ChC,EAAEe,MAAM,UAAU,KAAOa,GAAQ,UAAY5B,EAAEgC,MAE/ChC,EAAEiC,UACHhC,EAAIoB,SAAWxB,EAAW,KAAO,MACjCG,EAAI,IAAI2B,KAAY1B,EAAIoB,WAGvBrB,EAAEe,MAAM,WAAUd,EAAIkB,MAAQ,GAE9BnB,EAAEe,MAAM,UAAU,KAAOd,EAAIiC,MAAQlC,EAAEmC,YAAc,IAEzDlC,EAAImC,KAAOpC,EAAEe,MAAM,OACnBd,EAAIoC,KAAOrC,EAAEe,MAAM,OACnBd,EAAIqC,KAAOtC,EAAEe,MAAM,OAEff,EAAEe,MAAM,OAAMd,EAAIiB,KAAOlB,EAAEe,MAAM,KAAO,IAAM,QAC9Cf,EAAEe,MAAM,QAASd,EAAIiB,MAAQ,KAAMjB,EAAIqB,SAAWzB,GAClDG,EAAEe,MAAM,QAASd,EAAIiB,MAAQ,KAAMjB,EAAIsB,SAAW1B,GAClDG,EAAEe,MAAM,QAAOd,EAAIiB,MAAQ,MAC3BlB,EAAEe,MAAM,QAAOd,EAAIiB,MAAQ,MAE3BvB,IACDM,EAAIsC,OAAS,GACbtC,EAAIuC,eAAiBvC,EAAIwC,gBAAiB,EACtCzC,EAAEe,MAAM,QAAOd,EAAIuC,gBAAiB,GACpCxC,EAAEe,MAAM,QAAOd,EAAIwC,gBAAiB,IAG3C1C,EAAYC,EAAGC,GAEXN,GACGK,EAAEe,MAAM,OAAMd,EAAIuB,mBAAoB,QAK1BkB,IAAfzC,EAAIgB,SACLhB,EAAIgB,QAASrD,KAAKU,YAAgBqB,GAAWC,EAAW+C,OAAc,EAAJ,GAGpD,GAAZ1C,EAAIM,MAAqC,GAAtB7C,EAAMkF,eAAoB3C,EAAIM,KAAO,KAGzDN,EAAIG,KAAOH,EAAIU,KAAOV,EAAII,MAAQJ,EAAIM,KAAON,EAAIO,IAAMP,EAAIS,GAAKT,EAAIK,KAAOL,EAAIgB,QAAU,GACtFjB,EAAEiC,UAAShC,EAAIG,KAAO,GAGN,gBAAnB1C,EAAMW,UAA6B,CACpC,IAAIwE,EAAMnF,EAAMoF,IAAIH,OAAQI,EAAI,EAChC,QAASC,EAAI,EAAGA,EAAIH,IAAOG,EACxBD,EAAIE,KAAKC,IAAIH,EAAGrF,EAAMoF,IAAIE,GAAItF,EAAMyF,IAAIH,IACvCD,EAAI,SACL9C,EAAIgB,OAAS,GAGnB,GAAKhB,EAAIiB,KAOEjB,EAAIiB,KAAKzB,QAAQ,KAAO,IAChCQ,EAAIiB,KAAO,QAAUjB,EAAIiB,UARb,CAIZ,IAAIkC,EAAKxF,KAAKyF,gBACVC,EAAMF,iBAAIG,YAAW,KACpBD,IAAQA,0BAAKE,kBAALF,IAAkBG,IAAI,MAAO/F,KAAQuC,EAAIiB,KAAO,QAKhEjB,EAAIiB,MAAQU,EAEZ,QAAS8B,EAAK,EAAGA,EAAK9D,EAAW+C,SAAUe,EAAI,CAC5C,IAA4CC,EAAS,GACrD5D,EADW,IAAI4B,KAAY/B,EAAW8D,IACpBC,GAClBA,EAAOnB,eAAiBvC,EAAIuC,eAC5BmB,EAAOlB,eAAiBxC,EAAIwC,eAC5BxC,EAAIsC,OAAOqB,KAAKD,IAKtBE,iBAAiBC,GACd,IAAKlG,KAAKE,KAAM,OAChB,IAAIiG,EAAKnG,KAAKyB,YACdzB,KAAKE,KAAKgE,QAAQkC,IACfA,EAAIC,MAASF,EAAGG,KAAKJ,GAAQE,EAAIG,MACjCH,EAAII,OAASL,EAAGM,KAAKP,GAAQE,EAAIG,QAKvCG,aACG,IAAIP,EAAKnG,KAAKyB,YACd,IAAK0E,EAAI,OAET,IAAIQ,EAAO,EAAGC,EAAUT,EAAGU,SACP,UAAfV,EAAG1F,WAAyBmG,EAAQ,GAAIA,IAEzB,gBAApBE,EAAOrG,UAA6BkG,EAAO,EACvB,qBAApBG,EAAOrG,UAAkCkG,EAAO,GAC5B,qBAAhBR,EAAG1F,WAAoD,oBAAhB0F,EAAG1F,WACvC0F,EAAG1F,UAAUE,MAAM,eAAagG,EAAO,GAE9C3G,KAAKE,KAAO,IAAI6G,MAAMH,GAEtB,QAASI,EAAI,EAAGA,EAAIJ,IAAWI,EAAG,CAC/B,IAAIZ,EAAMpG,KAAKE,KAAK8G,GAAK,CAAEC,EAAGd,EAAGe,GAAGF,GAAIG,EAAGhB,EAAGiB,GAAGJ,GAAIT,KAAMS,GAC3D,OAAOL,QACC,EACFP,EAAIiB,MAAQjB,EAAIkB,OAASnB,EAAGjB,IAAI8B,GAChCZ,EAAIC,MAAQD,EAAII,OAASL,EAAGZ,IAAIyB,GAChC,WACE,EACFZ,EAAIiB,MAASlB,EAAGoB,KAAKP,GACrBZ,EAAIkB,OAASnB,EAAGqB,KAAKR,GACrBZ,EAAIC,MAASF,EAAGG,KAAK,GAAGU,GACxBZ,EAAII,OAASL,EAAGM,KAAK,GAAGO,GACxB,WACE,EACFZ,EAAIiB,MAASlB,EAAGsB,OAAOT,GACvBZ,EAAIkB,OAASnB,EAAGuB,QAAQV,GACxBZ,EAAIC,MAASF,EAAGwB,OAAOX,GACvBZ,EAAII,OAASL,EAAGyB,QAAQZ,GAIpB,IAANA,IACDhH,KAAKG,KAAOH,KAAKK,KAAO+F,EAAIa,EAC5BjH,KAAKI,KAAOJ,KAAKM,KAAO8F,EAAIe,GAG/BU,EAAW,GACR7H,KAAKG,KAAOkF,KAAKyC,IAAI9H,KAAKG,KAAMiG,EAAIa,EAAIb,EAAIiB,MAAOjB,EAAIa,EAAIb,EAAIkB,QAC/DtH,KAAKK,KAAOgF,KAAKC,IAAItF,KAAKK,KAAM+F,EAAIa,EAAIb,EAAIiB,MAAOjB,EAAIa,EAAIb,EAAIkB,QAC/DtH,KAAKI,KAAOiF,KAAKyC,IAAI9H,KAAKI,KAAMgG,EAAIe,EAAIf,EAAIC,MAAOD,EAAIe,EAAIf,EAAII,QAC/DxG,KAAKM,KAAO+E,KAAKC,IAAItF,KAAKM,KAAM8F,EAAIe,EAAIf,EAAIC,MAAOD,EAAIe,EAAIf,EAAII,UAE/DxG,KAAKG,KAAOkF,KAAKyC,IAAI9H,KAAKG,KAAMiG,EAAIa,GACpCjH,KAAKK,KAAOgF,KAAKC,IAAItF,KAAKK,KAAM+F,EAAIa,GACpCjH,KAAKI,KAAOiF,KAAKyC,IAAI9H,KAAKI,KAAMgG,EAAIe,GACpCnH,KAAKM,KAAO+E,KAAKC,IAAItF,KAAKM,KAAM8F,EAAIe,KAU7CY,gBAAgBC,EAAOC,EAAOC,GAC3B,IAAI/H,EAAOH,KAAKG,KAAME,EAAOL,KAAKK,KAAMD,EAAOJ,KAAKI,KAAME,EAAON,KAAKM,KAElEH,GAAQE,IAAMA,EAAOF,EAAK,GAC1BC,GAAQE,IAAMA,EAAOF,EAAK,GAC9B,IAAI+H,EAAiB,IAAX9H,EAAKF,GAAWiI,EAAiB,IAAX9H,EAAKF,GACjCiI,EAAQlI,EAAOgI,EAAIG,EAAQjI,EAAO8H,EAClCI,EAAUnI,EAAOgI,EAAII,EAAUlI,EAAO8H,EAErCC,EAAQ,GAAOlI,GAAQ,IAAIkI,EAAa,GAALlI,GACnCmI,EAAQ,GAAOjI,GAAQ,IAAIiI,EAAQ,GAExC,IAAIxI,EAAQE,KAAKyB,YAUjB,IARsB,MAAlB3B,EAAM2I,WAAmBF,EAAUnI,EAAON,EAAM2I,WAC9B,MAAlB3I,EAAM4I,WAAmBF,EAAU1I,EAAM4I,UACxCH,EAAU,GAAOnI,GAAO,IAAImI,EAAU,GAAInI,IAI1C6H,IAAUC,IAAOD,EAAQC,GAAQ,KAFtCF,EAAQlI,EAAM6I,YAIF,EACTX,EAAQlI,EAAM6I,YAAaZ,qBAAgB,OAAQ,MAC7Ca,MAAQ9I,EAAM8I,MAAQ,KAC5B,IAAIC,GAAWnJ,SAAI,GACnBsI,EAAMc,MAAQd,EAAMc,MAAQD,EAC5B7I,KAAK+I,gBAAiB,EAGzBf,SAAMgB,OAASlJ,EAAMkJ,OAEjBf,IACDD,EAAMiB,OAAOC,MAAQb,EACrBL,EAAMiB,OAAOE,MAAQb,GAGpBJ,IACDF,EAAMoB,OAAOF,MAAQX,EACrBP,EAAMoB,OAAOD,MAAQX,EACrBR,EAAMS,SAAWF,EACjBP,EAAMU,SAAWF,GAGbR,EAKVqB,gBAAgBC,EAAKC,SAClB,IAAIzJ,EAAQE,KAAKyB,YACjB,GAAIzB,KAAK+I,iBAAmBjJ,EAAO,OAAO,EAE1C,IAAIkI,EAAQlI,EAAM6I,WAIlB,OADAY,EAAMA,GAAOvB,IAAWA,EAAMoB,OAAOF,MAAQlJ,KAAKI,MAAU4H,EAAMoB,OAAOD,MAAQnJ,KAAKM,UADtFgJ,EAAMA,GAAOtB,IAAWA,EAAMiB,OAAOC,MAAQlJ,KAAKG,MAAU6H,EAAMiB,OAAOE,MAAQnJ,KAAKK,SAEzEkJ,IAEbvJ,KAAK+H,gBAAgB,KAAMuB,EAAKC,GAChC,cAAKrI,mBAALsI,EAAuBC,sBAAsB,GAEtC,IAIVC,cACG,OAAQC,wBAAwB,IAAO3J,KAAKkC,QAAQqB,MAIvDqG,aAAaC,EAAQC,GAClB,GAAK9J,KAAKE,KAAK6E,OAAS,KAAQ+E,EAAa,OAAO9J,KAAKE,KAEzD,IAAI6J,EAAU,KACd,GAA0B,mBAAfD,EACR,QAASE,EAAI,EAAGA,EAAIhK,KAAKE,KAAK6E,SAAUiF,EACjCF,EAAY9J,KAAKE,KAAK8J,GAAGA,GACrBD,IAASA,EAAc,GAAHC,EAAQ,GAAKhK,KAAKE,KAAK4B,MAAM,EAAGkI,IAErDD,GAASA,EAAQ/D,KAAKhG,KAAKE,KAAK8J,IAQ7C,GAJKD,IAASA,EAAU/J,KAAKE,MAExB2J,IAAQA,EAAS,KAEjBE,EAAQhF,OAAS8E,IAAY7J,KAAK0J,cAAe,OAAOK,EAC7D,IAAIE,EAAO5E,KAAK6E,MAAMH,EAAQhF,OAAS8E,GACnCI,EAAO,IAAGA,EAAO,GACrB,IAAIE,EAAU,GACd,QAASH,EAAI,EAAGA,EAAID,EAAQhF,OAAQiF,GAAGC,EACpCE,EAAQnE,KAAK+D,EAAQC,IAExB,OAAOG,EAIVC,YAAYhI,GACT,IAAIiI,EAAQrK,KAAKsK,kBAAmBC,EAAQ,GACxCC,EAAQH,iBAAOI,WAAWzK,KAAKkC,QAAQwB,SAAU1D,KAAKkC,QAAQyB,UAC9D+G,EAAM1K,KAAKwB,UAIf,GAFA+I,EAAMvE,KAAKhG,KAAK2K,iBAEZvI,GAAKoI,EAWN,QAVe1F,IAAX1C,EAAEmE,MACHgE,EAAMvE,KAAK,OAAS5D,EAAEmE,MACzBgE,EAAMvE,KAAK,OAASwE,EAAMI,WAAW,IAAKxI,EAAE6E,IAC5CsD,EAAMvE,KAAK,OAASwE,EAAMI,WAAW,IAAKxI,EAAE+E,IAE5CqC,EACGe,EAAMvE,KAAK,cAAgBwE,EAAMI,WAAW,IAAKF,EAAInD,KAAKnF,EAAEmE,OAAS,KAAOiE,EAAMI,WAAW,IAAKF,EAAIlD,KAAKpF,EAAEmE,QACvGvG,KAAKkC,QAAQmB,QAAgC,UAArBmH,EAAMK,SAASlE,OAAoBvE,EAAEiF,OAASjF,EAAEkF,SAC9EiD,EAAMvE,KAAK,cAAgBwE,EAAMI,WAAW,IAAKxI,EAAEiF,OAAS,KAAOmD,EAAMI,WAAW,IAAKxI,EAAEkF,SAE1FoD,EACD,QAASI,EAAK,EAAGA,EAAKJ,EAAIK,YAAaD,EACpCP,EAAMvE,KAAM,UAAS8E,QAASN,EAAMI,WAAW,IAAKF,EAAIpE,KAAKwE,GAAI1I,EAAEmE,WAAWiE,EAAMI,WAAW,IAAKF,EAAIjE,KAAKqE,GAAI1I,EAAEmE,eAC7GvG,KAAKkC,QAAQmB,QAAWrD,KAAKkC,QAAQY,GAAK,IAA6B,UAArB0H,EAAMQ,SAASrE,OAAoBvE,EAAEiE,OAASjE,EAAEoE,SAC3G+D,EAAMvE,KAAK,cAAgBwE,EAAMI,WAAW,IAAKxI,EAAEiE,OAAS,KAAOmE,EAAMI,WAAW,IAAKxI,EAAEoE,SAGjG,OAAO+D,EAKVU,WACG,IAAIZ,EAAQrK,KAAKsK,kBAEjB,GAAID,GAASA,EAAMa,KAAOb,EAAMc,IAAK,OAAOd,EAG5C,IAAI7E,EAAKxF,KAAKyF,gBACV2F,GAAO5F,iBAAI6F,eAAgB,CAAEC,MAAO,IAAKC,OAAQ,KAErDlB,SAAQ,CACJmB,WAAW,EACX9F,IAAKF,iBAAIG,YAAW,GACpB8F,GAAIL,EAAKE,MACTI,GAAIN,EAAKG,OACTI,gBAAkB,OAAO3L,KAAKyL,IAC9BG,iBAAmB,OAAO5L,KAAK0L,IAC/BR,IAAIW,GACD,OACGA,EADC7L,KAAK0F,IAAIoG,MACDD,EAAQ,EAAKxG,KAAK0G,MAAMF,GAAS7L,KAAK0F,IAAIsG,QAE1CH,EAAQ7L,KAAK0F,IAAIuG,MAAQjM,KAAK0F,IAAIwG,IAAMlM,KAAK0F,IAAIuG,MAChDjM,KAAKyL,IAErBN,IAAIU,GACD,OAIQ,GAHLA,EADC7L,KAAK0F,IAAIyG,MACDN,EAAQ,EAAKxG,KAAK0G,MAAMF,GAAS7L,KAAK0F,IAAI0G,QAE1CP,EAAQ7L,KAAK0F,IAAI2G,MAAQrM,KAAK0F,IAAI4G,IAAMtM,KAAK0F,IAAI2G,OAC5CrM,KAAK0L,IAEzBjB,aAAe,OAAOzK,OAGnBqK,EAAM3E,IAAM2E,EAAQ,KAI9BkC,gBAAgBC,EAAUC,EAAMC,EAAUC,GACvC,IAAIC,EAAY,GAChB,QAAS5C,EAAI0C,EAAS3H,OAAO,EAAGiF,GAAK,IAAKA,EAAG,CAC1C,IAAI5D,EAAMsG,EAAS1C,GACf6C,EAAOxH,KAAKyH,KAAK1G,IAAI2G,KAAM,GAAI3G,IAAI4G,KAAM,IAE7C5G,EAAI8E,KAAOyB,EAAWvG,EAAI4G,KAAKH,EAC/BzG,EAAI+E,KAAOwB,EAAWvG,EAAI2G,KAAKF,EAC/BD,EAAU5G,KAAKI,GAGlB,IAAI6G,GAAQC,QAAaV,EAAW,UAAY,QAASI,GAEzD5M,KAAKmN,OAAOC,OAAO,YACPC,KAAK,IAAKZ,EAAKA,KAAOQ,EAAMR,KAAO,KACnCa,KAAKtN,KAAKuN,QAAQC,MAClBC,MAAM,UAAW,KAKhCC,SAASlD,EAAOtI,EAASiL,EAAQQ,EAAGC,EAAGC,EAASN,EAASO,GACtD,IAAIhO,EAAQE,KAAKyB,YACbkL,EAAa,EAAGD,EAAW,KAO/B,GALIoB,GAAcD,EAAQE,YACvBpB,EAAakB,EAAQlB,WAChBkB,EAAQvC,MAAQ,IAAOpJ,EAAQM,OAASN,EAAQO,QAAOP,EAAQM,KAAO,IAG1EN,EAAQY,GAAI,CACb4J,EAAW1M,KAAK4J,aAAc1H,EAAQY,GAAK,EAAK,IAAQ,GAGxD,QAASkH,EAAI,EAAGA,EAAI0C,EAAS3H,SAAUiF,EAAG,CACvC,IAAI5D,EAAMsG,EAAS1C,GACnB5D,EAAI8E,IAAMV,EAAMU,IAAI9E,EAAIa,GACxBb,EAAI+E,IAAMX,EAAMW,IAAI/E,EAAIe,EAAIf,EAAIC,OAGnC,IAAI2H,GAAQd,QAAchL,EAAQY,GAAK,EAAK,SAAW,OAAQ4J,GAC3DuB,EAAQ,GAEZ,QAASjE,EAAI0C,EAAS3H,OAAO,EAAGiF,GAAK,IAAKA,EAAG,CAC1C,IAAI5D,EAAMsG,EAAS1C,GACnB5D,EAAI+E,IAAMX,EAAMW,IAAI/E,EAAIe,EAAIf,EAAII,QAChCyH,EAAMjI,KAAKI,GAId,IAAI6G,GAAQC,QAAchL,EAAQY,GAAK,EAAK,UAAY,QAASmL,GAEjEd,EAAOC,OAAO,YACPC,KAAK,IAAKW,EAAMvB,KAAOQ,EAAMR,KAAO,KACpCa,KAAKC,EAAQC,MAChBM,IACD9N,KAAKkO,UAAY,SAGvB,GAAIhM,EAAQM,MAAQN,EAAQa,KAAM,CAE/B,IAAIoL,EAAe,GACI,SAAnBrO,EAAMW,YAAsByB,EAAQa,KAAO,GAE3Cb,EAAQa,OACToL,EAAe,IACfxB,EAAa,GAGXD,IAAUA,EAAW1M,KAAK4J,aAAa,IAE5C,QAASI,EAAI,EAAGA,EAAI0C,EAAS3H,SAAUiF,EAAG,CACvC,IAAI5D,EAAMsG,EAAS1C,GACnB5D,EAAI8E,IAAMV,EAAMU,IAAI9E,EAAIa,GACxBb,EAAI+E,IAAMX,EAAMW,IAAI/E,EAAIe,GAG3B,IAAIR,EAAO,OACPgG,IAAYhG,GAAQ,QAExB,IAAI8F,GAAOS,QAAavG,EAAM+F,GAE1BC,GACA3M,KAAKuM,iBAAgB,EAAOE,EAAMC,EAAUC,GAEhD,IAAIyB,EAAOjB,EAAOC,OAAO,YAAYC,KAAK,IAAKZ,EAAKA,KAAO0B,GACvDjM,EAAQM,MACT4L,EAAKd,KAAKO,EAAQL,MAErB3F,EAAY9E,KACTqL,EAAKd,KAAKC,EAAQC,MAElBY,EAAKX,MAAM,OAAQ,QAElBK,IACD9N,KAAKkO,UAAY,SAGvB,GAAIhM,EAAQO,MAAO,CAChB,IAAI4L,EAAY3B,EAChB,GAAuB,SAAlB1M,KAAKkO,YAA0BG,GAAgC,GAAjBnM,EAAQO,OAAgB4L,EAAUtJ,OAAS,IAAS,CACpGsJ,EAAYrO,KAAK4J,aAA+B,GAAjB1H,EAAQO,MAAc,IAAQ,GAC7D,QAASuH,EAAI,EAAGA,EAAIqE,EAAUtJ,SAAUiF,EAAG,CACxC,IAAI5D,EAAMiI,EAAUrE,GACpB5D,EAAI8E,IAAMV,EAAMU,IAAI9E,EAAIa,GACxBb,EAAI+E,IAAMX,EAAMW,IAAI/E,EAAIe,IAI9B,IAAIR,EAAO,SACPgG,IAAYhG,GAAQ,QAExB,IAAI8F,GAAOS,QAAavG,EAAM0H,GAE1B1B,GACA3M,KAAKuM,iBAAgB,EAAME,EAAM4B,EAAW1B,GAEhDQ,EAAOC,OAAO,YACPC,KAAK,IAAKZ,EAAKA,MACfa,KAAKO,EAAQL,MACbC,MAAM,OAAQ,QACjBK,IACD9N,KAAKkO,UAAY,SAGvB,IAAII,EAAQ,KAgDZ,IA9CIpM,EAAQmB,QAAUnB,EAAQQ,MAAQR,EAAQU,OAE3C8J,EAAW1M,KAAK4J,aAAa,IAAM,CAAC2E,EAAIC,KAErC,IAAItD,EAAMV,EAAMU,IAAIqD,EAAItH,GAGxB,IAAK/E,EAAQU,MAASsI,EAAM,GAAOA,EAAMyC,GAAK,OAAO,EAErD,IAAIxC,EAAMX,EAAMW,IAAIoD,EAAIpH,GAExB,OAAKjF,EAAQU,MAAQV,EAAQW,WAAcsI,EAAM,GAAOA,EAAMyC,KAE9DW,EAAIE,KAAOpJ,KAAKqJ,MAAMxD,GACtBqD,EAAII,KAAOtJ,KAAKqJ,MAAMvD,GAElBnL,KAAKU,aACN6N,EAAIK,KAAOvJ,KAAKqJ,MAAMlE,EAAMU,IAAIqD,EAAItH,EAAI/E,EAAQgB,UAAUqL,EAAIlH,OAAS6D,GACvEqD,EAAIM,KAAOxJ,KAAKqJ,MAAMlE,EAAMU,IAAIqD,EAAItH,EAAI/E,EAAQgB,UAAUqL,EAAIjH,QAAU4D,GACxEqD,EAAIO,KAAOzJ,KAAKqJ,MAAMlE,EAAMW,IAAIoD,EAAIpH,EAAIoH,EAAIlI,OAAS8E,GACrDoD,EAAIQ,KAAO1J,KAAKqJ,MAAMlE,EAAMW,IAAIoD,EAAIpH,EAAIoH,EAAI/H,QAAU2E,GAEtDnL,KAASQ,SACN+N,EAAIS,MAAQ3J,KAAKqJ,MAAMlE,EAAMW,IAAIoD,EAAIpH,EAAIrH,EAAMmP,QAAQT,IAAMrD,GAC7DoD,EAAIW,MAAQ7J,KAAKqJ,MAAMlE,EAAMW,IAAIoD,EAAIpH,EAAIrH,EAAMqP,SAASX,IAAMrD,GAC9DoD,EAAIa,MAAQ/J,KAAKqJ,MAAMlE,EAAMU,IAAIqD,EAAItH,EAAInH,EAAMuP,QAAQb,IAAMtD,GAC7DqD,EAAIe,MAAQjK,KAAKqJ,MAAMlE,EAAMU,IAAIqD,EAAItH,EAAInH,EAAMyP,SAASf,IAAMtD,IAE9DqD,EAAIS,MAAQT,EAAIW,MAAQX,EAAIa,MAAQb,EAAIe,MAAQ,IAI/C,KAGNxB,IACD9N,KAAKkO,UAAY,SAEpBI,EAAQnB,EAAOqC,UAAU,YACVC,KAAK/C,GACLgD,QACAtC,OAAO,SACPC,KAAK,QAAS,WACdA,KAAK,YAAajL,GAAM,aAAYA,EAAEqM,QAAQrM,EAAEuM,UAG9DzM,EAAQU,IAAK,CAEd,QAAS4L,EAAI,EAAGA,EAAI9B,EAAS3H,OAAO,IAAKyJ,EACtC9B,EAAS8B,GAAGlD,MAAQjG,KAAKC,IAAI,GAAIoH,EAAS8B,EAAE,GAAGC,KAAO/B,EAAS8B,EAAE,GAAGC,MAAQ,EAAI,GAGnF,OAAQ/B,EAAS3H,aACT,EAAG,WACH,EAAG2H,EAAS,GAAGpB,MAAQqC,EAAE,EAAG,WAC5B,EAAGjB,EAAS,GAAGpB,MAAQoB,EAAS,GAAGpB,OAASoB,EAAS,GAAG+B,KAAK/B,EAAS,GAAG+B,MAAM,EAAG,cAEpF/B,EAAS,GAAGpB,MAAQoB,EAAS,GAAGpB,MAChCoB,EAASA,EAAS3H,OAAO,GAAGuG,MAAQoB,EAASA,EAAS3H,OAAO,GAAGuG,MAGtE,IAAIqE,EAAMtK,KAAKqJ,MAAMlE,EAAMW,IAAI,IAAKyE,EAAUrC,EAE9C,GAAIO,EAAY,CACb,IAAI+B,EAAK7P,KAAKsK,kBACVwF,GAAQD,iBAAItC,YAAYsC,iBAAItC,QAAQlJ,SAAUwL,EAAGtC,QAAQwC,gBAAiB,EAC1ED,IAAUvC,EAAQwC,iBACnBH,EAAU,IAAII,IAAgB,CAAEC,MAAgB,SAATH,EAAmB,EAAI,EAAGI,QAAS,QAGhF5B,EAAMlB,OAAO,YACPC,KAAK,IAAKjL,IACRA,EAAE+N,KAAM,EACR,IAAIhI,EAAK9C,KAAKqJ,OAAOtM,EAAEkJ,MAAM,GACzB8E,EAAK/K,KAAKqJ,MAAMtM,EAAEkJ,OAGtB,MAAQ,IAAGnD,KAFa,IAAdjG,EAAQU,IAAW,EAAMR,EAAEuM,KAAOgB,EAAOA,EAAIvN,EAAEuM,KAAO,KAEzCyB,KADC,IAAdlO,EAAQU,IAAYgL,EAAIxL,EAAEuM,KAAOf,EAAIxL,EAAEuM,KAAO,EAAKtJ,KAAKgL,IAAIV,EAAMvN,EAAEuM,UAC1CyB,OAExC9C,KAAKsC,EAAQpC,MAgBpB,GAbItL,EAAQQ,MACT4L,EAAMgC,OAAOlO,GAAMA,EAAEiF,MAAQ,GAAOjF,EAAEkF,OAAS,GAAOlF,EAAEiE,MAAQ,GAAOjE,EAAEoE,OAAS,GAC/E4G,OAAO,YACPC,KAAK,IAAKjL,IACPA,EAAEgJ,MAAO,EACD,IAAGhJ,EAAEwM,QAAQxM,EAAE0M,QAAQ1M,EAAEyM,QAAQzM,EAAE2M,QAAQ3M,EAAEwM,UAExDtB,KAAKC,EAAQC,MACbF,KAAsB,IAAjBpL,EAAQQ,KAAamL,EAAQL,KAAO,QAG/CxN,KAAKuQ,WAAa,EAEdrO,EAAQmB,OAAQ,CAEjB,IAAImN,EAAK3C,EAAQvC,MAAQmF,uBAAsBC,EAAK,EAChDC,EAAKzO,EAAQe,KAAQ,MAAKuN,MAAM,EAAGA,IAAO,GAC1CI,EAAK1O,EAAQe,KAAQ,IAAGuN,QAAQ,EAAGA,IAAO,GAC1CK,EAAQF,EAAIG,EAASH,EAAII,EAAOH,EAAII,EAAUJ,EAElD,MAAMK,EAAW,CAAC9I,EAAGC,KAClB,IAAKlG,EAAQc,UAAW,MAAQ,IAAGmF,KAAMC,IACzC,IAAI/F,EAAM,OACV,OAAI8F,EAAW9F,GAAO+F,EAAM,IAAGD,KAAMC,IAAQ,IAAGD,KACzCC,EAAY,QAAGA,IAAO/F,GAGhC,OAAQH,EAAQe,WACR,EACFyN,EAAKrL,KAAKC,IAAIuI,EAAQvC,MAAM,EAAGjG,KAAKqJ,MAAS,IAAH8B,IAC1CK,EAAS,IAAGH,KAAMF,MAAOE,MAAM,EAAGF,KAAME,IACxCI,EAAU,KAAIJ,KAAMF,KAAME,MAAM,EAAGF,MAAOE,IAC1CK,EAAQ,KAAIP,KAAME,MAAOA,KAAM,EAAEF,KAAME,IACvCM,EAAW,KAAIR,MAAOE,KAAMA,KAAM,EAAEF,MAAOE,IAC3C,WACE,EACFF,EAAKnL,KAAKC,IAAIkL,EAAInL,KAAKqJ,MAAwB,EAAlB5O,EAAMoR,YAAc,MACjDR,EAAKrL,KAAKC,IAAIuI,EAAQvC,MAAM,EAAGjG,KAAKqJ,MAAS,IAAH8B,IAC1CK,EAAS,IAAGH,KAAMF,MAAM,EAAGA,MAAOE,KAAMF,IACxCM,EAAU,KAAIJ,KAAMF,MAAM,EAAGA,KAAME,KAAMF,IACzCO,EAAQ,KAAIP,KAAME,KAAM,EAAEF,MAAOA,MAAOE,IACxCM,EAAW,KAAIR,MAAOE,KAAM,EAAEF,MAAOA,KAAME,IAC3C,WACE,EACFF,EAAKnL,KAAKC,IAAIkL,EAAInL,KAAKqJ,MAAwB,EAAlB5O,EAAMoR,YAAc,MACjDR,EAAKrL,KAAKC,IAAIuI,EAAQvC,MAAM,EAAGjG,KAAKqJ,MAAS,IAAH8B,IAC1CK,EAAS,IAAGH,KAAMF,QAAQ,EAAGA,MAAOE,KAAMF,IAC1CM,EAAU,KAAIJ,KAAMF,QAAQ,EAAGA,KAAME,KAAMF,IAC3CO,EAAQ,KAAIP,KAAME,KAAM,EAAEF,QAASA,MAAOE,IAC1CM,EAAW,KAAIR,MAAOE,KAAM,EAAEF,QAASA,KAAME,IAInD1Q,KAAKuQ,WAAaC,EAElBA,EAAKnL,KAAK6E,OAAO2D,EAAQvC,MAAM,GAAG,GAElC,IAAI6F,EAAU7C,EAAMgC,OAAOlO,GAAMA,EAAEiF,MAAQ,GAAOjF,EAAEkF,OAAS,GAAOlF,EAAEiE,MAAQ,GAAOjE,EAAEoE,OAAS,IAC5FtE,EAAQ0C,gBAAkB1C,EAAQ2C,kBACnCsM,EAAUA,EAAQb,OAAOlO,KAAc,GAAPA,EAAE6E,GAAY/E,EAAQ0C,gBAA4B,GAAPxC,EAAE+E,GAAYjF,EAAQ2C,oBAE/FuM,oBAAiBzH,oBAAoBmE,GACvCqD,EAAQ/D,OAAO,YACPK,MAAM,OAAQ,QACdA,MAAM,iBAAkB,eACxBJ,KAAK,IAAKjL,GAAM,IAAGA,EAAEwM,QAAQxM,EAAE0M,QAAQ1M,EAAEyM,KAAKzM,EAAEwM,QAAQxM,EAAE2M,KAAK3M,EAAE0M,QAAQ1M,EAAEwM,KAAKxM,EAAEyM,SAE7FsC,EAAQ/D,OAAO,YACVE,KAAKO,EAAQL,MACbC,MAAM,OAAQ,QACdJ,KAAK,IAAKjL,IACRA,EAAEiP,OAAQ,GACDjP,EAAEiF,MAAQ,EAAM4J,EAAS7O,EAAEwM,KAAK4B,EAAIpO,EAAE4M,OAAS6B,EAAQ,KACvDzO,EAAEkF,OAAS,EAAK2J,EAAS7O,EAAEyM,KAAK2B,EAAIpO,EAAE8M,OAAS4B,EAAS,KACxD1O,EAAEiE,MAAQ,EAAM4K,EAAS7O,EAAEgN,MAAOhN,EAAE0M,KAAK0B,GAAMQ,EAAU,KACzD5O,EAAEoE,OAAS,EAAKyK,EAAS7O,EAAEkN,MAAOlN,EAAE2M,KAAKyB,GAAMO,EAAO,MAIzE,GAAI7O,EAAQS,KAAM,CAEf3C,KAAKsR,gBAAgB,CAAEjE,KAAMvN,EAAO2N,MAAOvL,EAAQS,KAAO,MAE1D3C,KAAKuR,YAAcvR,KAAKwR,UAAUC,cAElCzR,KAAKwR,UAAUE,WAEf,IAAenD,EAAKrD,EAAKC,EAArBsB,EAAO,GACPkF,IAAgBP,oBAAiBzH,sBAAsB3J,KAAKwR,UAAUI,MAAS5R,KAAKuR,YAAc,KAAQjD,GAASR,EACnH+D,EAAe,GAAIC,EAAMzM,KAAKC,IAAI,EAAGD,KAAKqJ,MAAuB,GAAjB1O,KAAKuR,cACrDQ,EAAe,KAAW/R,KAAKwR,UAAUQ,kBAAoB,GAAI/H,EAAO,EAEvEyC,EAEI1M,KAAK0J,eAAkBgD,EAAS3H,OAAS,IAAIgN,IACnD9H,EAAO5E,KAAKyC,IAAI,EAAGzC,KAAKqJ,MAAMhC,EAAS3H,OAAOgN,KAF9CrF,EAAW1M,KAAK4J,aAAamI,GAIhC,QAAS/H,EAAI,EAAGA,EAAI0C,EAAS3H,OAAQiF,GAAKC,EACvCsE,EAAM7B,EAAS1C,GACfkB,EAAMV,EAAMU,IAAIqD,EAAItH,GACfiE,GAAOlL,KAAKuR,aAAiBrG,EAAMyC,EAAI3N,KAAKuR,cAC9CpG,EAAMX,EAAMW,IAAIoD,EAAIpH,GACfgE,GAAOnL,KAAKuR,aAAiBpG,EAAMyC,EAAI5N,KAAKuR,cAC9C9E,GAAQzM,KAAKwR,UAAUS,OAAO/G,EAAKC,GAC/BwG,IAAcE,GAAiB,IAAG3G,EAAI4G,KAAO3G,EAAI2G,KAAO,EAAEA,KAAO,EAAEA,MAAO,EAAGA,QAKtFrF,EAAK1H,OAAS,IACfoI,EAAOC,OAAO,YACPC,KAAK,IAAKZ,GACVa,KAAKtN,KAAKwR,UAAUhE,MACZ,OAAVc,GAAsC,QAAlBtO,KAAKkO,WAAwBJ,IACnD9N,KAAKkO,UAA6B,KAAhBhM,EAAQS,KAAe,OAAS,SAEpDgP,GAAgBE,GACjB1E,EAAOC,OAAO,YACPC,KAAK,IAAKwE,GACVpE,MAAM,OAAQ,QACdA,MAAM,iBAAkB,gBAKxCyE,SAAS1H,EAAO1K,GACb,IAAIqS,EAAQ9M,KAAKC,IAAIkF,EAAM4H,WAAYtS,EAAMuS,MACzCC,EAAQjN,KAAKyC,IAAI0C,EAAM+H,WAAYzS,EAAM0S,MACzCC,EAAQpN,KAAKC,IAAIkF,EAAMkI,WAAY5S,EAAM6S,MACzCC,EAAQvN,KAAKyC,IAAI0C,EAAMqI,WAAY/S,EAAMgT,MACzC7F,EAAQ,GACR8F,EAAW,CAACC,EAAGC,EAAGC,EAAGC,IAAQ,IAAG3I,EAAMU,IAAI8H,MAAOxI,EAAMW,IAAI8H,MAAOzI,EAAMU,IAAIgI,MAAO1I,EAAMW,IAAIgI,KAC7FC,GAAStT,EAAMgT,KAAOhT,EAAM6S,OAAOnI,EAAM4H,WAAWtS,EAAMuS,OAAOvS,EAAM0S,KAAK1S,EAAMuS,MAAQvS,EAAM6S,KAChGU,GAASvT,EAAMgT,KAAKhT,EAAM6S,OAAOnI,EAAM+H,WAAWzS,EAAMuS,OAAOvS,EAAM0S,KAAK1S,EAAMuS,MAAQvS,EAAM6S,KAI/F1F,EAFCmG,EAAQ5I,EAAMkI,WAEPK,GADKjT,EAAM0S,KAAO1S,EAAMuS,OAAO7H,EAAMkI,WAAW5S,EAAM6S,OAAO7S,EAAMgT,KAAKhT,EAAM6S,MAAQ7S,EAAMuS,KAC5E7H,EAAMkI,WAAYP,EAAOM,GAEzCM,EAASvI,EAAM4H,WAAYgB,EAAOjB,EAAOM,GAKjDxF,GAFCoG,EAAQ7I,EAAMqI,WAENE,EAAST,EAAOM,GADZ9S,EAAM0S,KAAK1S,EAAMuS,OAAO7H,EAAMqI,WAAW/S,EAAM6S,OAAO7S,EAAMgT,KAAKhT,EAAM6S,MAAQ7S,EAAMuS,KAC3D7H,EAAMqI,YAEpCE,EAAST,EAAOM,EAAOpI,EAAM+H,WAAYc,GAGrD,IAAIC,EAAQ,IAAIC,KAAgB,CAAE9F,MAAO,EAAGnC,MAAO,EAAG2E,MAAO,UACzDuD,EAAQ,IAAID,KAAgB,CAAE9F,MAAO,EAAGnC,MAAO,EAAG2E,MAAO,UAE7DjQ,KAAKmN,OAAOC,OAAO,QACPC,KAAK,IAAK0F,EAASZ,EAAMM,EAAMH,EAAMM,IACrCtF,KAAKgG,EAAM9F,MACXC,MAAM,OAAQ,QAE1BzN,KAAKmN,OAAOC,OAAO,QACPC,KAAK,IAAKJ,GACVK,KAAKkG,EAAMhG,MACXC,MAAM,OAAQ,QAG7BgG,aACGC,QAAQC,IAAI,qDAIftS,YAEG,IAAIgJ,EAAQrK,KAAKiL,WACbnL,EAAQE,KAAKyB,YACjB,IAAK4I,EAAO,OAGZ,GAAIrK,KAAKkC,QAAQoC,MACd,OAAOtE,KAAKyT,WAAWpJ,EAAOvK,GAEjC,IAAIiC,IAAW/B,KAAKwB,UAChBgJ,EAAQH,EAAMI,WAAWzK,KAAKkC,QAAQwB,SAAU1D,KAAKkC,QAAQyB,UAC7DgK,EAAItD,EAAMsB,gBACViC,EAAIvD,EAAMuB,iBAId,GAFA5L,KAAK4T,SAASvJ,EAAMmB,WAEhBxL,KAAKkC,QAAQsC,MAAQxE,KAAKkC,QAAQuC,MAAQzE,KAAKkC,QAAQwC,KAAM,CAC9D,IAAImP,EAAK7T,KAAKkB,iBACd,GAAkC,mBAAvB2S,iBAAIC,iBAA+B,CAC3C,IAAIC,EAASF,EAAGC,kBACZ9T,KAAKkC,QAAQsC,OAAQ1E,EAAMkU,WAAaD,SAAe/T,KAAKuN,SAC5DvN,KAAKkC,QAAQuC,OAAQ3E,EAAMmU,WAAaF,SAAe/T,KAAK6N,SAC5D7N,KAAKkC,QAAQwC,OAAQ5E,EAAMoU,aAAeH,SAAe/T,KAAKwR,WAClExR,KAAKkC,QAAQsC,KAAOxE,KAAKkC,QAAQuC,KAAOzE,KAAKkC,QAAQwC,MAAO,GAIlE1E,KAAKmU,cAAc,CAAE9G,KAAMvN,EAAOsU,UAAU,IAC5CpU,KAAKqU,cAAc,CAAEhH,KAAMvN,IAE3BE,KAAKuN,QAAQ+G,MAAO,EAEpBtU,KAAKkO,UAAY,OACjBlO,KAAKuR,YAAc,EACnB,IAAIpE,EAASpL,EAAS/B,KAAKmN,OAAOC,OAAO,SAAWpN,KAAKmN,OAOzD,GALAnN,KAAK0N,SAASlD,EAAOxK,KAAKkC,QAASiL,EAAQQ,EAAGC,EAAG5N,KAAK6N,QAAS7N,KAAKuN,SAAS,GAEtD,YAAnBzN,EAAMW,WACPT,KAAKkS,SAAS1H,EAAO1K,GAEpBiC,EAAQ,CACT,QAASqD,EAAI,EAAGA,EAAItF,EAAMiL,YAAa3F,EAAG,CACvC,IAAIyI,EAAU7N,KAAK6N,QAASN,EAAUvN,KAAKuN,QACvCvN,KAAKkC,QAAQ0B,oBACdiK,EAAU,IAAI0F,KAAgB,CAAElG,KAAMvN,EAAMyU,SAASnP,GAAIoP,KAAK,IAC9DjH,EAAU,IAAIyC,IAAgB,CAAE3C,KAAMvN,EAAM2U,SAASrP,GAAIoP,KAAK,EAAOE,IAAK1U,KAAK2U,gBAElF,IAAIC,EAAQ5U,KAAKmN,OAAOC,OAAO,SAC3BlL,EAAUkD,EAAIpF,KAAKkC,QAAQyC,OAAOI,OAAS/E,KAAKkC,QAAQyC,OAAOS,GAAKpF,KAAKkC,QAC7ElC,KAAKiG,iBAAiBb,GACtBpF,KAAK0N,SAASlD,EAAOtI,EAAS0S,EAAOjH,EAAGC,EAAGC,EAASN,GAEvDvN,KAAKiG,iBAAiB,IAGpBmL,qBACFyD,OAAe7U,KAAMA,KAAK8U,gBAIhCC,eAAexG,GACZ,IAAKA,EAAK,OAAO,KAEjB,GAAuB,SAAlBvO,KAAKkO,WAA4C,QAAlBlO,KAAKkO,WAA2C,QAAlBlO,KAAKkO,UACpE,OAAOlO,KAAKgV,sBAAsBzG,GAErC,GAAsB,SAAlBvO,KAAKkO,UAAsB,OAAO,KAEtC,IAAI7D,EAAQrK,KAAKsK,kBACbiB,EAASlB,EAAMuB,iBACfqJ,EAAMjV,KAAKuQ,WACX2E,EAA+B,IAArBlV,KAAKkC,QAAQU,IACvB4H,EAAQ0K,EAAS7K,EAAMI,WAAWzK,KAAKkC,QAAQwB,SAAU1D,KAAKkC,QAAQyB,UAAY,KAClFwR,EAAU,KAAMC,EAAa,KAAMC,EAAO,KAC1CC,EAAQtV,KAAKuR,YAAclM,KAAKqJ,MAAM1O,KAAKuR,YAAY,EAAI,KAAO,EAsCtE,GApCAvR,KAAKmN,OAAOqC,UAAU,YAAY+F,KAAK,WACpC,IAAInT,GAAIoT,QAAUxV,MAAMyV,QACxB,QAAU3Q,IAAN1C,EAAiB,OACrB,IAIIgJ,EAJAsK,EAASnH,IAAItH,EAAI7E,EAAEqM,KAAS,GAEhC,GADkB,IAAdF,EAAIoH,QAAaD,GAAUnH,IAAIpH,EAAI/E,EAAEuM,KAAS,IAC9C+G,GAASN,EAAY,OAIzB,GAAIhT,EAAEiP,OAASjP,EAAEgJ,MAAQhJ,EAAEwT,OACxBxK,EAAO,CAAE4H,GAAI3N,KAAKyC,KAAKmN,EAAK7S,EAAEwM,MAAO0G,GAC5BpC,GAAI7N,KAAKC,IAAI2P,EAAK7S,EAAEyM,KAAMyG,GAC1BrC,GAAI5N,KAAKyC,KAAKmN,EAAK7S,EAAE2M,MAAOuG,GAC5BnC,GAAI9N,KAAKC,IAAI2P,EAAK7S,EAAE0M,KAAMwG,YAC3BlT,EAAE+N,KAGT,GAFA/E,EAAO,CAAE4H,IAAK5Q,EAAEkJ,MAAM,EAAG4H,GAAI9Q,EAAEkJ,MAAM,EAAG2H,GAAI,EAAGE,GAAI5H,EAASnJ,EAAEuM,MAE1DuG,EAAQ,CACT,IAAIvF,EAAMnF,EAAMW,IAAI,GACpBC,EAAK6H,GAAM7Q,EAAEuM,KAAOgB,EAAOA,EAAIvN,EAAEuM,KAAO,EACxCvD,EAAK+H,GAAM/Q,EAAEuM,KAAOgB,EAAO,EAAIA,EAAIvN,EAAEuM,WAGxCvD,EAAO,CAAE4H,IAAI,EAAIE,GAAI,EAAGD,IAAI,EAAIE,GAAI,GAEvC,IACI0C,EAAUtH,EAAIpH,GAAK/E,EAAEuM,KAAOvD,EAAK6H,IAAQ1E,EAAIpH,GAAK/E,EAAEuM,KAAOvD,EAAK+H,GADtD5E,EAAItH,GAAK7E,EAAEqM,KAAOrD,EAAK4H,IAAQzE,EAAItH,GAAK7E,EAAEqM,KAAOrD,EAAK8H,KAGrD2C,GAAWtH,EAAIoH,MAAQ,KACnCP,EAAaM,EACbP,EAAUnV,KACVqV,EAAOjK,EACPiK,EAAKS,MAAwBD,KAIpB,OAAZV,EAAkB,OAAO,KAE7B,IAAI/S,GAAIoT,QAAUL,GAASM,QACvBtP,EAAKnG,KAAKyB,YACVY,EAAM,CAAE8B,KAAMgC,EAAGyC,MAAOmN,MAAO5P,EAAG6C,OAC1B/B,EAAG7E,EAAEqM,KAAMtH,EAAG/E,EAAEuM,KAChBqH,OAAQhW,KAAK6N,QAAQoC,MACrB1F,MAAOvK,KAAKoK,YAAYhI,GACxBgJ,KAAMiK,EAAMY,MAAOd,GAE9B9S,SAAI6T,UAAY,CAAEC,IAAKhQ,EAAIhC,KAAMgC,EAAGyC,MAAOxC,IAAKhE,EAAEmE,KAAM6P,KAAMhU,EAAE+E,EAAG+D,IAAK9I,EAAEqM,KAAMtD,IAAK/I,EAAEuM,MAEpF3O,KAAKuN,SAAWvN,KAAKuN,QAAQ+G,OAAStU,KAAKuN,QAAQlJ,UACpDhC,EAAIgU,OAASrW,KAAKuN,QAAQwC,gBAEzBsF,EAAKS,QAAOzT,EAAIyT,OAAQ,GAC5BzT,EAAIiU,KAAOjU,EAAIyT,MACfzT,EAAIkU,UAAY,EAChBlU,EAAI+D,IAAMhE,EACVC,EAAImU,QAAUpU,EAAEmE,KAETlE,EAIVoU,YAAYC,GAET,IAAKA,EAEF,YADI1W,KAAKmN,QAAQnN,KAAKmN,OAAOwJ,OAAO,gBAAgBC,UAIvD,GAAIF,EAAKG,QAAS,OAAO7W,KAAK8W,mBAAmBJ,GAEjD,IAAItU,GAAIoT,QAAUkB,EAAKT,OAAOR,QAC1BsB,EAAS/W,KAAKmN,OAAOwJ,OAAO,gBAE5BI,EAAO1S,UACR0S,EAAS/W,KAAKmN,OAAOC,OAAO,YACPC,KAAK,QAAQ,qBACbI,MAAM,iBAAiB,SAE/CiJ,EAAKM,QAAUD,EAAOE,SAAS,iBAAmBP,EAAKT,MAEnDS,EAAKM,SACND,EAAO1J,KAAK,IAAKjL,EAAEqM,KAAOiI,EAAKtL,KAAK4H,IAC7B3F,KAAK,QAASqJ,EAAKtL,KAAK8H,GAAKwD,EAAKtL,KAAK4H,IACvC3F,KAAK,IAAKjL,EAAEuM,KAAO+H,EAAKtL,KAAK6H,IAC7B5F,KAAK,SAAUqJ,EAAKtL,KAAK+H,GAAKuD,EAAKtL,KAAK6H,IACxCxF,MAAM,UAAW,OACjBwJ,SAAS,cAAeP,EAAKT,OAI1CiB,oBAAoB3I,GACjB,IAAImI,EAAO1W,KAAK+U,eAAexG,GAC/B,QAAKA,IAAQA,EAAI4I,WAAUnX,KAAKyW,YAAYC,GACrCA,EAIVU,YAAY7I,GACT,IAAKvO,KAAKE,KAAM,OAAO,KAEvB,IAMImX,EAAMnM,EAAKC,EAAKnB,EAAG5D,EANnBkR,EAA6B,SAAlBtX,KAAKkO,UAChBqJ,GAAW,EACXC,EAAU,KACVC,EAAW,KAEXjN,EADQxK,KAAKsK,kBACCG,WAAWzK,KAAKkC,QAAQwB,SAAU1D,KAAKkC,QAAQyB,UAGjE,IAAKqG,EAAI,EAAGA,EAAIhK,KAAKE,KAAK6E,SAAUiF,EACjC5D,EAAMpG,KAAKE,KAAK8J,GAEhBkB,EAAMV,EAAMU,IAAI9E,EAAIa,GACpBkE,EAAMX,EAAMW,IAAI/E,EAAIe,GAEpBkQ,EAAQ9I,IAAItH,EAAEiE,EAAM,GAAKqD,IAAIpH,EAAEgE,EAAM,GAEjCkM,EAAOI,IACRA,EAAWJ,EACXG,EAAUpR,EACVmR,EAAWvN,GAKZyN,EAAW,KAAQH,IAASE,EAAU,MAE3C,IAAIE,EAASrS,KAAKC,IAAItF,KAAK6N,QAAQvC,MAAQ,EAAG,GAE1CtL,KAAKuR,YAAc,IAAGmG,EAASrS,KAAKC,IAAItF,KAAKuR,YAAamG,IAE1DF,IACDC,EAAWpS,KAAKyH,KAAMyB,IAAItH,EAAEuD,EAAMU,IAAIsM,EAAQvQ,GAAK,GAAKsH,IAAIpH,EAAEqD,EAAMW,IAAIqM,EAAQrQ,GAAK,MAEnFmQ,GAAYG,EAAWC,IAASF,EAAU,MAE1CA,IAASD,GAAW,GAEzB,IAAIlV,EAAM,CAAE+D,IAAKoR,EAASjR,KAAMgR,EAAUF,KAAMI,EAAUC,OAAQrS,KAAKqJ,MAAMgJ,IAE7E,IAAKF,GAAWF,EAAS,CAEtBG,EAAW,KAEX,MAAME,EAAW,CAAC1Q,EAAG+L,EAAIE,IAASF,GAAM/L,GAAOA,GAAKiM,GAAUF,GAAM/L,GAAOA,GAAKiM,EAEhF,IAAmDpE,EAA/C8I,EAAO5X,KAAKE,KAAK,GAAI0O,EAAOpE,EAAMU,IAAI0M,EAAK3Q,GAAU4Q,EAAO,EAChE,IAAK7N,EAAI,EAAGA,EAAIhK,KAAKE,KAAK6E,SAAUiF,EACjC5D,EAAMpG,KAAKE,KAAK8J,GAChBkB,EAAMV,EAAMU,IAAI9E,EAAIa,GAEhB0Q,EAASpJ,EAAItH,EAAG2H,EAAM1D,KAEvB4D,EAAOtE,EAAMW,IAAIyM,EAAKzQ,GACtBgE,EAAMX,EAAMW,IAAI/E,EAAIe,GAEpB9B,KAASgL,IAAInF,EAAM0D,GAAQ,GAExBiJ,EAAOtJ,EAAIpH,EACXkQ,EAAOM,EAASpJ,EAAIpH,EAAG2H,EAAM3D,GAAO,EAAI9F,KAAKyC,IAAIzC,KAAKgL,IAAI9B,EAAIpH,EAAE2H,GAAOzJ,KAAKgL,IAAI9B,EAAIpH,EAAEgE,MAEtF0M,EAAO/I,GAAQP,EAAItH,EAAI2H,IAAS1D,EAAM0D,IAASzD,EAAM2D,GACrDuI,EAAOhS,KAAKgL,IAAIwH,EAAOtJ,EAAIpH,IAG1BkQ,EAAOI,IACRA,EAAWJ,EACXhV,EAAIyV,MAAQvJ,EAAItH,EAChB5E,EAAI0V,MAAQF,IAIlBD,EAAOxR,EACPwI,EAAO1D,EAGNuM,EAAkB,GAAPC,IACZrV,EAAI2V,SAAWP,EACfpV,EAAI4V,WAAY,GAItB,OAAO5V,EAKVyS,aAAaoD,GACV,IAAI/B,EAAMnW,KAAKyB,YACf,QAAK0U,KACO,UAAP+B,QAA8BpT,IAARoT,IAAwBA,GAAO/B,EAAIgC,QAAQ1Y,KACnE0W,EAAIiC,UAAU3Y,IACT0W,EAAIgC,QAAQ1Y,IAIvBuV,sBAAsBzG,GAEnB,GAAkB,OAAdvO,KAAKE,KAAe,OAAO,KAE/B,IAAImV,EAAOrV,KAAKoX,YAAY7I,GAE5B,IAAK8G,IAAUA,EAAKjP,MAAQiP,EAAK4C,UAAY,OAAO,KAEpD,IAAIX,EAA2B,SAAhBtX,KAAKkO,UAChBmK,EAA0B,QAAhBrY,KAAKkO,UAEf1D,EADQxK,KAAKsK,kBACCG,WAAWzK,KAAKkC,QAAQwB,SAAU1D,KAAKkC,QAAQyB,UAC7DwC,EAAKnG,KAAKyB,YACVY,EAAM,CAAE8B,KAAMgC,EAAGyC,MAAOmN,MAAO5P,EAAG6C,OAC1B/B,EAAGoO,EAAKjP,IAAMoE,EAAMU,IAAImK,EAAKjP,IAAIa,GAAKoO,EAAKyC,MAC3C3Q,EAAGkO,EAAKjP,IAAMoE,EAAMW,IAAIkK,EAAKjP,IAAIe,GAAKkO,EAAK0C,MAC3C/B,OAAQhW,KAAK6N,QAAQoC,MACrB1F,MAAOvK,KAAKoK,YAAYiL,EAAKjP,KAC7ByQ,SAAS,GAErBxU,SAAI6T,UAAY,CAAEC,IAAKhQ,EAAKhC,KAAMgC,EAAGyC,MAAOxC,IAAK,EAAGgQ,KAAM,EAAGlL,IAAK7I,EAAI4E,EAAGkE,IAAK9I,EAAI8E,GAElF9E,EAAIgW,OAASA,EACbhW,EAAIiV,QAAUA,EAEdzP,EAASoQ,WACN5V,EAAIiU,KAAOjU,EAAIyT,OAAQ,EACvBzT,EAAIkU,UAAYlB,EAAK2C,UACb3C,EAAKjP,MACTpG,KAAKkC,QAAQY,IAAMwU,GACpBjV,EAAIsM,KAAOnE,EAAMW,IAAIkK,EAAKjP,IAAIe,EAAIkO,EAAKjP,IAAIC,OAC3ChE,EAAI0M,KAAOvE,EAAMW,IAAIkK,EAAKjP,IAAIe,EAAIkO,EAAKjP,IAAII,SAE3CnE,EAAIsM,KAAOtM,EAAI0M,KAAOvE,EAAMW,IAAIkK,EAAKjP,IAAIe,GAG5C9E,EAAImU,QAAUnB,EAAK9O,KACnBlE,EAAI+D,IAAMiP,EAAKjP,IACf/D,EAAIqV,OAASrC,EAAKqC,OAClBrV,EAAI6T,UAAU9P,IAAMiP,EAAK9O,KACzBlE,EAAI6T,UAAUE,KAAOf,EAAKjP,IAAIe,EAE9B9E,EAAIyT,MAASzQ,KAAKgL,IAAI9B,EAAItH,EAAI5E,EAAI4E,IAAMoO,EAAKqC,SACxCrS,KAAKgL,IAAI9B,EAAIpH,EAAI9E,EAAIsM,OAAS0G,EAAKqC,QAAYrS,KAAKgL,IAAI9B,EAAIpH,EAAI9E,EAAI0M,OAASsG,EAAKqC,QAEvFrV,EAAIiU,KAAOjU,EAAIyT,MACfzT,EAAIkU,UAAYlR,KAAKyH,KAAMyB,IAAItH,EAAE5E,EAAI4E,EAAI,GAAI5B,OAAKyC,IAAIzC,KAAKgL,IAAI9B,EAAIpH,EAAE9E,EAAIsM,MAAOtJ,KAAKgL,IAAI9B,EAAIpH,EAAE9E,EAAI0M,OAAQ,KAG1G/O,KAAKuN,SAAWvN,KAAKuN,QAAQ+G,OAAStU,KAAKuN,QAAQlJ,UACpDhC,EAAIgU,OAASrW,KAAKuN,QAAQwC,gBAExBuH,IACFjV,EAAI2T,OAAShW,KAAKsY,SAASnS,EAAG+N,cACzB7R,EAAIgU,SAAQhU,EAAIgU,OAAShU,EAAI2T,SAG9B3T,EAIVyU,mBAAmBJ,GAEhB,IAAI6B,EAAQvY,KAAKmN,OAAOwJ,OAAO,gBAE/B,GAAKD,GAASA,EAAKtQ,KAUnB,GALImS,EAAMlU,UACPkU,EAAQvY,KAAKmN,OAAOC,OAAO,SAASC,KAAK,QAAQ,gBAEpDqJ,EAAKM,QAAUuB,EAAMtB,SAAS,iBAAmBP,EAAKtQ,IAElDsQ,EAAKM,QAIN,GAHAuB,EAAM/I,UAAU,KAAKoH,SACrB2B,EAAMtB,SAAS,cAAeP,EAAKtQ,KAE/BsQ,EAAK2B,OACNE,EAAMnL,OAAO,YACPC,KAAK,QAAQ,SACbI,MAAM,iBAAiB,QACvBA,MAAM,UAAW,OACjBJ,KAAK,IAAKhI,KAAKqJ,MAAMgI,EAAKzP,EAAIyP,EAAKgB,SACnCrK,KAAK,IAAKhI,KAAKqJ,MAAMgI,EAAKvP,EAAIuP,EAAKgB,SACnCrK,KAAK,QAAS,EAAEqJ,EAAKgB,QACrBrK,KAAK,SAAU,EAAEqJ,EAAKgB,YACxB,CACJa,EAAMnL,OAAO,cAAcC,KAAK,KAAMhI,KAAKqJ,MAAMgI,EAAK/H,OAClDtJ,KAAKgL,IAAIqG,EAAK/H,KAAK+H,EAAK3H,MAAQ,GACjCwJ,EAAMnL,OAAO,cAAcC,KAAK,KAAMhI,KAAKqJ,MAAMgI,EAAK3H,OAEzD,IAAIX,EAAOmK,EAAM/I,UAAU,UACVnC,KAAK,IAAKqJ,EAAKgB,QACfrK,KAAK,KAAMhI,KAAKqJ,MAAMgI,EAAKzP,IAEvCyP,EAAKY,SAGHtX,KAAKkC,QAAQM,MAAQxC,KAAKkC,QAAQO,MACnC2L,EAAKd,KAAKtN,KAAK6N,QAAQL,MAEvBY,EAAKX,MAAM,SAAS,SACvBzN,KAASkC,QAAQa,KACdqL,EAAKd,KAAKtN,KAAKuN,QAAQC,MAEvBY,EAAKX,MAAM,OAAO,SATrBW,EAAKX,MAAM,SAAyB,SAAfiJ,EAAKV,OAAoB,QAAU,SAASvI,MAAM,OAAO,cAhCpF8K,EAAM3B,SAgDZ4B,cACG,OAAOxY,KAAK8U,eAIf2D,UAAUxR,EAAEE,GACTnH,KAAK0Y,OAAS1Y,KAAK2Y,OAAS,EAC5B,IAAIjC,EAAO1W,KAAK+U,eAAe,CAAC9N,IAAGE,MACnC,GAAIuP,GAAQA,EAAKZ,YAA2BhR,IAAjB4R,EAAKF,QAAwB,CACrDxW,KAAK4Y,aAAelC,EAAKF,QACzBxW,KAAK6Y,SAAWnC,EAAKtQ,IACrB,IAAIiE,EAAQrK,KAAKsK,kBACbE,EAAQH,iBAAOI,WAAWzK,KAAKkC,QAAQwB,SAAU1D,KAAKkC,QAAQyB,UAClE3D,KAAK8Y,QAAUtO,EAAQA,EAAMU,IAAIlL,KAAK6Y,SAAS5R,GAAKA,EACpDjH,KAAK+Y,QAAUvO,EAAQA,EAAMW,IAAInL,KAAK6Y,SAAS1R,GAAKA,cAE7CnH,KAAK4Y,aAKlBI,SAAS7Q,EAAGC,GAIT,GAHApI,KAAK0Y,QAAUvQ,EACfnI,KAAK2Y,QAAUvQ,OAEWtD,IAAtB9E,KAAK4Y,aACN5Y,KAAKmN,OAAOE,KAAK,YAAc,aAAYrN,KAAK0Y,UAAU1Y,KAAK2Y,eAC3D,CACJ,IAAItO,EAAQrK,KAAKsK,kBACbE,EAAQH,iBAAOI,WAAWzK,KAAKkC,QAAQwB,SAAU1D,KAAKkC,QAAQyB,UAC9D6G,GAASxK,KAAK6Y,WACf7Y,KAAK6Y,SAAS5R,EAAIuD,EAAMyO,WAAW,IAAKjZ,KAAK8Y,QAAU9Y,KAAK0Y,QAC5D1Y,KAAK6Y,SAAS1R,EAAIqD,EAAMyO,WAAW,IAAKjZ,KAAK+Y,QAAU/Y,KAAK2Y,QAC5D3Y,KAAKqB,cAMd6X,QAAQC,GACL,IAAIC,EAAO,GAEX,QAA0BtU,IAAtB9E,KAAK4Y,aAA4B,CAClC5Y,KAAKmN,OAAOE,KAAK,YAAa,MAE9B,IAAIhD,EAAQrK,KAAKsK,kBACbE,EAAQH,iBAAOI,WAAWzK,KAAKkC,QAAQwB,SAAU1D,KAAKkC,QAAQyB,UAClE,GAAI6G,GAASxK,KAAKE,OAASiZ,EAAa,CACrC,QAAS/T,EAAI,EAAGA,EAAIpF,KAAKE,KAAK6E,SAAUK,EAAG,CACxC,IAAIgB,EAAMpG,KAAKE,KAAKkF,GACpBgB,EAAIa,EAAIuD,EAAMyO,WAAW,IAAKzO,EAAMU,IAAI9E,EAAIa,GAAKjH,KAAK0Y,QACtDtS,EAAIe,EAAIqD,EAAMyO,WAAW,IAAKzO,EAAMW,IAAI/E,EAAIe,GAAKnH,KAAK2Y,QACtDS,GAAS,YAAWhT,EAAIG,QAAQH,EAAIa,KAAKb,EAAIe,OAC5B,GAAZf,EAAIG,MAAcvG,KAAKqZ,gBAAgB,WACzCD,GAAS,YAAWpZ,KAAKyB,YAAYoF,SAAS,KAAKT,EAAIa,KAAKb,EAAIe,QAEtEnH,KAAKqB,kBAGR+X,EAAQ,YAAWpZ,KAAK6Y,SAAStS,QAAQvG,KAAK6Y,SAAS5R,KAAKjH,KAAK6Y,SAAS1R,OAC/C,GAAtBnH,KAAK6Y,SAAStS,MAAcvG,KAAKqZ,gBAAgB,WACnDD,GAAS,YAAWpZ,KAAKyB,YAAYoF,SAAS,KAAK7G,KAAK6Y,SAAS5R,KAAKjH,KAAK6Y,SAAS1R,eAChFnH,KAAK4Y,aAGXQ,IAASD,GACVnZ,KAAKsZ,eAAeF,GAI1BG,gBAAgBjD,GACb,aAAMiD,gBAAgBjD,GAEjBtW,KAAKwZ,QACPlD,EAAKmD,OAAOzZ,KAAK8U,eAAgB,WAAY,KAAQ9U,KAAK8U,aAAa,UAAW9U,KAAKqB,cAEnFiV,EAAKoD,OAAS,EAKxBC,mBAAmBC,EAAQC,WACxB,GAAI9Z,MAAM4Z,mBAAmBC,EAAOC,GAAO,OAAO,EAElD,IAAIC,EAAO9Z,KAAK+Z,iBAAkB1P,EAAQrK,KAAKsK,kBAE/C,GAAqB,eAAhBsP,EAAOhR,OAA4C,eAAhBgR,EAAOhR,MAAyB,CACrE,IAAI2F,EAAMlE,iBAAO2P,kBAEjB,IAAKF,GAAQA,EAAKG,YAAc1L,EAAK,OAAO,EAE5C,IAAImI,EAAO1W,KAAK+U,eAAexG,GAE/B,GAAoB,eAAhBqL,EAAOhR,MAAwB,CAChC,IAAI4B,EAAQH,iBAAOI,WAAWzK,KAAKkC,QAAQwB,SAAU1D,KAAKkC,QAAQyB,UAC9DuW,EAAQ1P,0BAAOyO,WAAW,IAAK1K,EAAItH,IAA3BuD,EAAiC,EACzC2P,EAAQ3P,0BAAOyO,WAAW,IAAK1K,EAAIpH,IAA3BqD,EAAiC,EAC7CxK,KAAKsZ,eAAgB,YAAWY,EAAME,QAAQ,OAAOD,EAAMC,QAAQ,MAAOpa,KAAKqa,mBACvEra,KAAKqa,mBAAmCvV,KAAlB4R,iBAAMF,UACpCxW,KAAKsZ,eAAgB,eAAc5C,EAAKF,WAAYxW,KAAKqa,cAG5D,OAAO,EAGV,OAAO,EAIVC,aAAanE,EAAKxU,GACf,IAAK3B,KAAKqZ,gBAAgBlD,GAAM,OAAO,EAEnCxU,GAAQA,GAAO3B,KAAKkC,QAAQuB,UAC7BzD,KAAK0B,cAAcC,GAEtB,IAAI7B,EAAQE,KAAKyB,YAcjB,GAZA3B,EAAMgJ,MAAQqN,EAAIrN,MAClBhJ,EAAMkJ,OAASmN,EAAInN,OACnBlJ,EAAMoH,GAAKiP,EAAIjP,GACfpH,EAAMsH,GAAK+O,EAAI/O,GACftH,EAAM+G,SAAWsP,EAAItP,SACrB/G,EAAM2I,SAAW0N,EAAI1N,SACrB3I,EAAM4I,SAAWyN,EAAIzN,SACrB1I,KAAK0G,oBAEE1G,KAAKgB,aAGRhB,KAAKC,UAAW,CACjB,IAAI+H,EAAQhI,KAAK+H,gBAAgBoO,EAAIxN,YACrCX,EAAMgB,OAASlJ,EAAMkJ,OAErB,IAAI/H,EAAejB,KAAKkB,kBACpBD,iBAAcE,cACfF,EAAaqZ,aAAatS,EAAOhI,KAAKkC,QAAQoB,MAC9CtD,KAAKgB,cAAe,GAI1B,OAAO,EAKVuZ,cAAcC,EAAK1S,EAAIxC,GACpB,IAAIa,EAAKnG,KAAKyB,YACd,IAAK0E,GAAOqU,KAAUxa,KAAKkC,QAAQoC,MAAQ,IAAM,KAAO,OAAO,EAE/D,QAAS0F,EAAI,EAAGA,EAAI7D,EAAGU,WAAYmD,EAChC,GAAKlC,EAAM3B,EAAGe,GAAG8C,IAAQ7D,EAAGe,GAAG8C,GAAK1E,EAAM,OAAO,EAEpD,OAAO,EAIVmV,YAAYC,GACT,GAAiB,eAAbA,EAA2B,OAAO,EAEtC,IAAIC,EAAO3a,KAAKsK,kBAGhB,SAFKqQ,GAEA3a,KAAKG,OAASH,KAAKK,MAAUL,KAAKI,OAASJ,KAAKM,OAErDqa,EAAKC,KAAK5a,KAAKG,KAAMH,KAAKK,KAAML,KAAKI,KAAMJ,KAAKM,MAEzC,IAIVua,iBACG,IAAI1U,EAAKnG,KAAKyB,YACd,GAAI0E,0BAAI2U,iBAAJ3U,IAAgBN,IACjB,QAAS2I,EAAI,EAAGA,EAAIrI,EAAG2U,WAAWjV,IAAId,SAAUyJ,EAAG,CAChD,IAAIhB,EAAOrH,EAAG2U,WAAWjV,IAAI2I,GAC7B,GAAuB,OAAlBhB,EAAK/M,WAA0C,OAAlB+M,EAAK/M,UAAqB,OAAO+M,EAEzE,OAAO,KAIVuN,iBACG,IAAI5U,EAAKnG,KAAKyB,YACd,GAAI0E,0BAAI2U,iBAAJ3U,IAAgBN,IACjB,QAAS2I,EAAI,EAAGA,EAAIrI,EAAG2U,WAAWjV,IAAId,SAAUyJ,EAAG,CAChD,IAAIhB,EAAOrH,EAAG2U,WAAWjV,IAAI2I,GAC7B,GAAuB,cAAlBhB,EAAK/M,WAA6C,SAAd+M,EAAK5E,MAAmB,OAAO4E,EAE9E,OAAO,KAIVwN,mBACG,IAAIxN,EAAOxN,KAAK6a,WAChB,IAAKrN,EAAM,OAAO,KAElB,IAAIyN,EAAQjb,KAAK+a,WACjB,GAAIE,EAAO,OAAOA,EAGlB,IAAI,cAAKlB,uBAAL,IAAuBmB,gBAAiBlb,KAAKkC,QAAQsB,SAAU,OAAO,KAE1ExD,KAAKmb,cAAe,EAEpB,MAAMC,EAAK3K,SAEXwK,UAAQhJ,YAAO,cACf3P,OAAOC,OAAO0Y,EAAO,CAAErS,MAAQ,QAASyS,SAAU,EAAGC,QAASF,EAAGE,SAAW,IAAKC,YAAa,IAE9FN,EAAMO,OAASJ,EAAGK,OAASL,EAAGM,OAC9BT,EAAMU,OAASP,EAAGQ,OAASR,EAAGS,OAC9BZ,EAAMa,OAASV,EAAGK,OAClBR,EAAMc,OAASX,EAAGQ,OAElBX,EAAMjH,WAAaoH,EAAGY,WACtBf,EAAMgB,WAAab,EAAGc,WAEtBjB,EAAMkB,WAAa,EACnBlB,EAAMmB,UAAYhB,EAAGiB,cACrBpB,EAAMqB,WAAa,GACnBrB,EAAMsB,WAAanB,EAAGoB,eACtBvB,EAAMwB,UAAYrB,EAAGsB,UAErBzB,EAAM0B,QAAQnP,EAAK5E,OAGnB5I,KAAKyB,YAAYqZ,WAAW8B,IAAI3B,GAEzBA,EAIV4B,cAAcC,EAAMC,EAAQC,GAGzB,IAAIxP,EAAOxN,KAAK6a,WAEhB,SAAKrN,GAASwP,GAAUhd,KAAKmb,gBAE7B2B,EAAKG,YAELH,EAAKI,iBAAiB1P,EAAMwP,IAErB,GAKVG,iBAAiB5W,WAEd,IAAIzG,EAAQE,KAAKyB,YAEjB,GAAI8E,KAASzG,mCAAOgb,iBAAPhb,IAAmB+F,UAAnB/F,IAAwBiF,SAAU,GAC5C,OAAOjE,QAAQC,QAAQf,MAE1B,IAAIwF,EAAKxF,KAAKyF,gBACV+H,EAAO1N,EAAMgb,WAAWjV,IAAIU,GAC5B5E,EAAM7B,EAAMgb,WAAWnZ,IAAI4E,GAI/BiH,SAAK4P,cAAgBpd,KAEdwF,EAAG6X,WAAWrd,KAAKsd,SAAU9P,EAAM7L,GAAKP,KAAK,IAAMpB,KAAKmd,iBAAiB5W,EAAK,IAKxFgX,gBACG,IAAIvV,EAAQhI,KAAK+H,kBACjB,OAAOyV,SAAgBxd,KAAKsd,SAAUtV,EAAOhI,KAAKkC,QAAQoB,wBAK3Cma,EAAS9b,GACxB8b,EAAQ/b,cAAcC,GAAK,GAC3B8b,EAAQ/W,aACR+W,EAAQzC,cACHrR,wBAAwB7J,MAAMqY,QAAQ1Y,IACxCK,MAAMsY,UAAU3Y,GAEnB,IAAIoB,EAAUC,QAAQC,UAEtB,QAAM0c,EAAQvc,kBAAoBuc,EAAQvb,QAAQwB,UAAY+Z,EAAQvb,QAAQyB,WAAa8Z,EAAQvb,QAAQoB,OACxGzC,EAAU4c,EAAQF,gBAAgBnc,KAAKH,IAChCA,IACDwc,EAAQxd,WAAY,EACfwd,EAAQ1U,iBAAgB0U,EAAQC,UAAW,GAChDzc,EAAaE,YAAa,MAI5BN,EAAQO,KAAK,KACjBqc,EAAQE,qBACDF,EAAQpc,cACfD,KAAK,IAAMqc,EAAQN,iBAAiB,gBAG9Btd,EAAKC,EAAO6B,GACrB,OAAOic,EAAcC,WAAW,IAAID,EAAc/d,EAAKC,GAAQ6B","names":["kNotEditable","BIT","ObjectPainter","constructor","dom","graph","super","this","axes_draw","bins","xmin","ymin","xmax","ymax","wheel_zoomy","is_bent","_typename","has_errors","match","redraw","promise","Promise","resolve","$redraw_hist","hist_painter","getMainPainter","$secondary","then","drawGraph","cleanup","interactive_bin","get_gme","getObject","decodeOptions","opt","first_time","indexOf","slice","is_gme","blocks_gme","has_main","options","decodeBlock","d","res","Object","assign","Line","Curve","Rect","Mark","Bar","OutRange","EF","Fill","MainError","Ends","ScaleErrX","check","partAsFloat","Errors","Axis","NoOpt","PadStats","original","second_x","second_y","individual_styles","split","shift","DrawOptions","hopt","checkhopt","forEach","name","part","empty","pos3d","partAsInt","_pfc","_plc","_pmc","blocks","skip_errors_x0","skip_errors_y0","undefined","length","fMarkerStyle","len","fEX","m","k","Math","max","fEY","pp","getPadPainter","pad","getRootPad","fPrimitives","arr","bl","subres","push","extractGmeErrors","nblock","gr","bin","eylow","fEyL","indx","eyhigh","fEyH","createBins","kind","npoints","fNpoints","t","Array","p","x","fX","y","fY","exlow","exhigh","fExL","fExH","fEXlow","fEXhigh","fEYlow","fEYhigh","e","min","createHistogram","histo","set_x","set_y","dx","dy","uxmin","uxmax","minimum","maximum","fMinimum","fMaximum","fHistogram","fName","kNoStats","fBits","_own_histogram","fTitle","fXaxis","fXmin","fXmax","fYaxis","unzoomUserRange","dox","doy","l","extractAxesProperties","canOptimize","settings","optimizeBins","maxpnt","filter_func","selbins","n","step","floor","optbins","getTooltips","pmain","getFramePainter","lines","funcs","getGrFuncs","gme","getObjectHint","axisAsText","x_handle","ny","fNYErrors","y_handle","get_main","grx","gry","rect","getPadRect","width","height","pad_layer","pw","ph","getFrameWidth","getFrameHeight","value","fLogx","log10","fUxmin","fX1","fX2","fLogy","fUymin","fY1","fY2","appendExclusion","is_curve","path","drawbins","excl_width","extrabins","dlen","sqrt","dgrx","dgry","path2","buildSvgPath","draw_g","append","attr","call","fillatt","func","style","drawBins","w","h","lineatt","main_block","excl_side","path1","bins2","draw_kind","close_symbol","elem","curvebins","nodes","pnt","i","grx1","round","gry1","grx0","grx2","gry0","gry2","grdx0","fEXlowd","grdx2","fEXhighd","grdy0","fEYlowd","grdy2","fEYhighd","selectAll","data","enter","yy0","usefill","fp","fpcol","getFillColor","TAttFillHandler","color","pattern","bar","dw","abs","filter","error_size","lw","gStyle","bb","vv","hh","vleft","vright","htop","hbottom","mainLine","fMarkerSize","visible","isBatchMode","error","createAttMarker","marker_size","markeratt","getFullSize","resetPos","want_tooltip","fill","hints_marker","hsz","maxnummarker","getMarkerLength","create","appendQQ","xqmin","scale_xmin","fXq1","xqmax","scale_xmax","fXq2","yqmin","scale_ymin","fYq1","yqmax","scale_ymax","fYq2","makeLine","x1","y1","x2","y2","yxmin","yxmax","latt1","TAttLineHandler","latt2","drawBins3D","console","log","createG","mp","createAutoColor","icolor","fFillColor","fLineColor","fMarkerColor","createAttLine","can_excl","createAttFill","used","fAttLine","std","fAttFill","svg","getCanvSvg","sub_g","addMoveHandler","testEditable","extractTooltip","extractTooltipForPath","esz","isbar1","findbin","best_dist2","best","msize","each","d3_select","datum","dist2","nproc","marker","matchy","exact","title","color1","d3bin","user_info","obj","cont","color2","menu","menu_dist","binindx","showTooltip","hint","select","remove","usepath","showTooltipForPath","ttrect","changed","property","processTooltipEvent","disabled","findBestBin","dist","islines","bestindx","bestbin","bestdist","radius","IsInside","bin0","posy","linex","liney","linedist","closeline","arg","TestBit","InvertBit","ismark","getColor","ttbin","moveEnabled","moveStart","pos_dx","pos_dy","move_binindx","move_bin","move_x0","move_y0","moveDrag","revertAxis","moveEnd","not_changed","exec","matchObjectType","submitCanvExec","fillContextMenu","snapid","addchk","size","executeMenuCommand","method","args","canp","getCanvPainter","getLastEventPos","_readonly","userx","usery","toFixed","args_menu_id","updateObject","canZoomInside","axis","clickButton","funcname","main","zoom","findFunc","fFunctions","findStat","createStat","stats","normal_canvas","create_stats","st","fOptStat","fOptFit","fBorderSize","fX1NDC","fStatX","fStatW","fY1NDC","fStatY","fStatH","fX2NDC","fY2NDC","fStatColor","fFillStyle","fStatStyle","fTextAngle","fTextSize","fStatFontSize","fTextAlign","fTextColor","fStatTextColor","fTextFont","fStatFont","AddText","Add","fillStatistic","stat","dostat","dofit","clearPave","fillFunctionStat","drawNextFunction","$main_painter","drawObject","getDom","drawAxisHisto","TH1Painter","painter","$primary","addToPadPrimitives","TGraphPainter","_drawGraph"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/TGraphPainter.mjs"],"sourcesContent":["import { gStyle, BIT, settings, create, createHistogram, isBatchMode } from '../core.mjs';\nimport { select as d3_select } from '../d3.mjs';\nimport { DrawOptions, buildSvgPath } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { TAttLineHandler } from '../base/TAttLineHandler.mjs';\nimport { TAttFillHandler } from '../base/TAttFillHandler.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\n\n\nconst kNotEditable = BIT(18);   // bit set if graph is non editable\n\n/**\n * @summary Painter for TGraph object.\n *\n * @private\n */\n\nclass TGraphPainter extends ObjectPainter {\n\n   constructor(dom, graph) {\n      super(dom, graph);\n      this.axes_draw = false; // indicate if graph histogram was drawn for axes\n      this.bins = null;\n      this.xmin = this.ymin = this.xmax = this.ymax = 0;\n      this.wheel_zoomy = true;\n      this.is_bent = (graph._typename == 'TGraphBentErrors');\n      this.has_errors = (graph._typename == 'TGraphErrors') ||\n                        (graph._typename == 'TGraphMultiErrors') ||\n                        (graph._typename == 'TGraphAsymmErrors') ||\n                         this.is_bent || graph._typename.match(/^RooHist/);\n   }\n\n   /** @summary Redraw graph\n     * @desc may redraw histogram which was used to draw axes\n     * @returns {Promise} for ready */\n   redraw() {\n      let promise = Promise.resolve(true);\n\n      if (this.$redraw_hist) {\n         delete this.$redraw_hist;\n         let hist_painter = this.getMainPainter();\n         if (hist_painter?.$secondary && this.axes_draw)\n            promise = hist_painter.redraw();\n      }\n\n      return promise.then(() => this.drawGraph());\n   }\n\n   /** @summary Cleanup graph painter */\n   cleanup() {\n      delete this.interactive_bin; // break mouse handling\n      delete this.bins;\n      super.cleanup();\n   }\n\n   /** @summary Returns object if this drawing TGraphMultiErrors object */\n   get_gme() {\n      let graph = this.getObject();\n      return graph?._typename == \"TGraphMultiErrors\" ? graph : null;\n   }\n\n   /** @summary Decode options */\n   decodeOptions(opt, first_time) {\n\n      if ((typeof opt == \"string\") && (opt.indexOf(\"same \") == 0))\n         opt = opt.slice(5);\n\n      let graph = this.getObject(),\n          is_gme = !!this.get_gme(),\n          blocks_gme = [],\n          has_main = first_time ? !!this.getMainPainter() : !this.axes_draw;\n\n      if (!this.options) this.options = {};\n\n      // decode main draw options for the graph\n      const decodeBlock = (d, res) => {\n         Object.assign(res, { Line: 0, Curve: 0, Rect: 0, Mark: 0, Bar: 0, OutRange: 0, EF:0, Fill: 0, MainError: 1, Ends: 1, ScaleErrX: 1 });\n\n         if (is_gme && d.check(\"S=\", true)) res.ScaleErrX = d.partAsFloat();\n\n         if (d.check('L')) res.Line = 1;\n         if (d.check('F')) res.Fill = 1;\n         if (d.check('CC')) res.Curve = 2; // draw all points without reduction\n         if (d.check('C')) res.Curve = 1;\n         if (d.check('*')) res.Mark = 103;\n         if (d.check('P0')) res.Mark = 104;\n         if (d.check('P')) res.Mark = 1;\n         if (d.check('B')) { res.Bar = 1; res.Errors = 0; }\n         if (d.check('Z')) { res.Errors = 1; res.Ends = 0; }\n         if (d.check('||')) { res.Errors = 1; res.MainError = 0; res.Ends = 1; }\n         if (d.check('[]')) { res.Errors = 1; res.MainError = 0; res.Ends = 2; }\n         if (d.check('|>')) { res.Errors = 1; res.Ends = 3; }\n         if (d.check('>')) { res.Errors = 1; res.Ends = 4; }\n         if (d.check('0')) { res.Mark = 1; res.Errors = 1; res.OutRange = 1; }\n         if (d.check('1')) { if (res.Bar == 1) res.Bar = 2; }\n         if (d.check('2')) { res.Rect = 1; res.Errors = 0; }\n         if (d.check('3')) { res.EF = 1; res.Errors = 0;  }\n         if (d.check('4')) { res.EF = 2; res.Errors = 0; }\n         if (d.check('5')) { res.Rect = 2; res.Errors = 0; }\n         if (d.check('X')) res.Errors = 0;\n      };\n\n      Object.assign(this.options, { Axis: \"\", NoOpt: 0, PadStats: false, original: opt, second_x: false, second_y: false, individual_styles: false });\n\n      if (is_gme && opt) {\n         if (opt.indexOf(\";\") > 0) {\n            blocks_gme = opt.split(\";\");\n            opt = blocks_gme.shift();\n         } else if (opt.indexOf(\"_\") > 0) {\n            blocks_gme = opt.split(\"_\");\n            opt = blocks_gme.shift();\n         }\n      }\n\n      let res = this.options,\n          d = new DrawOptions(opt);\n\n      // check pad options first\n      res.PadStats = d.check(\"USE_PAD_STATS\");\n      let hopt = \"\", checkhopt = [\"USE_PAD_TITLE\", \"LOGXY\", \"LOGX\", \"LOGY\", \"LOGZ\", \"GRIDXY\", \"GRIDX\", \"GRIDY\", \"TICKXY\", \"TICKX\", \"TICKY\"];\n      checkhopt.forEach(name => { if (d.check(name)) hopt += \";\" + name; });\n      if (d.check('XAXIS_', true)) hopt += \";XAXIS_\" + d.part;\n      if (d.check('YAXIS_', true)) hopt += \";YAXIS_\" + d.part;\n\n      if (d.empty()) {\n         res.original = has_main ? \"lp\" : \"alp\";\n         d = new DrawOptions(res.original);\n      }\n\n      if (d.check('NOOPT')) res.NoOpt = 1;\n\n      if (d.check(\"POS3D_\", true)) res.pos3d = d.partAsInt() - 0.5;\n\n      res._pfc = d.check(\"PFC\");\n      res._plc = d.check(\"PLC\");\n      res._pmc = d.check(\"PMC\");\n\n      if (d.check('A')) res.Axis = d.check(\"I\") ? \"A\" : \"AXIS\"; // I means invisible axis\n      if (d.check('X+')) { res.Axis += \"X+\"; res.second_x = has_main; }\n      if (d.check('Y+')) { res.Axis += \"Y+\"; res.second_y = has_main; }\n      if (d.check('RX')) res.Axis += \"RX\";\n      if (d.check('RY')) res.Axis += \"RY\";\n\n      if (is_gme) {\n         res.blocks = [];\n         res.skip_errors_x0 = res.skip_errors_y0 = false;\n         if (d.check('X0')) res.skip_errors_x0 = true;\n         if (d.check('Y0')) res.skip_errors_y0 = true;\n      }\n\n      decodeBlock(d, res);\n\n      if (is_gme) {\n         if (d.check('S')) res.individual_styles = true;\n      }\n\n      // if (d.check('E')) res.Errors = 1; // E option only defined for TGraphPolar\n\n      if (res.Errors === undefined)\n         res.Errors = this.has_errors && (!is_gme || !blocks_gme.length) ? 1 : 0;\n\n      // special case - one could use svg:path to draw many pixels (\n      if ((res.Mark == 1) && (graph.fMarkerStyle == 1)) res.Mark = 101;\n\n      // if no drawing option is selected and if opt=='' nothing is done.\n      if (res.Line + res.Fill + res.Curve + res.Mark + res.Bar + res.EF + res.Rect + res.Errors == 0) {\n         if (d.empty()) res.Line = 1;\n      }\n\n      if (graph._typename == 'TGraphErrors') {\n         let len = graph.fEX.length, m = 0;\n         for (let k = 0; k < len; ++k)\n            m = Math.max(m, graph.fEX[k], graph.fEY[k]);\n         if (m < 1e-100)\n            res.Errors = 0;\n      }\n\n      if (!res.Axis) {\n         // check if axis should be drawn\n         // either graph drawn directly or\n         // graph is first object in list of primitives\n         let pp = this.getPadPainter(),\n             pad = pp?.getRootPad(true);\n         if (!pad || (pad?.fPrimitives?.arr[0] === graph)) res.Axis = \"AXIS\";\n      } else if (res.Axis.indexOf(\"A\") < 0) {\n         res.Axis = \"AXIS,\" + res.Axis;\n      }\n\n      res.Axis += hopt;\n\n      for (let bl = 0; bl < blocks_gme.length; ++bl) {\n         let subd = new DrawOptions(blocks_gme[bl]), subres = {};\n         decodeBlock(subd, subres);\n         subres.skip_errors_x0 = res.skip_errors_x0;\n         subres.skip_errors_y0 = res.skip_errors_y0;\n         res.blocks.push(subres);\n      }\n   }\n\n   /** @summary Extract errors for TGraphMultiErrors */\n   extractGmeErrors(nblock) {\n      if (!this.bins) return;\n      let gr = this.getObject();\n      this.bins.forEach(bin => {\n         bin.eylow  = gr.fEyL[nblock][bin.indx];\n         bin.eyhigh = gr.fEyH[nblock][bin.indx];\n      });\n   }\n\n   /** @summary Create bins for TF1 drawing */\n   createBins() {\n      let gr = this.getObject();\n      if (!gr) return;\n\n      let kind = 0, npoints = gr.fNpoints;\n      if ((gr._typename===\"TCutG\") && (npoints>3)) npoints--;\n\n      if (gr._typename == 'TGraphErrors') kind = 1; else\n      if (gr._typename == 'TGraphMultiErrors') kind = 2; else\n      if (gr._typename == 'TGraphAsymmErrors' || gr._typename == 'TGraphBentErrors'\n          || gr._typename.match(/^RooHist/)) kind = 3;\n\n      this.bins = new Array(npoints);\n\n      for (let p = 0; p < npoints; ++p) {\n         let bin = this.bins[p] = { x: gr.fX[p], y: gr.fY[p], indx: p };\n         switch(kind) {\n            case 1:\n               bin.exlow = bin.exhigh = gr.fEX[p];\n               bin.eylow = bin.eyhigh = gr.fEY[p];\n               break;\n            case 2:\n               bin.exlow  = gr.fExL[p];\n               bin.exhigh = gr.fExH[p];\n               bin.eylow  = gr.fEyL[0][p];\n               bin.eyhigh = gr.fEyH[0][p];\n               break;\n            case 3:\n               bin.exlow  = gr.fEXlow[p];\n               bin.exhigh = gr.fEXhigh[p];\n               bin.eylow  = gr.fEYlow[p];\n               bin.eyhigh = gr.fEYhigh[p];\n               break;\n         }\n\n         if (p === 0) {\n            this.xmin = this.xmax = bin.x;\n            this.ymin = this.ymax = bin.y;\n         }\n\n         if (kind > 0) {\n            this.xmin = Math.min(this.xmin, bin.x - bin.exlow, bin.x + bin.exhigh);\n            this.xmax = Math.max(this.xmax, bin.x - bin.exlow, bin.x + bin.exhigh);\n            this.ymin = Math.min(this.ymin, bin.y - bin.eylow, bin.y + bin.eyhigh);\n            this.ymax = Math.max(this.ymax, bin.y - bin.eylow, bin.y + bin.eyhigh);\n         } else {\n            this.xmin = Math.min(this.xmin, bin.x);\n            this.xmax = Math.max(this.xmax, bin.x);\n            this.ymin = Math.min(this.ymin, bin.y);\n            this.ymax = Math.max(this.ymax, bin.y);\n         }\n      }\n   }\n\n   /** @summary Create histogram for graph\n     * @desc graph bins should be created when calling this function\n     * @param {object} histo - existing histogram instance\n     * @param {boolean} [set_x] - set X axis range\n     * @param {boolean} [set_y] - set Y axis range */\n   createHistogram(histo, set_x, set_y) {\n      let xmin = this.xmin, xmax = this.xmax, ymin = this.ymin, ymax = this.ymax;\n\n      if (xmin >= xmax) xmax = xmin+1;\n      if (ymin >= ymax) ymax = ymin+1;\n      let dx = (xmax-xmin)*0.1, dy = (ymax-ymin)*0.1,\n          uxmin = xmin - dx, uxmax = xmax + dx,\n          minimum = ymin - dy, maximum = ymax + dy;\n\n      if ((uxmin < 0) && (xmin >= 0)) uxmin = xmin*0.9;\n      if ((uxmax > 0) && (xmax <= 0)) uxmax = 0;\n\n      let graph = this.getObject();\n\n      if (graph.fMinimum != -1111) minimum = ymin = graph.fMinimum;\n      if (graph.fMaximum != -1111) maximum = graph.fMaximum;\n      if ((minimum < 0) && (ymin >=0)) minimum = 0.9*ymin;\n\n      histo = graph.fHistogram;\n\n      if (!set_x && !set_y) set_x = set_y = true;\n\n      if (!histo) {\n         histo = graph.fHistogram = createHistogram(\"TH1F\", 100);\n         histo.fName = graph.fName + \"_h\";\n         let kNoStats = BIT(9);\n         histo.fBits = histo.fBits | kNoStats;\n         this._own_histogram = true;\n      }\n\n      histo.fTitle = graph.fTitle;\n\n      if (set_x) {\n         histo.fXaxis.fXmin = uxmin;\n         histo.fXaxis.fXmax = uxmax;\n      }\n\n      if (set_y) {\n         histo.fYaxis.fXmin = minimum;\n         histo.fYaxis.fXmax = maximum;\n         histo.fMinimum = minimum;\n         histo.fMaximum = maximum;\n      }\n\n      return histo;\n   }\n\n   /** @summary Check if user range can be unzommed\n     * @desc Used when graph points covers larger range than provided histogram */\n   unzoomUserRange(dox, doy /*, doz*/) {\n      let graph = this.getObject();\n      if (this._own_histogram || !graph) return false;\n\n      let histo = graph.fHistogram;\n\n      dox = dox && histo && ((histo.fXaxis.fXmin > this.xmin) || (histo.fXaxis.fXmax < this.xmax));\n      doy = doy && histo && ((histo.fYaxis.fXmin > this.ymin) || (histo.fYaxis.fXmax < this.ymax));\n      if (!dox && !doy) return false;\n\n      this.createHistogram(null, dox, doy);\n      this.getMainPainter()?.extractAxesProperties(1); // just to enforce ranges extraction\n\n      return true;\n   }\n\n   /** @summary Returns true if graph drawing can be optimize */\n   canOptimize() {\n      return (settings.OptimizeDraw > 0) && !this.options.NoOpt;\n   }\n\n   /** @summary Returns optimized bins - if optimization enabled */\n   optimizeBins(maxpnt, filter_func) {\n      if ((this.bins.length < 30) && !filter_func) return this.bins;\n\n      let selbins = null;\n      if (typeof filter_func == 'function') {\n         for (let n = 0; n < this.bins.length; ++n) {\n            if (filter_func(this.bins[n],n)) {\n               if (!selbins) selbins = (n==0) ? [] : this.bins.slice(0, n);\n            } else {\n               if (selbins) selbins.push(this.bins[n]);\n            }\n         }\n      }\n      if (!selbins) selbins = this.bins;\n\n      if (!maxpnt) maxpnt = 500000;\n\n      if ((selbins.length < maxpnt) || !this.canOptimize()) return selbins;\n      let step = Math.floor(selbins.length / maxpnt);\n      if (step < 2) step = 2;\n      let optbins = [];\n      for (let n = 0; n < selbins.length; n+=step)\n         optbins.push(selbins[n]);\n\n      return optbins;\n   }\n\n   /** @summary Returns tooltip for specified bin */\n   getTooltips(d) {\n      let pmain = this.getFramePainter(), lines = [],\n          funcs = pmain?.getGrFuncs(this.options.second_x, this.options.second_y),\n          gme = this.get_gme();\n\n      lines.push(this.getObjectHint());\n\n      if (d && funcs) {\n         if (d.indx !== undefined)\n            lines.push(\"p = \" + d.indx);\n         lines.push(\"x = \" + funcs.axisAsText(\"x\", d.x));\n         lines.push(\"y = \" + funcs.axisAsText(\"y\", d.y));\n\n         if (gme)\n            lines.push(\"error x = -\" + funcs.axisAsText(\"x\", gme.fExL[d.indx]) + \"/+\" + funcs.axisAsText(\"x\", gme.fExH[d.indx]));\n         else if (this.options.Errors && (funcs.x_handle.kind=='normal') && (d.exlow || d.exhigh))\n            lines.push(\"error x = -\" + funcs.axisAsText(\"x\", d.exlow) + \"/+\" + funcs.axisAsText(\"x\", d.exhigh));\n\n         if (gme) {\n            for (let ny = 0; ny < gme.fNYErrors; ++ny)\n               lines.push(`error y${ny} = -${funcs.axisAsText(\"y\", gme.fEyL[ny][d.indx])}/+${funcs.axisAsText(\"y\", gme.fEyH[ny][d.indx])}`);\n         } else if ((this.options.Errors || (this.options.EF > 0)) && (funcs.y_handle.kind=='normal') && (d.eylow || d.eyhigh))\n            lines.push(\"error y = -\" + funcs.axisAsText(\"y\", d.eylow) + \"/+\" + funcs.axisAsText(\"y\", d.eyhigh));\n\n      }\n      return lines;\n   }\n\n   /** @summary Provide frame painter for graph\n     * @desc If not exists, emulate its behaviour */\n   get_main() {\n      let pmain = this.getFramePainter();\n\n      if (pmain && pmain.grx && pmain.gry) return pmain;\n\n      // FIXME: check if needed, can be removed easily\n      let pp = this.getPadPainter(),\n          rect = pp?.getPadRect() || { width: 800, height: 600 };\n\n      pmain = {\n          pad_layer: true,\n          pad: pp?.getRootPad(true),\n          pw: rect.width,\n          ph: rect.height,\n          getFrameWidth() { return this.pw; },\n          getFrameHeight() { return this.ph; },\n          grx(value) {\n             if (this.pad.fLogx)\n                value = (value > 0) ? Math.log10(value) : this.pad.fUxmin;\n             else\n                value = (value - this.pad.fX1) / (this.pad.fX2 - this.pad.fX1);\n             return value*this.pw;\n          },\n          gry(value) {\n             if (this.pad.fLogy)\n                value = (value > 0) ? Math.log10(value) : this.pad.fUymin;\n             else\n                value = (value - this.pad.fY1) / (this.pad.fY2 - this.pad.fY1);\n             return (1-value)*this.ph;\n          },\n          getGrFuncs() { return this; }\n      }\n\n      return pmain.pad ? pmain : null;\n   }\n\n   /** @summary append exclusion area to created path */\n   appendExclusion(is_curve, path, drawbins, excl_width) {\n      let extrabins = [];\n      for (let n = drawbins.length-1; n >= 0; --n) {\n         let bin = drawbins[n],\n             dlen = Math.sqrt(bin.dgrx**2 + bin.dgry**2);\n         // shift point\n         bin.grx += excl_width*bin.dgry/dlen;\n         bin.gry -= excl_width*bin.dgrx/dlen;\n         extrabins.push(bin);\n      }\n\n      let path2 = buildSvgPath(is_curve ? \"Lbezier\" : \"Lline\", extrabins);\n\n      this.draw_g.append(\"svg:path\")\n                 .attr(\"d\", path.path + path2.path + \"Z\")\n                 .call(this.fillatt.func)\n                 .style('opacity', 0.75);\n   }\n\n   /** @summary draw TGraph bins with specified options\n     * @desc Can be called several times */\n   drawBins(funcs, options, draw_g, w, h, lineatt, fillatt, main_block) {\n      let graph = this.getObject(),\n          excl_width = 0, drawbins = null;\n\n      if (main_block && lineatt.excl_side) {\n         excl_width = lineatt.excl_width;\n         if ((lineatt.width > 0) && !options.Line && !options.Curve) options.Line = 1;\n      }\n\n      if (options.EF) {\n         drawbins = this.optimizeBins((options.EF > 1) ? 20000 : 0);\n\n         // build lower part\n         for (let n = 0; n < drawbins.length; ++n) {\n            let bin = drawbins[n];\n            bin.grx = funcs.grx(bin.x);\n            bin.gry = funcs.gry(bin.y - bin.eylow);\n         }\n\n         let path1 = buildSvgPath((options.EF > 1) ? \"bezier\" : \"line\", drawbins),\n             bins2 = [];\n\n         for (let n = drawbins.length-1; n >= 0; --n) {\n            let bin = drawbins[n];\n            bin.gry = funcs.gry(bin.y + bin.eyhigh);\n            bins2.push(bin);\n         }\n\n         // build upper part (in reverse direction)\n         let path2 = buildSvgPath((options.EF > 1) ? \"Lbezier\" : \"Lline\", bins2);\n\n         draw_g.append(\"svg:path\")\n               .attr(\"d\", path1.path + path2.path + \"Z\")\n               .call(fillatt.func);\n         if (main_block)\n            this.draw_kind = \"lines\";\n      }\n\n      if (options.Line || options.Fill) {\n\n         let close_symbol = \"\";\n         if (graph._typename == \"TCutG\") options.Fill = 1;\n\n         if (options.Fill) {\n            close_symbol = \"Z\"; // always close area if we want to fill it\n            excl_width = 0;\n         }\n\n         if (!drawbins) drawbins = this.optimizeBins(0);\n\n         for (let n = 0; n < drawbins.length; ++n) {\n            let bin = drawbins[n];\n            bin.grx = funcs.grx(bin.x);\n            bin.gry = funcs.gry(bin.y);\n         }\n\n         let kind = \"line\"; // simple line\n         if (excl_width) kind += \"calc\"; // we need to calculated deltas to build exclusion points\n\n         let path = buildSvgPath(kind, drawbins);\n\n         if (excl_width)\n             this.appendExclusion(false, path, drawbins, excl_width);\n\n         let elem = draw_g.append(\"svg:path\").attr(\"d\", path.path + close_symbol);\n         if (options.Line)\n            elem.call(lineatt.func);\n\n         if (options.Fill)\n            elem.call(fillatt.func);\n         else\n            elem.style('fill', 'none');\n\n         if (main_block)\n            this.draw_kind = \"lines\";\n      }\n\n      if (options.Curve) {\n         let curvebins = drawbins;\n         if ((this.draw_kind != \"lines\") || !curvebins || ((options.Curve == 1) && (curvebins.length > 20000))) {\n            curvebins = this.optimizeBins((options.Curve == 1) ? 20000 : 0);\n            for (let n = 0; n < curvebins.length; ++n) {\n               let bin = curvebins[n];\n               bin.grx = funcs.grx(bin.x);\n               bin.gry = funcs.gry(bin.y);\n            }\n         }\n\n         let kind = \"bezier\";\n         if (excl_width) kind += \"calc\"; // we need to calculated deltas to build exclusion points\n\n         let path = buildSvgPath(kind, curvebins);\n\n         if (excl_width)\n             this.appendExclusion(true, path, curvebins, excl_width);\n\n         draw_g.append(\"svg:path\")\n               .attr(\"d\", path.path)\n               .call(lineatt.func)\n               .style('fill', 'none');\n         if (main_block)\n            this.draw_kind = \"lines\"; // handled same way as lines\n      }\n\n      let nodes = null;\n\n      if (options.Errors || options.Rect || options.Bar) {\n\n         drawbins = this.optimizeBins(5000, (pnt,i) => {\n\n            let grx = funcs.grx(pnt.x);\n\n            // when drawing bars, take all points\n            if (!options.Bar && ((grx < 0) || (grx > w))) return true;\n\n            let gry = funcs.gry(pnt.y);\n\n            if (!options.Bar && !options.OutRange && ((gry < 0) || (gry > h))) return true;\n\n            pnt.grx1 = Math.round(grx);\n            pnt.gry1 = Math.round(gry);\n\n            if (this.has_errors) {\n               pnt.grx0 = Math.round(funcs.grx(pnt.x - options.ScaleErrX*pnt.exlow) - grx);\n               pnt.grx2 = Math.round(funcs.grx(pnt.x + options.ScaleErrX*pnt.exhigh) - grx);\n               pnt.gry0 = Math.round(funcs.gry(pnt.y - pnt.eylow) - gry);\n               pnt.gry2 = Math.round(funcs.gry(pnt.y + pnt.eyhigh) - gry);\n\n               if (this.is_bent) {\n                  pnt.grdx0 = Math.round(funcs.gry(pnt.y + graph.fEXlowd[i]) - gry);\n                  pnt.grdx2 = Math.round(funcs.gry(pnt.y + graph.fEXhighd[i]) - gry);\n                  pnt.grdy0 = Math.round(funcs.grx(pnt.x + graph.fEYlowd[i]) - grx);\n                  pnt.grdy2 = Math.round(funcs.grx(pnt.x + graph.fEYhighd[i]) - grx);\n               } else {\n                  pnt.grdx0 = pnt.grdx2 = pnt.grdy0 = pnt.grdy2 = 0;\n               }\n            }\n\n            return false;\n         });\n\n         if (main_block)\n            this.draw_kind = \"nodes\";\n\n         nodes = draw_g.selectAll(\".grpoint\")\n                       .data(drawbins)\n                       .enter()\n                       .append(\"svg:g\")\n                       .attr(\"class\", \"grpoint\")\n                       .attr(\"transform\", d => `translate(${d.grx1},${d.gry1})`);\n      }\n\n      if (options.Bar) {\n         // calculate bar width\n         for (let i = 1; i < drawbins.length-1; ++i)\n            drawbins[i].width = Math.max(2, (drawbins[i+1].grx1 - drawbins[i-1].grx1) / 2 - 2);\n\n         // first and last bins\n         switch (drawbins.length) {\n            case 0: break;\n            case 1: drawbins[0].width = w/4; break; // pathologic case of single bin\n            case 2: drawbins[0].width = drawbins[1].width = (drawbins[1].grx1-drawbins[0].grx1)/2; break;\n            default:\n               drawbins[0].width = drawbins[1].width;\n               drawbins[drawbins.length-1].width = drawbins[drawbins.length-2].width;\n         }\n\n         let yy0 = Math.round(funcs.gry(0)), usefill = fillatt;\n\n         if (main_block) {\n            let fp = this.getFramePainter(),\n                fpcol = fp?.fillatt && !fp?.fillatt.empty() ? fp.fillatt.getFillColor() : -1;\n            if (fpcol === fillatt.getFillColor())\n               usefill = new TAttFillHandler({ color: fpcol == \"white\" ? 1 : 0, pattern: 1001 });\n         }\n\n         nodes.append(\"svg:path\")\n              .attr(\"d\", d => {\n                 d.bar = true; // element drawn as bar\n                 let dx = Math.round(-d.width/2),\n                     dw = Math.round(d.width),\n                     dy = (options.Bar!==1) ? 0 : ((d.gry1 > yy0) ? yy0-d.gry1 : 0),\n                     dh = (options.Bar!==1) ? (h > d.gry1 ? h - d.gry1 : 0) : Math.abs(yy0 - d.gry1);\n                 return `M${dx},${dy}h${dw}v${dh}h${-dw}z`;\n              })\n            .call(usefill.func);\n      }\n\n      if (options.Rect) {\n         nodes.filter(d => (d.exlow > 0) && (d.exhigh > 0) && (d.eylow > 0) && (d.eyhigh > 0))\n           .append(\"svg:path\")\n           .attr(\"d\", d => {\n               d.rect = true;\n               return `M${d.grx0},${d.gry0}H${d.grx2}V${d.gry2}H${d.grx0}Z`;\n            })\n           .call(fillatt.func)\n           .call(options.Rect === 2 ? lineatt.func : () => {});\n      }\n\n      this.error_size = 0;\n\n      if (options.Errors) {\n         // to show end of error markers, use line width attribute\n         let lw = lineatt.width + gStyle.fEndErrorSize, bb = 0,\n             vv = options.Ends ? `m0,${lw}v${-2*lw}` : \"\",\n             hh = options.Ends ? `m${lw},0h${-2*lw}` : \"\",\n             vleft = vv, vright = vv, htop = hh, hbottom = hh;\n\n         const mainLine = (dx,dy) => {\n            if (!options.MainError) return `M${dx},${dy}`;\n            let res = \"M0,0\";\n            if (dx) return res + (dy ? `L${dx},${dy}` : `H${dx}`);\n            return dy ? res + `V${dy}` : res;\n         };\n\n         switch (options.Ends) {\n            case 2:  // option []\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `m${bb},${lw}h${-bb}v${-2*lw}h${bb}`;\n               vright = `m${-bb},${lw}h${bb}v${-2*lw}h${-bb}`;\n               htop = `m${-lw},${bb}v${-bb}h${2*lw}v${bb}`;\n               hbottom = `m${-lw},${-bb}v${bb}h${2*lw}v${-bb}`;\n               break;\n            case 3: // option |>\n               lw = Math.max(lw, Math.round(graph.fMarkerSize*8*0.66));\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `l${bb},${lw}v${-2*lw}l${-bb},${lw}`;\n               vright = `l${-bb},${lw}v${-2*lw}l${bb},${lw}`;\n               htop = `l${-lw},${bb}h${2*lw}l${-lw},${-bb}`;\n               hbottom = `l${-lw},${-bb}h${2*lw}l${-lw},${bb}`;\n               break;\n            case 4: // option >\n               lw = Math.max(lw, Math.round(graph.fMarkerSize*8*0.66));\n               bb = Math.max(lineatt.width+1, Math.round(lw*0.66));\n               vleft = `l${bb},${lw}m0,${-2*lw}l${-bb},${lw}`;\n               vright = `l${-bb},${lw}m0,${-2*lw}l${bb},${lw}`;\n               htop = `l${-lw},${bb}m${2*lw},0l${-lw},${-bb}`;\n               hbottom = `l${-lw},${-bb}m${2*lw},0l${-lw},${bb}`;\n               break;\n         }\n\n         this.error_size = lw;\n\n         lw = Math.floor((lineatt.width-1)/2); // one should take into account half of end-cup line width\n\n         let visible = nodes.filter(d => (d.exlow > 0) || (d.exhigh > 0) || (d.eylow > 0) || (d.eyhigh > 0));\n         if (options.skip_errors_x0 || options.skip_errors_y0)\n            visible = visible.filter(d => ((d.x != 0) || !options.skip_errors_x0) && ((d.y != 0) || !options.skip_errors_y0));\n\n         if (!isBatchMode() && settings.Tooltip && main_block)\n            visible.append(\"svg:path\")\n                   .style(\"fill\", \"none\")\n                   .style(\"pointer-events\", \"visibleFill\")\n                   .attr(\"d\", d => `M${d.grx0},${d.gry0}h${d.grx2-d.grx0}v${d.gry2-d.gry0}h${d.grx0-d.grx2}z`);\n\n         visible.append(\"svg:path\")\n             .call(lineatt.func)\n             .style(\"fill\", \"none\")\n             .attr(\"d\", d => {\n                d.error = true;\n                return ((d.exlow > 0)  ? mainLine(d.grx0+lw, d.grdx0) + vleft : \"\") +\n                       ((d.exhigh > 0) ? mainLine(d.grx2-lw, d.grdx2) + vright : \"\") +\n                       ((d.eylow > 0)  ? mainLine(d.grdy0, d.gry0-lw) + hbottom : \"\") +\n                       ((d.eyhigh > 0) ? mainLine(d.grdy2, d.gry2+lw) + htop : \"\");\n              });\n      }\n\n      if (options.Mark) {\n         // for tooltips use markers only if nodes were not created\n         this.createAttMarker({ attr: graph, style: options.Mark - 100 });\n\n         this.marker_size = this.markeratt.getFullSize();\n\n         this.markeratt.resetPos();\n\n         let path = \"\", pnt, grx, gry,\n             want_tooltip = !isBatchMode() && settings.Tooltip && (!this.markeratt.fill || (this.marker_size < 7)) && !nodes && main_block,\n             hints_marker = \"\", hsz = Math.max(5, Math.round(this.marker_size*0.7)),\n             maxnummarker = 1000000 / (this.markeratt.getMarkerLength() + 7), step = 1; // let produce SVG at maximum 1MB\n\n         if (!drawbins)\n            drawbins = this.optimizeBins(maxnummarker);\n         else if (this.canOptimize() && (drawbins.length > 1.5*maxnummarker))\n            step = Math.min(2, Math.round(drawbins.length/maxnummarker));\n\n         for (let n = 0; n < drawbins.length; n += step) {\n            pnt = drawbins[n];\n            grx = funcs.grx(pnt.x);\n            if ((grx > -this.marker_size) && (grx < w + this.marker_size)) {\n               gry = funcs.gry(pnt.y);\n               if ((gry > -this.marker_size) && (gry < h + this.marker_size)) {\n                  path += this.markeratt.create(grx, gry);\n                  if (want_tooltip) hints_marker += `M${grx-hsz},${gry-hsz}h${2*hsz}v${2*hsz}h${-2*hsz}z`;\n               }\n            }\n         }\n\n         if (path.length > 0) {\n            draw_g.append(\"svg:path\")\n                  .attr(\"d\", path)\n                  .call(this.markeratt.func);\n            if ((nodes === null) && (this.draw_kind == \"none\") && main_block)\n               this.draw_kind = (options.Mark == 101) ? \"path\" : \"mark\";\n         }\n         if (want_tooltip && hints_marker)\n            draw_g.append(\"svg:path\")\n                  .attr(\"d\", hints_marker)\n                  .style(\"fill\", \"none\")\n                  .style(\"pointer-events\", \"visibleFill\");\n      }\n   }\n\n   /** @summary append TGraphQQ part */\n   appendQQ(funcs, graph) {\n      let xqmin = Math.max(funcs.scale_xmin, graph.fXq1),\n          xqmax = Math.min(funcs.scale_xmax, graph.fXq2),\n          yqmin = Math.max(funcs.scale_ymin, graph.fYq1),\n          yqmax = Math.min(funcs.scale_ymax, graph.fYq2),\n          path2 = \"\",\n          makeLine = (x1,y1,x2,y2) => `M${funcs.grx(x1)},${funcs.gry(y1)}L${funcs.grx(x2)},${funcs.gry(y2)}`,\n          yxmin = (graph.fYq2 - graph.fYq1)*(funcs.scale_xmin-graph.fXq1)/(graph.fXq2-graph.fXq1) + graph.fYq1,\n          yxmax = (graph.fYq2-graph.fYq1)*(funcs.scale_xmax-graph.fXq1)/(graph.fXq2-graph.fXq1) + graph.fYq1;\n\n      if (yxmin < funcs.scale_ymin) {\n         let xymin = (graph.fXq2 - graph.fXq1)*(funcs.scale_ymin-graph.fYq1)/(graph.fYq2-graph.fYq1) + graph.fXq1;\n         path2 = makeLine(xymin, funcs.scale_ymin, xqmin, yqmin);\n      } else {\n         path2 = makeLine(funcs.scale_xmin, yxmin, xqmin, yqmin);\n      }\n\n      if (yxmax > funcs.scale_ymax) {\n         let xymax = (graph.fXq2-graph.fXq1)*(funcs.scale_ymax-graph.fYq1)/(graph.fYq2-graph.fYq1) + graph.fXq1;\n         path2 += makeLine(xqmax, yqmax, xymax, funcs.scale_ymax);\n      } else {\n         path2 += makeLine(xqmax, yqmax, funcs.scale_xmax, yxmax);\n      }\n\n      let latt1 = new TAttLineHandler({ style: 1, width: 1, color: \"black\" }),\n          latt2 = new TAttLineHandler({ style: 2, width: 1, color: \"black\" });\n\n      this.draw_g.append(\"path\")\n                 .attr(\"d\", makeLine(xqmin,yqmin,xqmax,yqmax))\n                 .call(latt1.func)\n                 .style(\"fill\", \"none\");\n\n      this.draw_g.append(\"path\")\n                 .attr(\"d\", path2)\n                 .call(latt2.func)\n                 .style(\"fill\", \"none\");\n   }\n\n   drawBins3D(/*fp, graph*/) {\n      console.log('Load ./hist/TGraphPainter.mjs to draw graph in 3D');\n   }\n\n   /** @summary draw TGraph */\n   drawGraph() {\n\n      let pmain = this.get_main(),\n          graph = this.getObject();\n      if (!pmain) return;\n\n      // special mode for TMultiGraph 3d drawing\n      if (this.options.pos3d)\n         return this.drawBins3D(pmain, graph);\n\n      let is_gme = !!this.get_gme(),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          w = pmain.getFrameWidth(),\n          h = pmain.getFrameHeight();\n\n      this.createG(!pmain.pad_layer);\n\n      if (this.options._pfc || this.options._plc || this.options._pmc) {\n         let mp = this.getMainPainter();\n         if (typeof mp?.createAutoColor == 'function') {\n            let icolor = mp.createAutoColor();\n            if (this.options._pfc) { graph.fFillColor = icolor; delete this.fillatt; }\n            if (this.options._plc) { graph.fLineColor = icolor; delete this.lineatt; }\n            if (this.options._pmc) { graph.fMarkerColor = icolor; delete this.markeratt; }\n            this.options._pfc = this.options._plc = this.options._pmc = false;\n         }\n      }\n\n      this.createAttLine({ attr: graph, can_excl: true });\n      this.createAttFill({ attr: graph });\n\n      this.fillatt.used = false; // mark used only when really used\n\n      this.draw_kind = \"none\"; // indicate if special svg:g were created for each bin\n      this.marker_size = 0; // indicate if markers are drawn\n      let draw_g = is_gme ? this.draw_g.append(\"svg:g\") : this.draw_g;\n\n      this.drawBins(funcs, this.options, draw_g, w, h, this.lineatt, this.fillatt, true);\n\n      if (graph._typename == \"TGraphQQ\")\n         this.appendQQ(funcs, graph);\n\n      if (is_gme) {\n         for (let k = 0; k < graph.fNYErrors; ++k) {\n            let lineatt = this.lineatt, fillatt = this.fillatt;\n            if (this.options.individual_styles) {\n               lineatt = new TAttLineHandler({ attr: graph.fAttLine[k], std: false });\n               fillatt = new TAttFillHandler({ attr: graph.fAttFill[k], std: false, svg: this.getCanvSvg() });\n            }\n            let sub_g = this.draw_g.append(\"svg:g\"),\n                options = k < this.options.blocks.length ? this.options.blocks[k] : this.options;\n            this.extractGmeErrors(k);\n            this.drawBins(funcs, options, sub_g, w, h, lineatt, fillatt);\n         }\n         this.extractGmeErrors(0); // ensure that first block kept at the end\n      }\n\n      if (!isBatchMode())\n         addMoveHandler(this, this.testEditable());\n   }\n\n   /** @summary Provide tooltip at specified point */\n   extractTooltip(pnt) {\n      if (!pnt) return null;\n\n      if ((this.draw_kind == \"lines\") || (this.draw_kind == \"path\") || (this.draw_kind == \"mark\"))\n         return this.extractTooltipForPath(pnt);\n\n      if (this.draw_kind != \"nodes\") return null;\n\n      let pmain = this.getFramePainter(),\n          height = pmain.getFrameHeight(),\n          esz = this.error_size,\n          isbar1 = (this.options.Bar === 1),\n          funcs = isbar1 ? pmain.getGrFuncs(this.options.second_x, this.options.second_y) : null,\n          findbin = null, best_dist2 = 1e10, best = null,\n          msize = this.marker_size ? Math.round(this.marker_size/2 + 1.5) : 0;\n\n      this.draw_g.selectAll('.grpoint').each(function() {\n         let d = d3_select(this).datum();\n         if (d === undefined) return;\n         let dist2 = (pnt.x - d.grx1) ** 2;\n         if (pnt.nproc === 1) dist2 += (pnt.y - d.gry1) ** 2;\n         if (dist2 >= best_dist2) return;\n\n         let rect;\n\n         if (d.error || d.rect || d.marker) {\n            rect = { x1: Math.min(-esz, d.grx0, -msize),\n                     x2: Math.max(esz, d.grx2, msize),\n                     y1: Math.min(-esz, d.gry2, -msize),\n                     y2: Math.max(esz, d.gry0, msize) };\n         } else if (d.bar) {\n             rect = { x1: -d.width/2, x2: d.width/2, y1: 0, y2: height - d.gry1 };\n\n             if (isbar1) {\n                let yy0 = funcs.gry(0);\n                rect.y1 = (d.gry1 > yy0) ? yy0-d.gry1 : 0;\n                rect.y2 = (d.gry1 > yy0) ? 0 : yy0-d.gry1;\n             }\n          } else {\n             rect = { x1: -5, x2: 5, y1: -5, y2: 5 };\n          }\n          let matchx = (pnt.x >= d.grx1 + rect.x1) && (pnt.x <= d.grx1 + rect.x2),\n              matchy = (pnt.y >= d.gry1 + rect.y1) && (pnt.y <= d.gry1 + rect.y2);\n\n          if (matchx && (matchy || (pnt.nproc > 1))) {\n             best_dist2 = dist2;\n             findbin = this;\n             best = rect;\n             best.exact = /* matchx && */ matchy;\n          }\n       });\n\n      if (findbin === null) return null;\n\n      let d = d3_select(findbin).datum(),\n          gr = this.getObject(),\n          res = { name: gr.fName, title: gr.fTitle,\n                  x: d.grx1, y: d.gry1,\n                  color1: this.lineatt.color,\n                  lines: this.getTooltips(d),\n                  rect: best, d3bin: findbin };\n\n       res.user_info = { obj: gr, name: gr.fName, bin: d.indx, cont: d.y, grx: d.grx1, gry: d.gry1 };\n\n      if (this.fillatt && this.fillatt.used && !this.fillatt.empty())\n         res.color2 = this.fillatt.getFillColor();\n\n      if (best.exact) res.exact = true;\n      res.menu = res.exact; // activate menu only when exactly locate bin\n      res.menu_dist = 3; // distance always fixed\n      res.bin = d;\n      res.binindx = d.indx;\n\n      return res;\n   }\n\n   /** @summary Show tooltip */\n   showTooltip(hint) {\n\n      if (!hint) {\n         if (this.draw_g) this.draw_g.select(\".tooltip_bin\").remove();\n         return;\n      }\n\n      if (hint.usepath) return this.showTooltipForPath(hint);\n\n      let d = d3_select(hint.d3bin).datum(),\n          ttrect = this.draw_g.select(\".tooltip_bin\");\n\n      if (ttrect.empty())\n         ttrect = this.draw_g.append(\"svg:rect\")\n                             .attr(\"class\",\"tooltip_bin h1bin\")\n                             .style(\"pointer-events\",\"none\");\n\n      hint.changed = ttrect.property(\"current_bin\") !== hint.d3bin;\n\n      if (hint.changed)\n         ttrect.attr(\"x\", d.grx1 + hint.rect.x1)\n               .attr(\"width\", hint.rect.x2 - hint.rect.x1)\n               .attr(\"y\", d.gry1 + hint.rect.y1)\n               .attr(\"height\", hint.rect.y2 - hint.rect.y1)\n               .style(\"opacity\", \"0.3\")\n               .property(\"current_bin\", hint.d3bin);\n   }\n\n   /** @summary Process tooltip event */\n   processTooltipEvent(pnt) {\n      let hint = this.extractTooltip(pnt);\n      if (!pnt || !pnt.disabled) this.showTooltip(hint);\n      return hint;\n   }\n\n   /** @summary Find best bin index for specified point */\n   findBestBin(pnt) {\n      if (!this.bins) return null;\n\n      let islines = (this.draw_kind == \"lines\"),\n          bestindx = -1,\n          bestbin = null,\n          bestdist = 1e10,\n          pmain = this.getFramePainter(),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          dist, grx, gry, n, bin;\n\n      for (n = 0; n < this.bins.length; ++n) {\n         bin = this.bins[n];\n\n         grx = funcs.grx(bin.x);\n         gry = funcs.gry(bin.y);\n\n         dist = (pnt.x-grx)**2 + (pnt.y-gry)**2;\n\n         if (dist < bestdist) {\n            bestdist = dist;\n            bestbin = bin;\n            bestindx = n;\n         }\n      }\n\n      // check last point\n      if ((bestdist > 100) && islines) bestbin = null;\n\n      let radius = Math.max(this.lineatt.width + 3, 4);\n\n      if (this.marker_size > 0) radius = Math.max(this.marker_size, radius);\n\n      if (bestbin)\n         bestdist = Math.sqrt((pnt.x-funcs.grx(bestbin.x))**2 + (pnt.y-funcs.gry(bestbin.y))**2);\n\n      if (!islines && (bestdist > radius)) bestbin = null;\n\n      if (!bestbin) bestindx = -1;\n\n      let res = { bin: bestbin, indx: bestindx, dist: bestdist, radius: Math.round(radius) };\n\n      if (!bestbin && islines) {\n\n         bestdist = 1e10;\n\n         const IsInside = (x, x1, x2) => ((x1 >= x) && (x >= x2)) || ((x1 <= x) && (x <= x2));\n\n         let bin0 = this.bins[0], grx0 = funcs.grx(bin0.x), gry0, posy = 0;\n         for (n = 1; n < this.bins.length; ++n) {\n            bin = this.bins[n];\n            grx = funcs.grx(bin.x);\n\n            if (IsInside(pnt.x, grx0, grx)) {\n               // if inside interval, check Y distance\n               gry0 = funcs.gry(bin0.y);\n               gry = funcs.gry(bin.y);\n\n               if (Math.abs(grx - grx0) < 1) {\n                  // very close x - check only y\n                  posy = pnt.y;\n                  dist = IsInside(pnt.y, gry0, gry) ? 0 : Math.min(Math.abs(pnt.y-gry0), Math.abs(pnt.y-gry));\n               } else {\n                  posy = gry0 + (pnt.x - grx0) / (grx - grx0) * (gry - gry0);\n                  dist = Math.abs(posy - pnt.y);\n               }\n\n               if (dist < bestdist) {\n                  bestdist = dist;\n                  res.linex = pnt.x;\n                  res.liney = posy;\n               }\n            }\n\n            bin0 = bin;\n            grx0 = grx;\n         }\n\n         if (bestdist < radius*0.5) {\n            res.linedist = bestdist;\n            res.closeline = true;\n         }\n      }\n\n      return res;\n   }\n\n   /** @summary Check editable flag for TGraph\n     * @desc if arg specified changes or toggles editable flag */\n   testEditable(arg) {\n      let obj = this.getObject();\n      if (!obj) return false;\n      if ((arg == \"toggle\") || ((arg !== undefined) && (!arg != obj.TestBit(kNotEditable))))\n         obj.InvertBit(kNotEditable);\n      return !obj.TestBit(kNotEditable);\n   }\n\n   /** @summary Provide tooltip at specified point for path-based drawing */\n   extractTooltipForPath(pnt) {\n\n      if (this.bins === null) return null;\n\n      let best = this.findBestBin(pnt);\n\n      if (!best || (!best.bin && !best.closeline)) return null;\n\n      let islines = (this.draw_kind==\"lines\"),\n          ismark = (this.draw_kind==\"mark\"),\n          pmain = this.getFramePainter(),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          gr = this.getObject(),\n          res = { name: gr.fName, title: gr.fTitle,\n                  x: best.bin ? funcs.grx(best.bin.x) : best.linex,\n                  y: best.bin ? funcs.gry(best.bin.y) : best.liney,\n                  color1: this.lineatt.color,\n                  lines: this.getTooltips(best.bin),\n                  usepath: true };\n\n      res.user_info = { obj: gr,  name: gr.fName, bin: 0, cont: 0, grx: res.x, gry: res.y };\n\n      res.ismark = ismark;\n      res.islines = islines;\n\n      if (best.closeline) {\n         res.menu = res.exact = true;\n         res.menu_dist = best.linedist;\n      } else if (best.bin) {\n         if (this.options.EF && islines) {\n            res.gry1 = funcs.gry(best.bin.y - best.bin.eylow);\n            res.gry2 = funcs.gry(best.bin.y + best.bin.eyhigh);\n         } else {\n            res.gry1 = res.gry2 = funcs.gry(best.bin.y);\n         }\n\n         res.binindx = best.indx;\n         res.bin = best.bin;\n         res.radius = best.radius;\n         res.user_info.bin = best.indx;\n         res.user_info.cont = best.bin.y;\n\n         res.exact = (Math.abs(pnt.x - res.x) <= best.radius) &&\n            ((Math.abs(pnt.y - res.gry1) <= best.radius) || (Math.abs(pnt.y - res.gry2) <= best.radius));\n\n         res.menu = res.exact;\n         res.menu_dist = Math.sqrt((pnt.x-res.x)**2 + Math.min(Math.abs(pnt.y-res.gry1), Math.abs(pnt.y-res.gry2))**2);\n      }\n\n      if (this.fillatt && this.fillatt.used && !this.fillatt.empty())\n         res.color2 = this.fillatt.getFillColor();\n\n      if (!islines) {\n         res.color1 = this.getColor(gr.fMarkerColor);\n         if (!res.color2) res.color2 = res.color1;\n      }\n\n      return res;\n   }\n\n   /** @summary Show tooltip for path drawing */\n   showTooltipForPath(hint) {\n\n      let ttbin = this.draw_g.select(\".tooltip_bin\");\n\n      if (!hint || !hint.bin) {\n         ttbin.remove();\n         return;\n      }\n\n      if (ttbin.empty())\n         ttbin = this.draw_g.append(\"svg:g\").attr(\"class\",\"tooltip_bin\");\n\n      hint.changed = ttbin.property(\"current_bin\") !== hint.bin;\n\n      if (hint.changed) {\n         ttbin.selectAll(\"*\").remove(); // first delete all children\n         ttbin.property(\"current_bin\", hint.bin);\n\n         if (hint.ismark) {\n            ttbin.append(\"svg:rect\")\n                 .attr(\"class\",\"h1bin\")\n                 .style(\"pointer-events\",\"none\")\n                 .style(\"opacity\", \"0.3\")\n                 .attr(\"x\", Math.round(hint.x - hint.radius))\n                 .attr(\"y\", Math.round(hint.y - hint.radius))\n                 .attr(\"width\", 2*hint.radius)\n                 .attr(\"height\", 2*hint.radius);\n         } else {\n            ttbin.append(\"svg:circle\").attr(\"cy\", Math.round(hint.gry1));\n            if (Math.abs(hint.gry1-hint.gry2) > 1)\n               ttbin.append(\"svg:circle\").attr(\"cy\", Math.round(hint.gry2));\n\n            let elem = ttbin.selectAll(\"circle\")\n                            .attr(\"r\", hint.radius)\n                            .attr(\"cx\", Math.round(hint.x));\n\n            if (!hint.islines) {\n               elem.style('stroke', hint.color1 == 'black' ? 'green' : 'black').style('fill','none');\n            } else {\n               if (this.options.Line || this.options.Curve)\n                  elem.call(this.lineatt.func);\n               else\n                  elem.style('stroke','black');\n               if (this.options.Fill)\n                  elem.call(this.fillatt.func);\n               else\n                  elem.style('fill','none');\n            }\n         }\n      }\n   }\n\n   /** @summary Check if graph moving is enabled */\n   moveEnabled() {\n      return this.testEditable();\n   }\n\n   /** @summary Start moving of TGraph */\n   moveStart(x,y) {\n      this.pos_dx = this.pos_dy = 0;\n      let hint = this.extractTooltip({x, y});\n      if (hint && hint.exact && (hint.binindx !== undefined)) {\n         this.move_binindx = hint.binindx;\n         this.move_bin = hint.bin;\n         let pmain = this.getFramePainter(),\n             funcs = pmain?.getGrFuncs(this.options.second_x, this.options.second_y);\n         this.move_x0 = funcs ? funcs.grx(this.move_bin.x) : x;\n         this.move_y0 = funcs ? funcs.gry(this.move_bin.y) : y;\n      } else {\n         delete this.move_binindx;\n      }\n   }\n\n   /** @summary Perform moving */\n   moveDrag(dx,dy) {\n      this.pos_dx += dx;\n      this.pos_dy += dy;\n\n      if (this.move_binindx === undefined) {\n         this.draw_g.attr(\"transform\", `translate(${this.pos_dx},${this.pos_dy})`);\n      } else {\n         let pmain = this.getFramePainter(),\n             funcs = pmain?.getGrFuncs(this.options.second_x, this.options.second_y);\n         if (funcs && this.move_bin) {\n            this.move_bin.x = funcs.revertAxis(\"x\", this.move_x0 + this.pos_dx);\n            this.move_bin.y = funcs.revertAxis(\"y\", this.move_y0 + this.pos_dy);\n            this.drawGraph();\n         }\n      }\n   }\n\n   /** @summary Complete moving */\n   moveEnd(not_changed) {\n      let exec = \"\";\n\n      if (this.move_binindx === undefined) {\n         this.draw_g.attr(\"transform\", null);\n\n         let pmain = this.getFramePainter(),\n             funcs = pmain?.getGrFuncs(this.options.second_x, this.options.second_y);\n         if (funcs && this.bins && !not_changed) {\n            for (let k = 0; k < this.bins.length; ++k) {\n               let bin = this.bins[k];\n               bin.x = funcs.revertAxis(\"x\", funcs.grx(bin.x) + this.pos_dx);\n               bin.y = funcs.revertAxis(\"y\", funcs.gry(bin.y) + this.pos_dy);\n               exec += `SetPoint(${bin.indx},${bin.x},${bin.y});;`;\n               if ((bin.indx == 0) && this.matchObjectType('TCutG'))\n                  exec += `SetPoint(${this.getObject().fNpoints-1},${bin.x},${bin.y});;`;\n            }\n            this.drawGraph();\n         }\n      } else {\n         exec = `SetPoint(${this.move_bin.indx},${this.move_bin.x},${this.move_bin.y});;`;\n         if ((this.move_bin.indx == 0) && this.matchObjectType('TCutG'))\n            exec += `SetPoint(${this.getObject().fNpoints-1},${this.move_bin.x},${this.move_bin.y});;`;\n         delete this.move_binindx;\n      }\n\n      if (exec && !not_changed)\n         this.submitCanvExec(exec);\n   }\n\n   /** @summary Fill context menu */\n   fillContextMenu(menu) {\n      super.fillContextMenu(menu);\n\n      if (!this.snapid)\n         menu.addchk(this.testEditable(), \"Editable\", () => { this.testEditable(\"toggle\"); this.drawGraph(); });\n\n      return menu.size() > 0;\n   }\n\n   /** @summary Execute menu command\n     * @private */\n   executeMenuCommand(method, args) {\n      if (super.executeMenuCommand(method,args)) return true;\n\n      let canp = this.getCanvPainter(), pmain = this.getFramePainter();\n\n      if ((method.fName == 'RemovePoint') || (method.fName == 'InsertPoint')) {\n         let pnt = pmain?.getLastEventPos();\n\n         if (!canp || canp._readonly || !pnt) return true; // ignore function\n\n         let hint = this.extractTooltip(pnt);\n\n         if (method.fName == 'InsertPoint') {\n            let funcs = pmain?.getGrFuncs(this.options.second_x, this.options.second_y),\n                userx = funcs?.revertAxis(\"x\", pnt.x) ?? 0,\n                usery = funcs?.revertAxis(\"y\", pnt.y) ?? 0;\n            this.submitCanvExec(`AddPoint(${userx.toFixed(3)}, ${usery.toFixed(3)})`, this.args_menu_id);\n         } else if (this.args_menu_id && (hint?.binindx !== undefined)) {\n            this.submitCanvExec(`RemovePoint(${hint.binindx})`, this.args_menu_id);\n         }\n\n         return true; // call is processed\n      }\n\n      return false;\n   }\n\n   /** @summary Update TGraph object */\n   updateObject(obj, opt) {\n      if (!this.matchObjectType(obj)) return false;\n\n      if (opt && (opt != this.options.original))\n         this.decodeOptions(opt);\n\n      let graph = this.getObject();\n      // TODO: make real update of TGraph object content\n      graph.fBits = obj.fBits;\n      graph.fTitle = obj.fTitle;\n      graph.fX = obj.fX;\n      graph.fY = obj.fY;\n      graph.fNpoints = obj.fNpoints;\n      graph.fMinimum = obj.fMinimum;\n      graph.fMaximum = obj.fMaximum;\n      this.createBins();\n\n      delete this.$redraw_hist;\n\n      // if our own histogram was used as axis drawing, we need update histogram as well\n      if (this.axes_draw) {\n         let histo = this.createHistogram(obj.fHistogram);\n         histo.fTitle = graph.fTitle; // copy title\n\n         let hist_painter = this.getMainPainter();\n         if (hist_painter?.$secondary) {\n            hist_painter.updateObject(histo, this.options.Axis);\n            this.$redraw_hist = true;\n         }\n      }\n\n      return true;\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range\n     * @desc allow to zoom TGraph only when at least one point in the range */\n   canZoomInside(axis,min,max) {\n      let gr = this.getObject();\n      if (!gr || (axis !== (this.options.pos3d ? \"y\" : \"x\"))) return false;\n\n      for (let n = 0; n < gr.fNpoints; ++n)\n         if ((min < gr.fX[n]) && (gr.fX[n] < max)) return true;\n\n      return false;\n   }\n\n   /** @summary Process click on graph-defined buttons */\n   clickButton(funcname) {\n      if (funcname !== \"ToggleZoom\") return false;\n\n      let main = this.getFramePainter();\n      if (!main) return false;\n\n      if ((this.xmin === this.xmax) && (this.ymin === this.ymax)) return false;\n\n      main.zoom(this.xmin, this.xmax, this.ymin, this.ymax);\n\n      return true;\n   }\n\n   /** @summary Find TF1/TF2 in TGraph list of functions */\n   findFunc() {\n      let gr = this.getObject();\n      if (gr?.fFunctions?.arr)\n         for (let i = 0; i < gr.fFunctions.arr.length; ++i) {\n            let func = gr.fFunctions.arr[i];\n            if ((func._typename == 'TF1') || (func._typename == 'TF2')) return func;\n         }\n      return null;\n   }\n\n   /** @summary Find stat box in TGraph list of functions */\n   findStat() {\n      let gr = this.getObject();\n      if (gr?.fFunctions?.arr)\n         for (let i = 0; i < gr.fFunctions.arr.length; ++i) {\n            let func = gr.fFunctions.arr[i];\n            if ((func._typename == 'TPaveStats') && (func.fName == 'stats')) return func;\n         }\n      return null;\n   }\n\n   /** @summary Create stat box */\n   createStat() {\n      let func = this.findFunc();\n      if (!func) return null;\n\n      let stats = this.findStat();\n      if (stats) return stats;\n\n      // do not create stats box when drawing canvas\n      if (this.getCanvPainter()?.normal_canvas || this.options.PadStats) return null;\n\n      this.create_stats = true;\n\n      const st = gStyle;\n\n      stats = create('TPaveStats');\n      Object.assign(stats, { fName : 'stats', fOptStat: 0, fOptFit: st.fOptFit || 111, fBorderSize: 1 });\n\n      stats.fX1NDC = st.fStatX - st.fStatW;\n      stats.fY1NDC = st.fStatY - st.fStatH;\n      stats.fX2NDC = st.fStatX;\n      stats.fY2NDC = st.fStatY;\n\n      stats.fFillColor = st.fStatColor;\n      stats.fFillStyle = st.fStatStyle;\n\n      stats.fTextAngle = 0;\n      stats.fTextSize = st.fStatFontSize; // 9 ??\n      stats.fTextAlign = 12;\n      stats.fTextColor = st.fStatTextColor;\n      stats.fTextFont = st.fStatFont;\n\n      stats.AddText(func.fName);\n\n      // while TF1 was found, one can be sure that stats is existing\n      this.getObject().fFunctions.Add(stats);\n\n      return stats;\n   }\n\n   /** @summary Fill statistic */\n   fillStatistic(stat, dostat, dofit) {\n\n      // cannot fill stats without func\n      let func = this.findFunc();\n\n      if (!func || !dofit || !this.create_stats) return false;\n\n      stat.clearPave();\n\n      stat.fillFunctionStat(func, dofit);\n\n      return true;\n   }\n\n   /** @summary method draws next function from the functions list\n     * @returns {Promise} */\n   drawNextFunction(indx) {\n\n      let graph = this.getObject();\n\n      if (indx >= (graph?.fFunctions?.arr?.length || 0))\n         return Promise.resolve(this);\n\n      let pp = this.getPadPainter(),\n          func = graph.fFunctions.arr[indx],\n          opt = graph.fFunctions.opt[indx];\n\n      //  required for stats filling\n      // TODO: use weak reference (via pad list of painters and any kind of string)\n      func.$main_painter = this;\n\n      return pp.drawObject(this.getDom(), func, opt).then(() => this.drawNextFunction(indx+1));\n   }\n\n   /** @summary Draw axis histogram\n     * @private */\n   drawAxisHisto() {\n      let histo = this.createHistogram();\n      return TH1Painter.draw(this.getDom(), histo, this.options.Axis)\n   }\n\n   /** @summary Draw TGraph\n     * @private */\n   static _drawGraph(painter, opt) {\n      painter.decodeOptions(opt, true);\n      painter.createBins();\n      painter.createStat();\n      if (!settings.DragGraphs && !graph.TestBit(kNotEditable))\n         graph.InvertBit(kNotEditable);\n\n      let promise = Promise.resolve();\n\n      if ((!painter.getMainPainter() || painter.options.second_x || painter.options.second_y) && painter.options.Axis)\n         promise = painter.drawAxisHisto().then(hist_painter => {\n            if (hist_painter) {\n               painter.axes_draw = true;\n               if (!painter._own_histogram) painter.$primary = true;\n               hist_painter.$secondary = true;\n            }\n         });\n\n      return promise.then(() => {\n         painter.addToPadPrimitives();\n         return painter.drawGraph();\n      }).then(() => painter.drawNextFunction(0));\n   }\n\n   static draw(dom, graph, opt) {\n      return TGraphPainter._drawGraph(new TGraphPainter(dom, graph), opt);\n   }\n\n} // class TGraphPainter\n\nexport { TGraphPainter };\n"]}